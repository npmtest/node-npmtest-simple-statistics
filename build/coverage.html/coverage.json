{"/home/travis/build/npmtest/node-npmtest-simple-statistics/test.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/test.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":1,"12":1,"13":1,"14":1,"15":2,"16":2,"17":2,"18":2,"19":1,"20":1,"21":2,"22":2,"23":2,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":2,"40":2,"41":1,"42":2,"43":2,"44":1,"45":2,"46":2,"47":1,"48":2,"49":2,"50":1,"51":1,"52":1,"53":1,"54":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[1,1],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,1],"9":[1,1],"10":[1,1,1],"11":[1,1],"12":[1,1],"13":[1,1],"14":[1,1],"15":[1,1],"16":[1,1],"17":[1,1]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":1,"7":1,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":5},"end":{"line":61,"column":17}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":5},"end":{"line":82,"column":17}}},"6":{"name":"(anonymous_6)","line":91,"loc":{"start":{"line":91,"column":77},"end":{"line":94,"column":10}}},"7":{"name":"(anonymous_7)","line":112,"loc":{"start":{"line":112,"column":83},"end":{"line":115,"column":10}},"skip":true},"8":{"name":"(anonymous_8)","line":123,"loc":{"start":{"line":123,"column":77},"end":{"line":126,"column":10}},"skip":true},"9":{"name":"(anonymous_9)","line":139,"loc":{"start":{"line":139,"column":12},"end":{"line":139,"column":40}},"skip":true},"10":{"name":"(anonymous_10)","line":147,"loc":{"start":{"line":147,"column":77},"end":{"line":150,"column":10}},"skip":true},"11":{"name":"(anonymous_11)","line":158,"loc":{"start":{"line":158,"column":83},"end":{"line":161,"column":10}},"skip":true},"12":{"name":"(anonymous_12)","line":169,"loc":{"start":{"line":169,"column":79},"end":{"line":172,"column":10}},"skip":true},"13":{"name":"(anonymous_13)","line":180,"loc":{"start":{"line":180,"column":75},"end":{"line":183,"column":10}},"skip":true}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":195,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":56,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":40,"column":8},"end":{"line":53,"column":9}},"11":{"start":{"line":43,"column":12},"end":{"line":46,"column":14}},"12":{"start":{"line":47,"column":12},"end":{"line":47,"column":18}},"13":{"start":{"line":50,"column":12},"end":{"line":51,"column":33}},"14":{"start":{"line":52,"column":12},"end":{"line":52,"column":18}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":35}},"16":{"start":{"line":61,"column":4},"end":{"line":63,"column":9}},"17":{"start":{"line":62,"column":8},"end":{"line":62,"column":15}},"18":{"start":{"line":64,"column":4},"end":{"line":77,"column":5}},"19":{"start":{"line":70,"column":8},"end":{"line":70,"column":14}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"21":{"start":{"line":82,"column":4},"end":{"line":84,"column":9}},"22":{"start":{"line":83,"column":8},"end":{"line":83,"column":15}},"23":{"start":{"line":85,"column":4},"end":{"line":194,"column":5}},"24":{"start":{"line":91,"column":8},"end":{"line":99,"column":10}},"25":{"start":{"line":98,"column":12},"end":{"line":98,"column":35}},"26":{"start":{"line":102,"column":8},"end":{"line":104,"column":63}},"27":{"start":{"line":105,"column":8},"end":{"line":105,"column":14}},"28":{"start":{"line":112,"column":8},"end":{"line":121,"column":10},"skip":true},"29":{"start":{"line":119,"column":12},"end":{"line":119,"column":55},"skip":true},"30":{"start":{"line":120,"column":12},"end":{"line":120,"column":48},"skip":true},"31":{"start":{"line":123,"column":8},"end":{"line":136,"column":10},"skip":true},"32":{"start":{"line":130,"column":12},"end":{"line":130,"column":76},"skip":true},"33":{"start":{"line":131,"column":12},"end":{"line":131,"column":73},"skip":true},"34":{"start":{"line":132,"column":12},"end":{"line":132,"column":74},"skip":true},"35":{"start":{"line":133,"column":12},"end":{"line":133,"column":79},"skip":true},"36":{"start":{"line":134,"column":12},"end":{"line":134,"column":25},"skip":true},"37":{"start":{"line":135,"column":12},"end":{"line":135,"column":45},"skip":true},"38":{"start":{"line":138,"column":8},"end":{"line":145,"column":14},"skip":true},"39":{"start":{"line":143,"column":16},"end":{"line":143,"column":29},"skip":true},"40":{"start":{"line":144,"column":16},"end":{"line":144,"column":55},"skip":true},"41":{"start":{"line":147,"column":8},"end":{"line":156,"column":10},"skip":true},"42":{"start":{"line":154,"column":12},"end":{"line":154,"column":25},"skip":true},"43":{"start":{"line":155,"column":12},"end":{"line":155,"column":45},"skip":true},"44":{"start":{"line":158,"column":8},"end":{"line":167,"column":10},"skip":true},"45":{"start":{"line":165,"column":12},"end":{"line":165,"column":25},"skip":true},"46":{"start":{"line":166,"column":12},"end":{"line":166,"column":48},"skip":true},"47":{"start":{"line":169,"column":8},"end":{"line":178,"column":10},"skip":true},"48":{"start":{"line":176,"column":12},"end":{"line":176,"column":25},"skip":true},"49":{"start":{"line":177,"column":12},"end":{"line":177,"column":46},"skip":true},"50":{"start":{"line":180,"column":8},"end":{"line":189,"column":10},"skip":true},"51":{"start":{"line":187,"column":12},"end":{"line":187,"column":94},"skip":true},"52":{"start":{"line":188,"column":12},"end":{"line":188,"column":48},"skip":true},"53":{"start":{"line":192,"column":8},"end":{"line":192,"column":35},"skip":true},"54":{"start":{"line":193,"column":8},"end":{"line":193,"column":14},"skip":true}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":40,"type":"switch","locations":[{"start":{"line":42,"column":8},"end":{"line":47,"column":18}},{"start":{"line":49,"column":8},"end":{"line":52,"column":18}}]},"5":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":44}},{"start":{"line":44,"column":48},"end":{"line":44,"column":66}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":21},"end":{"line":50,"column":49}},{"start":{"line":50,"column":53},"end":{"line":50,"column":72}}]},"7":{"line":64,"type":"switch","locations":[{"start":{"line":69,"column":4},"end":{"line":70,"column":14}},{"start":{"line":75,"column":4},"end":{"line":76,"column":14}}]},"8":{"line":85,"type":"switch","locations":[{"start":{"line":90,"column":4},"end":{"line":105,"column":14}},{"start":{"line":111,"column":4},"end":{"line":193,"column":14},"skip":true}]},"9":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":42},"end":{"line":91,"column":73}},{"start":{"line":91,"column":77},"end":{"line":99,"column":9}}]},"10":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":18},"end":{"line":102,"column":32}},{"start":{"line":103,"column":12},"end":{"line":103,"column":53}},{"start":{"line":104,"column":12},"end":{"line":104,"column":61}}]},"11":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":45},"end":{"line":112,"column":79},"skip":true},{"start":{"line":112,"column":83},"end":{"line":121,"column":9},"skip":true}]},"12":{"line":123,"type":"binary-expr","locations":[{"start":{"line":123,"column":42},"end":{"line":123,"column":73},"skip":true},{"start":{"line":123,"column":77},"end":{"line":136,"column":9},"skip":true}]},"13":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":48},"end":{"line":138,"column":85},"skip":true},{"start":{"line":139,"column":12},"end":{"line":145,"column":13},"skip":true}]},"14":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":42},"end":{"line":147,"column":73},"skip":true},{"start":{"line":147,"column":77},"end":{"line":156,"column":9},"skip":true}]},"15":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":45},"end":{"line":158,"column":79},"skip":true},{"start":{"line":158,"column":83},"end":{"line":167,"column":9},"skip":true}]},"16":{"line":169,"type":"binary-expr","locations":[{"start":{"line":169,"column":43},"end":{"line":169,"column":75},"skip":true},{"start":{"line":169,"column":79},"end":{"line":178,"column":9},"skip":true}]},"17":{"line":180,"type":"binary-expr","locations":[{"start":{"line":180,"column":41},"end":{"line":180,"column":71},"skip":true},{"start":{"line":180,"column":75},"end":{"line":189,"column":9},"skip":true}]}},"code":["/* istanbul instrument in package npmtest_simple_statistics */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - init-before","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        switch (local.modeJs) {","        // re-init local from window.local","        case 'browser':","            local = local.global.utility2.objectSetDefault(","                local.global.utility2_rollup || local.global.local,","                local.global.utility2","            );","            break;","        // re-init local from example.js","        case 'node':","            local = (local.global.utility2_rollup || require('utility2'))","                .requireReadme();","            break;","        }","        // export local","        local.global.local = local;","    }());","","","","    // run shared js-env code - function","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - function","    case 'browser':","        break;","","","","    // run node js-env code - function","    case 'node':","        break;","    }","","","","    // run shared js-env code - init-after","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - init-after","    case 'browser':","        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (","            options,","            onError","        ) {","        /*","         * this function will test browsers's null-case handling-behavior-behavior","         */","            onError(null, options);","        };","","        // run tests","        local.nop(local.modeTest &&","            document.querySelector('#testRunButton1') &&","            document.querySelector('#testRunButton1').click());","        break;","","","","    // run node js-env code - init-after","    /* istanbul ignore next */","    case 'node':","        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApidoc's default handling-behavior-behavior","         */","            options = { modulePathList: module.paths };","            local.buildApidoc(options, onError);","        };","","        local.testCase_buildApp_default = local.testCase_buildApp_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApp's default handling-behavior-behavior","         */","            local.testCase_buildReadme_default(options, local.onErrorThrow);","            local.testCase_buildLib_default(options, local.onErrorThrow);","            local.testCase_buildTest_default(options, local.onErrorThrow);","            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);","            options = [];","            local.buildApp(options, onError);","        };","","        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||","            function (options, onError) {","            /*","             * this function will test buildCustomOrg's default handling-behavior","             */","                options = {};","                local.buildCustomOrg(options, onError);","            };","","        local.testCase_buildLib_default = local.testCase_buildLib_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildLib's default handling-behavior","         */","            options = {};","            local.buildLib(options, onError);","        };","","        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildReadme's default handling-behavior-behavior","         */","            options = {};","            local.buildReadme(options, onError);","        };","","        local.testCase_buildTest_default = local.testCase_buildTest_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildTest's default handling-behavior","         */","            options = {};","            local.buildTest(options, onError);","        };","","        local.testCase_webpage_default = local.testCase_webpage_default || function (","            options,","            onError","        ) {","        /*","         * this function will test webpage's default handling-behavior","         */","            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };","            local.browserTest(options, onError);","        };","","        // run test-server","        local.testRunServer(local);","        break;","    }","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"40":2,"43":1,"47":1,"50":1,"52":1,"55":2,"61":2,"62":2,"64":2,"70":1,"76":1,"82":2,"83":2,"85":2,"91":1,"98":1,"102":1,"105":1,"112":1,"119":1,"120":1,"123":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"138":1,"143":2,"144":2,"147":1,"154":2,"155":2,"158":1,"165":2,"166":2,"169":1,"176":2,"177":2,"180":1,"187":1,"188":1,"192":1,"193":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/lib.npmtest_simple_statistics.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/lib.npmtest_simple_statistics.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":1,"15":1,"16":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1]},"f":{"1":2,"2":2,"3":2},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":53,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":52,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":41,"column":8},"end":{"line":41,"column":54}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":62}},"12":{"start":{"line":45,"column":8},"end":{"line":51,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":68}},"14":{"start":{"line":48,"column":12},"end":{"line":48,"column":35}},"15":{"start":{"line":49,"column":12},"end":{"line":49,"column":49}},"16":{"start":{"line":50,"column":12},"end":{"line":50,"column":43}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":44}},{"start":{"line":41,"column":48},"end":{"line":41,"column":53}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]}},"code":["/* istanbul instrument in package npmtest_simple_statistics */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - init-before","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || local;","        // init lib","        local.local = local.npmtest_simple_statistics = local;","        // init exports","        if (local.modeJs === 'browser') {","            local.global.utility2_npmtest_simple_statistics = local;","        } else {","            module.exports = local;","            module.exports.__dirname = __dirname;","            module.exports.module = module;","        }","    }());","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"41":2,"43":2,"45":2,"46":1,"48":1,"49":1,"50":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/example.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/example.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":2,"15":2,"16":2,"17":2,"18":2,"19":0,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1,"26":0,"27":0,"28":1,"29":1,"30":2,"31":0,"32":0,"33":0,"34":1,"35":2,"36":2,"37":3,"38":3,"39":3,"40":3,"41":0,"42":3,"43":3,"44":3,"45":1,"46":3,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":0,"58":1,"59":6,"60":6,"61":1,"62":2,"63":0,"64":2,"65":1,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1],"6":[1,1],"7":[2,0],"8":[2,1,1,1,1,1],"9":[0,2,0],"10":[1,1],"11":[2,1,1],"12":[1,0],"13":[0,2],"14":[2,0,0,0,0,0,0],"15":[0,3],"16":[3,0],"17":[1,1],"18":[0,1],"19":[1,2,0,2],"20":[1,0],"21":[1,1],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":3,"8":3,"9":3,"10":1,"11":6,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":1},"end":{"line":26,"column":13}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":5},"end":{"line":33,"column":17}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":24},"end":{"line":37,"column":36}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":31},"end":{"line":69,"column":48}},"skip":true},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":45}},"skip":true},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":33},"end":{"line":123,"column":48}},"skip":true},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":27},"end":{"line":125,"column":39}},"skip":true},"8":{"name":"(anonymous_8)","line":133,"loc":{"start":{"line":133,"column":59},"end":{"line":133,"column":74}},"skip":true},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":45},"end":{"line":143,"column":62}},"skip":true},"10":{"name":"(anonymous_10)","line":144,"loc":{"start":{"line":144,"column":73},"end":{"line":144,"column":92}},"skip":true},"11":{"name":"(anonymous_11)","line":272,"loc":{"start":{"line":272,"column":51},"end":{"line":272,"column":77}},"skip":true},"12":{"name":"(anonymous_12)","line":315,"loc":{"start":{"line":315,"column":32},"end":{"line":315,"column":61}},"skip":true}},"statementMap":{"1":{"start":{"line":26,"column":0},"end":{"line":326,"column":5}},"2":{"start":{"line":28,"column":4},"end":{"line":28,"column":14}},"3":{"start":{"line":33,"column":4},"end":{"line":60,"column":9}},"4":{"start":{"line":35,"column":8},"end":{"line":35,"column":19}},"5":{"start":{"line":37,"column":8},"end":{"line":49,"column":13}},"6":{"start":{"line":38,"column":12},"end":{"line":48,"column":13}},"7":{"start":{"line":39,"column":16},"end":{"line":42,"column":30}},"8":{"start":{"line":44,"column":16},"end":{"line":47,"column":27}},"9":{"start":{"line":51,"column":8},"end":{"line":53,"column":21}},"10":{"start":{"line":55,"column":8},"end":{"line":57,"column":45}},"11":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"12":{"start":{"line":61,"column":4},"end":{"line":325,"column":5}},"13":{"start":{"line":69,"column":8},"end":{"line":121,"column":10},"skip":true},"14":{"start":{"line":70,"column":12},"end":{"line":88,"column":13},"skip":true},"15":{"start":{"line":76,"column":16},"end":{"line":87,"column":19},"skip":true},"16":{"start":{"line":79,"column":20},"end":{"line":86,"column":21},"skip":true},"17":{"start":{"line":82,"column":24},"end":{"line":82,"column":43},"skip":true},"18":{"start":{"line":83,"column":24},"end":{"line":83,"column":30},"skip":true},"19":{"start":{"line":85,"column":24},"end":{"line":85,"column":49},"skip":true},"20":{"start":{"line":89,"column":12},"end":{"line":107,"column":13},"skip":true},"21":{"start":{"line":92,"column":16},"end":{"line":102,"column":17},"skip":true},"22":{"start":{"line":93,"column":20},"end":{"line":93,"column":86},"skip":true},"23":{"start":{"line":94,"column":20},"end":{"line":95,"column":45},"skip":true},"24":{"start":{"line":96,"column":20},"end":{"line":96,"column":42},"skip":true},"25":{"start":{"line":97,"column":20},"end":{"line":97,"column":48},"skip":true},"26":{"start":{"line":100,"column":20},"end":{"line":100,"column":85},"skip":true},"27":{"start":{"line":101,"column":20},"end":{"line":101,"column":96},"skip":true},"28":{"start":{"line":103,"column":16},"end":{"line":103,"column":22},"skip":true},"29":{"start":{"line":106,"column":16},"end":{"line":106,"column":22},"skip":true},"30":{"start":{"line":108,"column":12},"end":{"line":120,"column":13},"skip":true},"31":{"start":{"line":114,"column":16},"end":{"line":119,"column":17},"skip":true},"32":{"start":{"line":116,"column":20},"end":{"line":116,"column":78},"skip":true},"33":{"start":{"line":118,"column":20},"end":{"line":118,"column":47},"skip":true},"34":{"start":{"line":123,"column":8},"end":{"line":141,"column":11},"skip":true},"35":{"start":{"line":124,"column":12},"end":{"line":124,"column":54},"skip":true},"36":{"start":{"line":125,"column":12},"end":{"line":140,"column":14},"skip":true},"37":{"start":{"line":126,"column":16},"end":{"line":126,"column":28},"skip":true},"38":{"start":{"line":127,"column":16},"end":{"line":127,"column":69},"skip":true},"39":{"start":{"line":128,"column":16},"end":{"line":128,"column":75},"skip":true},"40":{"start":{"line":129,"column":16},"end":{"line":131,"column":17},"skip":true},"41":{"start":{"line":130,"column":20},"end":{"line":130,"column":27},"skip":true},"42":{"start":{"line":133,"column":16},"end":{"line":137,"column":36},"skip":true},"43":{"start":{"line":134,"column":20},"end":{"line":136,"column":55},"skip":true},"44":{"start":{"line":139,"column":16},"end":{"line":139,"column":57},"skip":true},"45":{"start":{"line":143,"column":8},"end":{"line":147,"column":11},"skip":true},"46":{"start":{"line":144,"column":12},"end":{"line":146,"column":15},"skip":true},"47":{"start":{"line":145,"column":16},"end":{"line":145,"column":70},"skip":true},"48":{"start":{"line":149,"column":8},"end":{"line":149,"column":31},"skip":true},"49":{"start":{"line":150,"column":8},"end":{"line":150,"column":14},"skip":true},"50":{"start":{"line":158,"column":8},"end":{"line":158,"column":31},"skip":true},"51":{"start":{"line":160,"column":8},"end":{"line":160,"column":33},"skip":true},"52":{"start":{"line":161,"column":8},"end":{"line":161,"column":37},"skip":true},"53":{"start":{"line":162,"column":8},"end":{"line":162,"column":35},"skip":true},"54":{"start":{"line":164,"column":8},"end":{"line":164,"column":50},"skip":true},"55":{"start":{"line":166,"column":8},"end":{"line":256,"column":2},"skip":true},"56":{"start":{"line":258,"column":8},"end":{"line":286,"column":9},"skip":true},"57":{"start":{"line":259,"column":12},"end":{"line":269,"column":14},"skip":true},"58":{"start":{"line":271,"column":12},"end":{"line":285,"column":19},"skip":true},"59":{"start":{"line":274,"column":20},"end":{"line":274,"column":35},"skip":true},"60":{"start":{"line":275,"column":20},"end":{"line":284,"column":21},"skip":true},"61":{"start":{"line":277,"column":24},"end":{"line":277,"column":64},"skip":true},"62":{"start":{"line":279,"column":24},"end":{"line":279,"column":40},"skip":true},"63":{"start":{"line":281,"column":24},"end":{"line":281,"column":40},"skip":true},"64":{"start":{"line":283,"column":24},"end":{"line":283,"column":39},"skip":true},"65":{"start":{"line":288,"column":8},"end":{"line":290,"column":9},"skip":true},"66":{"start":{"line":289,"column":12},"end":{"line":289,"column":18},"skip":true},"67":{"start":{"line":291,"column":8},"end":{"line":293,"column":54},"skip":true},"68":{"start":{"line":296,"column":8},"end":{"line":301,"column":37},"skip":true},"69":{"start":{"line":303,"column":8},"end":{"line":303,"column":82},"skip":true},"70":{"start":{"line":306,"column":8},"end":{"line":308,"column":9},"skip":true},"71":{"start":{"line":307,"column":12},"end":{"line":307,"column":82},"skip":true},"72":{"start":{"line":310,"column":8},"end":{"line":312,"column":9},"skip":true},"73":{"start":{"line":311,"column":12},"end":{"line":311,"column":18},"skip":true},"74":{"start":{"line":313,"column":8},"end":{"line":313,"column":54},"skip":true},"75":{"start":{"line":314,"column":8},"end":{"line":314,"column":69},"skip":true},"76":{"start":{"line":315,"column":8},"end":{"line":323,"column":36},"skip":true},"77":{"start":{"line":316,"column":12},"end":{"line":316,"column":61},"skip":true},"78":{"start":{"line":317,"column":12},"end":{"line":320,"column":13},"skip":true},"79":{"start":{"line":318,"column":16},"end":{"line":318,"column":75},"skip":true},"80":{"start":{"line":319,"column":16},"end":{"line":319,"column":23},"skip":true},"81":{"start":{"line":321,"column":12},"end":{"line":321,"column":38},"skip":true},"82":{"start":{"line":322,"column":12},"end":{"line":322,"column":27},"skip":true},"83":{"start":{"line":324,"column":8},"end":{"line":324,"column":14},"skip":true}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":23},"end":{"line":39,"column":62}},{"start":{"line":40,"column":20},"end":{"line":40,"column":70}},{"start":{"line":41,"column":20},"end":{"line":41,"column":71}},{"start":{"line":42,"column":20},"end":{"line":42,"column":29}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":23},"end":{"line":44,"column":37}},{"start":{"line":45,"column":20},"end":{"line":45,"column":61}},{"start":{"line":46,"column":20},"end":{"line":46,"column":70}},{"start":{"line":47,"column":20},"end":{"line":47,"column":26}}]},"3":{"line":51,"type":"cond-expr","locations":[{"start":{"line":52,"column":14},"end":{"line":52,"column":20}},{"start":{"line":53,"column":14},"end":{"line":53,"column":20}}]},"4":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":44}},{"start":{"line":55,"column":49},"end":{"line":57,"column":43}}]},"5":{"line":55,"type":"cond-expr","locations":[{"start":{"line":56,"column":14},"end":{"line":56,"column":61}},{"start":{"line":57,"column":14},"end":{"line":57,"column":43}}]},"6":{"line":61,"type":"switch","locations":[{"start":{"line":68,"column":4},"end":{"line":150,"column":14},"skip":true},{"start":{"line":156,"column":4},"end":{"line":324,"column":14},"skip":true}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true},{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true}]},"8":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":22},"skip":true},{"start":{"line":70,"column":27},"end":{"line":70,"column":32},"skip":true},{"start":{"line":71,"column":20},"end":{"line":71,"column":39},"skip":true},{"start":{"line":72,"column":20},"end":{"line":72,"column":49},"skip":true},{"start":{"line":73,"column":20},"end":{"line":73,"column":58},"skip":true},{"start":{"line":74,"column":20},"end":{"line":74,"column":69},"skip":true}]},"9":{"line":79,"type":"switch","locations":[{"start":{"line":80,"column":20},"end":{"line":80,"column":33},"skip":true},{"start":{"line":81,"column":20},"end":{"line":83,"column":30},"skip":true},{"start":{"line":84,"column":20},"end":{"line":85,"column":49},"skip":true}]},"10":{"line":89,"type":"switch","locations":[{"start":{"line":90,"column":12},"end":{"line":103,"column":22},"skip":true},{"start":{"line":105,"column":12},"end":{"line":106,"column":22},"skip":true}]},"11":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":25},"skip":true},{"start":{"line":89,"column":29},"end":{"line":89,"column":48},"skip":true},{"start":{"line":89,"column":52},"end":{"line":89,"column":74},"skip":true}]},"12":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true},{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true}]},"13":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true},{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true}]},"14":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":61},"skip":true},{"start":{"line":108,"column":66},"end":{"line":108,"column":72},"skip":true},{"start":{"line":108,"column":77},"end":{"line":108,"column":82},"skip":true},{"start":{"line":109,"column":20},"end":{"line":109,"column":39},"skip":true},{"start":{"line":110,"column":20},"end":{"line":110,"column":49},"skip":true},{"start":{"line":111,"column":20},"end":{"line":111,"column":58},"skip":true},{"start":{"line":112,"column":20},"end":{"line":112,"column":68},"skip":true}]},"15":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true},{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true}]},"16":{"line":134,"type":"cond-expr","locations":[{"start":{"line":135,"column":26},"end":{"line":135,"column":29},"skip":true},{"start":{"line":136,"column":26},"end":{"line":136,"column":54},"skip":true}]},"17":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":27},"end":{"line":164,"column":43},"skip":true},{"start":{"line":164,"column":47},"end":{"line":164,"column":49},"skip":true}]},"18":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true},{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true}]},"19":{"line":275,"type":"switch","locations":[{"start":{"line":276,"column":20},"end":{"line":277,"column":64},"skip":true},{"start":{"line":278,"column":20},"end":{"line":279,"column":40},"skip":true},{"start":{"line":280,"column":20},"end":{"line":281,"column":40},"skip":true},{"start":{"line":282,"column":20},"end":{"line":283,"column":39},"skip":true}]},"20":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true},{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true}]},"21":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":12},"end":{"line":288,"column":40},"skip":true},{"start":{"line":288,"column":44},"end":{"line":288,"column":67},"skip":true}]},"22":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":12},"end":{"line":292,"column":50},"skip":true},{"start":{"line":293,"column":12},"end":{"line":293,"column":53},"skip":true}]},"23":{"line":297,"type":"binary-expr","locations":[{"start":{"line":297,"column":12},"end":{"line":297,"column":75},"skip":true},{"start":{"line":298,"column":12},"end":{"line":301,"column":36},"skip":true}]},"24":{"line":303,"type":"binary-expr","locations":[{"start":{"line":303,"column":43},"end":{"line":303,"column":75},"skip":true},{"start":{"line":303,"column":79},"end":{"line":303,"column":81},"skip":true}]},"25":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true},{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true}]},"26":{"line":310,"type":"if","locations":[{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true},{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true}]},"27":{"line":313,"type":"binary-expr","locations":[{"start":{"line":313,"column":27},"end":{"line":313,"column":43},"skip":true},{"start":{"line":313,"column":47},"end":{"line":313,"column":53},"skip":true}]},"28":{"line":317,"type":"if","locations":[{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true},{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true}]}},"code":["/*","example.js","","quickstart example","","instruction","    1. save this script as example.js","    2. run the shell command:","        $ npm install npmtest-simple-statistics && PORT=8081 node example.js","    3. play with the browser-demo on http://127.0.0.1:8081","*/","","","","/* istanbul instrument in package npmtest_simple_statistics */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - init-before","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || (local.modeJs === 'browser'","            ? local.global.utility2_npmtest_simple_statistics","            : global.utility2_moduleExports);","        // export local","        local.global.local = local;","    }());","    switch (local.modeJs) {","","","","    // init-after","    // run browser js-env code - init-after","    /* istanbul ignore next */","    case 'browser':","        local.testRunBrowser = function (event) {","            if (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('onreset'))) {","                // reset output","                Array.from(","                    document.querySelectorAll('body > .resettable')","                ).forEach(function (element) {","                    switch (element.tagName) {","                    case 'INPUT':","                    case 'TEXTAREA':","                        element.value = '';","                        break;","                    default:","                        element.textContent = '';","                    }","                });","            }","            switch (event && event.currentTarget && event.currentTarget.id) {","            case 'testRunButton1':","                // show tests","                if (document.querySelector('#testReportDiv1').style.display === 'none') {","                    document.querySelector('#testReportDiv1').style.display = 'block';","                    document.querySelector('#testRunButton1').textContent =","                        'hide internal test';","                    local.modeTest = true;","                    local.testRunDefault(local);","                // hide tests","                } else {","                    document.querySelector('#testReportDiv1').style.display = 'none';","                    document.querySelector('#testRunButton1').textContent = 'run internal test';","                }","                break;","            // custom-case","            default:","                break;","            }","            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('oneval')))) {","                // try to eval input-code","                try {","                    /*jslint evil: true*/","                    eval(document.querySelector('#inputTextareaEval1').value);","                } catch (errorCaught) {","                    console.error(errorCaught);","                }","            }","        };","        // log stderr and stdout to #outputTextareaStdout1","        ['error', 'log'].forEach(function (key) {","            console[key + '_original'] = console[key];","            console[key] = function () {","                var element;","                console[key + '_original'].apply(console, arguments);","                element = document.querySelector('#outputTextareaStdout1');","                if (!element) {","                    return;","                }","                // append text to #outputTextareaStdout1","                element.value += Array.from(arguments).map(function (arg) {","                    return typeof arg === 'string'","                        ? arg","                        : JSON.stringify(arg, null, 4);","                }).join(' ') + '\\n';","                // scroll textarea to bottom","                element.scrollTop = element.scrollHeight;","            };","        });","        // init event-handling","        ['change', 'click', 'keyup'].forEach(function (event) {","            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {","                element.addEventListener(event, local.testRunBrowser);","            });","        });","        // run tests","        local.testRunBrowser();","        break;","","","","    // run node js-env code - init-after","    /* istanbul ignore next */","    case 'node':","        // export local","        module.exports = local;","        // require modules","        local.fs = require('fs');","        local.http = require('http');","        local.url = require('url');","        // init assets","        local.assetsDict = local.assetsDict || {};","        /* jslint-ignore-begin */","        local.assetsDict['/assets.index.template.html'] = '\\","<!doctype html>\\n\\","<html lang=\"en\">\\n\\","<head>\\n\\","<meta charset=\"UTF-8\">\\n\\","<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\","<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\","<style>\\n\\","/*csslint\\n\\","    box-sizing: false,\\n\\","    universal-selector: false\\n\\","*/\\n\\","* {\\n\\","    box-sizing: border-box;\\n\\","}\\n\\","body {\\n\\","    background: #dde;\\n\\","    font-family: Arial, Helvetica, sans-serif;\\n\\","    margin: 2rem;\\n\\","}\\n\\","body > * {\\n\\","    margin-bottom: 1rem;\\n\\","}\\n\\",".utility2FooterDiv {\\n\\","    margin-top: 20px;\\n\\","    text-align: center;\\n\\","}\\n\\","</style>\\n\\","<style>\\n\\","/*csslint\\n\\","*/\\n\\","textarea {\\n\\","    font-family: monospace;\\n\\","    height: 10rem;\\n\\","    width: 100%;\\n\\","}\\n\\","textarea[readonly] {\\n\\","    background: #ddd;\\n\\","}\\n\\","</style>\\n\\","</head>\\n\\","<body>\\n\\","<!-- utility2-comment\\n\\","<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\","utility2-comment -->\\n\\","<h1>\\n\\","<!-- utility2-comment\\n\\","    <a\\n\\","        {{#if env.npm_package_homepage}}\\n\\","        href=\"{{env.npm_package_homepage}}\"\\n\\","        {{/if env.npm_package_homepage}}\\n\\","        target=\"_blank\"\\n\\","    >\\n\\","utility2-comment -->\\n\\","        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\","<!-- utility2-comment\\n\\","    </a>\\n\\","utility2-comment -->\\n\\","</h1>\\n\\","<h3>{{env.npm_package_description}}</h3>\\n\\","<!-- utility2-comment\\n\\","<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\","<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\","<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\","utility2-comment -->\\n\\","\\n\\","\\n\\","\\n\\","<label>stderr and stdout</label>\\n\\","<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\","<!-- utility2-comment\\n\\","{{#if isRollup}}\\n\\","<script src=\"assets.app.js\"></script>\\n\\","{{#unless isRollup}}\\n\\","utility2-comment -->\\n\\","<script src=\"assets.utility2.rollup.js\"></script>\\n\\","<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\","<script src=\"assets.npmtest_simple_statistics.rollup.js\"></script>\\n\\","<script src=\"assets.example.js\"></script>\\n\\","<script src=\"assets.test.js\"></script>\\n\\","<!-- utility2-comment\\n\\","{{/if isRollup}}\\n\\","utility2-comment -->\\n\\","<div class=\"utility2FooterDiv\">\\n\\","    [ this app was created with\\n\\","    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\","    ]\\n\\","</div>\\n\\","</body>\\n\\","</html>\\n\\","';","        /* jslint-ignore-end */","        if (local.templateRender) {","            local.assetsDict['/'] = local.templateRender(","                local.assetsDict['/assets.index.template.html'],","                {","                    env: local.objectSetDefault(local.env, {","                        npm_package_description: 'the greatest app in the world!',","                        npm_package_name: 'my-app',","                        npm_package_nameAlias: 'my_app',","                        npm_package_version: '0.0.1'","                    })","                }","            );","        } else {","            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']","                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {","                    // jslint-hack","                    String(match0);","                    switch (match1) {","                    case 'npm_package_description':","                        return 'the greatest app in the world!';","                    case 'npm_package_name':","                        return 'my-app';","                    case 'npm_package_nameAlias':","                        return 'my_app';","                    case 'npm_package_version':","                        return '0.0.1';","                    }","                });","        }","        // run the cli","        if (local.global.utility2_rollup || module !== require.main) {","            break;","        }","        local.assetsDict['/assets.example.js'] =","            local.assetsDict['/assets.example.js'] ||","            local.fs.readFileSync(__filename, 'utf8');","        // bug-workaround - long $npm_package_buildCustomOrg","        /* jslint-ignore-begin */","        local.assetsDict['/assets.npmtest_simple_statistics.rollup.js'] =","            local.assetsDict['/assets.npmtest_simple_statistics.rollup.js'] ||","            local.fs.readFileSync(","                local.npmtest_simple_statistics.__dirname + '/lib.npmtest_simple_statistics.js',","                'utf8'","            ).replace((/^#!/), '//');","        /* jslint-ignore-end */","        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';","        // if $npm_config_timeout_exit exists,","        // then exit this process after $npm_config_timeout_exit ms","        if (Number(process.env.npm_config_timeout_exit)) {","            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));","        }","        // start server","        if (local.global.utility2_serverHttp1) {","            break;","        }","        process.env.PORT = process.env.PORT || '8081';","        console.error('server starting on port ' + process.env.PORT);","        local.http.createServer(function (request, response) {","            request.urlParsed = local.url.parse(request.url);","            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {","                response.end(local.assetsDict[request.urlParsed.pathname]);","                return;","            }","            response.statusCode = 404;","            response.end();","        }).listen(process.env.PORT);","        break;","    }","}());",""],"l":{"26":2,"28":2,"33":2,"35":2,"37":2,"38":2,"39":2,"44":1,"51":2,"55":2,"59":2,"61":2,"69":1,"70":2,"76":2,"79":2,"82":2,"83":2,"85":1,"89":2,"92":1,"93":1,"94":1,"96":1,"97":1,"100":1,"101":1,"103":1,"106":1,"108":2,"114":1,"116":1,"118":1,"123":1,"124":2,"125":2,"126":3,"127":3,"128":3,"129":3,"130":1,"133":3,"134":3,"139":3,"143":1,"144":3,"145":1,"149":1,"150":1,"158":1,"160":1,"161":1,"162":1,"164":1,"166":1,"258":1,"259":1,"271":1,"274":6,"275":6,"277":1,"279":2,"281":1,"283":2,"288":1,"289":1,"291":1,"296":1,"303":1,"306":1,"307":1,"310":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"321":1,"322":1,"324":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":29}},"2":{"start":{"line":11,"column":0},"end":{"line":11,"column":57}},"3":{"start":{"line":12,"column":0},"end":{"line":12,"column":66}},"4":{"start":{"line":13,"column":0},"end":{"line":13,"column":59}},"5":{"start":{"line":14,"column":0},"end":{"line":14,"column":41}},"6":{"start":{"line":15,"column":0},"end":{"line":15,"column":32}},"7":{"start":{"line":16,"column":0},"end":{"line":16,"column":41}},"8":{"start":{"line":17,"column":0},"end":{"line":17,"column":45}},"9":{"start":{"line":18,"column":0},"end":{"line":18,"column":30}},"10":{"start":{"line":19,"column":0},"end":{"line":19,"column":30}},"11":{"start":{"line":20,"column":0},"end":{"line":20,"column":43}},"12":{"start":{"line":21,"column":0},"end":{"line":21,"column":43}},"13":{"start":{"line":22,"column":0},"end":{"line":22,"column":30}},"14":{"start":{"line":23,"column":0},"end":{"line":23,"column":43}},"15":{"start":{"line":24,"column":0},"end":{"line":24,"column":38}},"16":{"start":{"line":25,"column":0},"end":{"line":25,"column":40}},"17":{"start":{"line":26,"column":0},"end":{"line":26,"column":53}},"18":{"start":{"line":27,"column":0},"end":{"line":27,"column":70}},"19":{"start":{"line":28,"column":0},"end":{"line":28,"column":81}},"20":{"start":{"line":29,"column":0},"end":{"line":29,"column":34}},"21":{"start":{"line":30,"column":0},"end":{"line":30,"column":68}},"22":{"start":{"line":31,"column":0},"end":{"line":31,"column":38}},"23":{"start":{"line":32,"column":0},"end":{"line":32,"column":54}},"24":{"start":{"line":33,"column":0},"end":{"line":33,"column":36}},"25":{"start":{"line":34,"column":0},"end":{"line":34,"column":38}},"26":{"start":{"line":35,"column":0},"end":{"line":35,"column":60}},"27":{"start":{"line":36,"column":0},"end":{"line":36,"column":69}},"28":{"start":{"line":37,"column":0},"end":{"line":37,"column":64}},"29":{"start":{"line":40,"column":0},"end":{"line":40,"column":57}},"30":{"start":{"line":41,"column":0},"end":{"line":41,"column":59}},"31":{"start":{"line":42,"column":0},"end":{"line":42,"column":53}},"32":{"start":{"line":43,"column":0},"end":{"line":43,"column":72}},"33":{"start":{"line":44,"column":0},"end":{"line":44,"column":53}},"34":{"start":{"line":47,"column":0},"end":{"line":47,"column":57}},"35":{"start":{"line":48,"column":0},"end":{"line":48,"column":48}},"36":{"start":{"line":49,"column":0},"end":{"line":49,"column":71}},"37":{"start":{"line":52,"column":0},"end":{"line":52,"column":44}},"38":{"start":{"line":53,"column":0},"end":{"line":53,"column":49}},"39":{"start":{"line":54,"column":0},"end":{"line":54,"column":57}},"40":{"start":{"line":55,"column":0},"end":{"line":55,"column":51}},"41":{"start":{"line":56,"column":0},"end":{"line":56,"column":49}},"42":{"start":{"line":57,"column":0},"end":{"line":57,"column":45}},"43":{"start":{"line":58,"column":0},"end":{"line":58,"column":36}},"44":{"start":{"line":59,"column":0},"end":{"line":59,"column":49}},"45":{"start":{"line":60,"column":0},"end":{"line":60,"column":58}},"46":{"start":{"line":62,"column":0},"end":{"line":62,"column":63}},"47":{"start":{"line":63,"column":0},"end":{"line":63,"column":40}},"48":{"start":{"line":64,"column":0},"end":{"line":64,"column":35}},"49":{"start":{"line":65,"column":0},"end":{"line":65,"column":55}},"50":{"start":{"line":69,"column":0},"end":{"line":69,"column":51}},"51":{"start":{"line":70,"column":0},"end":{"line":70,"column":44}},"52":{"start":{"line":73,"column":0},"end":{"line":73,"column":38}},"53":{"start":{"line":74,"column":0},"end":{"line":74,"column":42}},"54":{"start":{"line":75,"column":0},"end":{"line":75,"column":67}},"55":{"start":{"line":76,"column":0},"end":{"line":76,"column":65}},"56":{"start":{"line":77,"column":0},"end":{"line":77,"column":63}},"57":{"start":{"line":78,"column":0},"end":{"line":78,"column":74}},"58":{"start":{"line":81,"column":0},"end":{"line":81,"column":37}},"59":{"start":{"line":82,"column":0},"end":{"line":82,"column":87}},"60":{"start":{"line":83,"column":0},"end":{"line":83,"column":64}},"61":{"start":{"line":84,"column":0},"end":{"line":84,"column":60}},"62":{"start":{"line":85,"column":0},"end":{"line":85,"column":66}},"63":{"start":{"line":86,"column":0},"end":{"line":86,"column":36}},"64":{"start":{"line":87,"column":0},"end":{"line":87,"column":34}},"65":{"start":{"line":90,"column":0},"end":{"line":90,"column":36}}},"branchMap":{},"code":["/* @flow */","'use strict';","","// # simple-statistics","//","// A simple, literate statistics system.","","var ss = module.exports = {};","","// Linear Regression","ss.linearRegression = require('./src/linear_regression');","ss.linearRegressionLine = require('./src/linear_regression_line');","ss.standardDeviation = require('./src/standard_deviation');","ss.rSquared = require('./src/r_squared');","ss.mode = require('./src/mode');","ss.modeFast = require('./src/mode_fast');","ss.modeSorted = require('./src/mode_sorted');","ss.min = require('./src/min');","ss.max = require('./src/max');","ss.minSorted = require('./src/min_sorted');","ss.maxSorted = require('./src/max_sorted');","ss.sum = require('./src/sum');","ss.sumSimple = require('./src/sum_simple');","ss.product = require('./src/product');","ss.quantile = require('./src/quantile');","ss.quantileSorted = require('./src/quantile_sorted');","ss.iqr = ss.interquartileRange = require('./src/interquartile_range');","ss.medianAbsoluteDeviation = ss.mad = require('./src/median_absolute_deviation');","ss.chunk = require('./src/chunk');","ss.sampleWithReplacement = require('./src/sample_with_replacement');","ss.shuffle = require('./src/shuffle');","ss.shuffleInPlace = require('./src/shuffle_in_place');","ss.sample = require('./src/sample');","ss.ckmeans = require('./src/ckmeans');","ss.uniqueCountSorted = require('./src/unique_count_sorted');","ss.sumNthPowerDeviations = require('./src/sum_nth_power_deviations');","ss.equalIntervalBreaks = require('./src/equal_interval_breaks');","","// sample statistics","ss.sampleCovariance = require('./src/sample_covariance');","ss.sampleCorrelation = require('./src/sample_correlation');","ss.sampleVariance = require('./src/sample_variance');","ss.sampleStandardDeviation = require('./src/sample_standard_deviation');","ss.sampleSkewness = require('./src/sample_skewness');","","// combinatorics","ss.permutationsHeap = require('./src/permutations_heap');","ss.combinations = require('./src/combinations');","ss.combinationsReplacement = require('./src/combinations_replacement');","","// measures of centrality","ss.addToMean = require('./src/add_to_mean');","ss.combineMeans = require('./src/combine_means');","ss.combineVariances = require('./src/combine_variances');","ss.geometricMean = require('./src/geometric_mean');","ss.harmonicMean = require('./src/harmonic_mean');","ss.mean = ss.average = require('./src/mean');","ss.median = require('./src/median');","ss.medianSorted = require('./src/median_sorted');","ss.subtractFromMean = require('./src/subtract_from_mean');","","ss.rootMeanSquare = ss.rms = require('./src/root_mean_square');","ss.variance = require('./src/variance');","ss.tTest = require('./src/t_test');","ss.tTestTwoSample = require('./src/t_test_two_sample');","// ss.jenks = require('./src/jenks');","","// Classifiers","ss.bayesian = require('./src/bayesian_classifier');","ss.perceptron = require('./src/perceptron');","","// Distribution-related methods","ss.epsilon = require('./src/epsilon'); // We make ε available to the test suite.","ss.factorial = require('./src/factorial');","ss.bernoulliDistribution = require('./src/bernoulli_distribution');","ss.binomialDistribution = require('./src/binomial_distribution');","ss.poissonDistribution = require('./src/poisson_distribution');","ss.chiSquaredGoodnessOfFit = require('./src/chi_squared_goodness_of_fit');","","// Normal distribution","ss.zScore = require('./src/z_score');","ss.cumulativeStdNormalProbability = require('./src/cumulative_std_normal_probability');","ss.standardNormalTable = require('./src/standard_normal_table');","ss.errorFunction = ss.erf = require('./src/error_function');","ss.inverseErrorFunction = require('./src/inverse_error_function');","ss.probit = require('./src/probit');","ss.mixin = require('./src/mixin');","","// Root-finding methods","ss.bisect = require('./src/bisect');",""],"l":{"8":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"40":1,"41":1,"42":1,"43":1,"44":1,"47":1,"48":1,"49":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"62":1,"63":1,"64":1,"65":1,"69":1,"70":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"90":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/linear_regression.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/linear_regression.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"linearRegression","line":16,"loc":{"start":{"line":16,"column":0},"end":{"line":16,"column":90}}}},"statementMap":{"1":{"start":{"line":16,"column":0},"end":{"line":69,"column":1}},"2":{"start":{"line":18,"column":4},"end":{"line":18,"column":13}},"3":{"start":{"line":22,"column":4},"end":{"line":22,"column":33}},"4":{"start":{"line":26,"column":4},"end":{"line":62,"column":5}},"5":{"start":{"line":27,"column":8},"end":{"line":27,"column":14}},"6":{"start":{"line":28,"column":8},"end":{"line":28,"column":23}},"7":{"start":{"line":32,"column":8},"end":{"line":33,"column":33}},"8":{"start":{"line":37,"column":8},"end":{"line":37,"column":24}},"9":{"start":{"line":44,"column":8},"end":{"line":54,"column":9}},"10":{"start":{"line":45,"column":12},"end":{"line":45,"column":28}},"11":{"start":{"line":46,"column":12},"end":{"line":46,"column":25}},"12":{"start":{"line":47,"column":12},"end":{"line":47,"column":25}},"13":{"start":{"line":49,"column":12},"end":{"line":49,"column":22}},"14":{"start":{"line":50,"column":12},"end":{"line":50,"column":22}},"15":{"start":{"line":52,"column":12},"end":{"line":52,"column":27}},"16":{"start":{"line":53,"column":12},"end":{"line":53,"column":27}},"17":{"start":{"line":57,"column":8},"end":{"line":58,"column":51}},"18":{"start":{"line":61,"column":8},"end":{"line":61,"column":60}},"19":{"start":{"line":65,"column":4},"end":{"line":68,"column":6}},"20":{"start":{"line":72,"column":0},"end":{"line":72,"column":34}}},"branchMap":{"1":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":4},"end":{"line":26,"column":4}},{"start":{"line":26,"column":4},"end":{"line":26,"column":4}}]}},"code":["'use strict';","/* @flow */","","/**"," * [Simple linear regression](http://en.wikipedia.org/wiki/Simple_linear_regression)"," * is a simple way to find a fitted line"," * between a set of coordinates. This algorithm finds the slope and y-intercept of a regression line"," * using the least sum of squares."," *"," * @param {Array<Array<number>>} data an array of two-element of arrays,"," * like `[[0, 1], [2, 3]]`"," * @returns {Object} object containing slope and intersect of regression line"," * @example"," * linearRegression([[0, 0], [1, 1]]); // => { m: 1, b: 0 }"," */","function linearRegression(data/*: Array<Array<number>> */)/*: { m: number, b: number } */ {","","    var m, b;","","    // Store data length in a local variable to reduce","    // repeated object property lookups","    var dataLength = data.length;","","    //if there's only one point, arbitrarily choose a slope of 0","    //and a y-intercept of whatever the y of the initial point is","    if (dataLength === 1) {","        m = 0;","        b = data[0][1];","    } else {","        // Initialize our sums and scope the `m` and `b`","        // variables that define the line.","        var sumX = 0, sumY = 0,","            sumXX = 0, sumXY = 0;","","        // Use local variables to grab point values","        // with minimal object property lookups","        var point, x, y;","","        // Gather the sum of all x values, the sum of all","        // y values, and the sum of x^2 and (x*y) for each","        // value.","        //","        // In math notation, these would be SS_x, SS_y, SS_xx, and SS_xy","        for (var i = 0; i < dataLength; i++) {","            point = data[i];","            x = point[0];","            y = point[1];","","            sumX += x;","            sumY += y;","","            sumXX += x * x;","            sumXY += x * y;","        }","","        // `m` is the slope of the regression line","        m = ((dataLength * sumXY) - (sumX * sumY)) /","            ((dataLength * sumXX) - (sumX * sumX));","","        // `b` is the y-intercept of the line.","        b = (sumY / dataLength) - ((m * sumX) / dataLength);","    }","","    // Return both values as an object.","    return {","        m: m,","        b: b","    };","}","","","module.exports = linearRegression;",""],"l":{"16":1,"18":0,"22":0,"26":0,"27":0,"28":0,"32":0,"37":0,"44":0,"45":0,"46":0,"47":0,"49":0,"50":0,"52":0,"53":0,"57":0,"61":0,"65":0,"72":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/linear_regression_line.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/linear_regression_line.js","s":{"1":1,"2":0,"3":0,"4":1},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"linearRegressionLine","line":21,"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":79}}},"2":{"name":"(anonymous_2)","line":25,"loc":{"start":{"line":25,"column":11},"end":{"line":25,"column":23}}}},"statementMap":{"1":{"start":{"line":21,"column":0},"end":{"line":28,"column":1}},"2":{"start":{"line":25,"column":4},"end":{"line":27,"column":6}},"3":{"start":{"line":26,"column":8},"end":{"line":26,"column":33}},"4":{"start":{"line":30,"column":0},"end":{"line":30,"column":38}}},"branchMap":{},"code":["'use strict';","/* @flow */","","/**"," * Given the output of `linearRegression`: an object"," * with `m` and `b` values indicating slope and intercept,"," * respectively, generate a line function that translates"," * x values into y values."," *"," * @param {Object} mb object with `m` and `b` members, representing"," * slope and intersect of desired line"," * @returns {Function} method that computes y-value at any given"," * x-value on the line."," * @example"," * var l = linearRegressionLine(linearRegression([[0, 0], [1, 1]]));"," * l(0) // = 0"," * l(2) // = 2"," * linearRegressionLine({ b: 0, m: 1 })(1); // => 1"," * linearRegressionLine({ b: 1, m: 1 })(1); // => 2"," */","function linearRegressionLine(mb/*: { b: number, m: number }*/)/*: Function */ {","    // Return a function that computes a `y` value for each","    // x value it is given, based on the values of `b` and `a`","    // that we just computed.","    return function(x) {","        return mb.b + (mb.m * x);","    };","}","","module.exports = linearRegressionLine;",""],"l":{"21":1,"25":0,"26":0,"30":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/standard_deviation.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/standard_deviation.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"standardDeviation","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":62}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":37}},"2":{"start":{"line":22,"column":0},"end":{"line":28,"column":1}},"3":{"start":{"line":23,"column":4},"end":{"line":25,"column":5}},"4":{"start":{"line":24,"column":8},"end":{"line":24,"column":17}},"5":{"start":{"line":26,"column":4},"end":{"line":26,"column":24}},"6":{"start":{"line":27,"column":4},"end":{"line":27,"column":24}},"7":{"start":{"line":30,"column":0},"end":{"line":30,"column":35}}},"branchMap":{"1":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":4},"end":{"line":23,"column":4}},{"start":{"line":23,"column":4},"end":{"line":23,"column":4}}]}},"code":["'use strict';","/* @flow */","","var variance = require('./variance');","","/**"," * The [standard deviation](http://en.wikipedia.org/wiki/Standard_deviation)"," * is the square root of the variance. This is also known as the population"," * standard deviation. It's useful for measuring the amount"," * of variation or dispersion in a set of values."," *"," * Standard deviation is only appropriate for full-population knowledge: for"," * samples of a population, {@link sampleStandardDeviation} is"," * more appropriate."," *"," * @param {Array<number>} x input"," * @returns {number} standard deviation"," * @example"," * variance([2, 4, 4, 4, 5, 5, 7, 9]); // => 4"," * standardDeviation([2, 4, 4, 4, 5, 5, 7, 9]); // => 2"," */","function standardDeviation(x /*: Array<number> */)/*:number*/ {","    if (x.length === 1) {","        return 0;","    }","    var v = variance(x);","    return Math.sqrt(v);","}","","module.exports = standardDeviation;",""],"l":{"4":1,"22":1,"23":0,"24":0,"26":0,"27":0,"30":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/variance.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/variance.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"variance","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":52}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":66}},"2":{"start":{"line":20,"column":0},"end":{"line":29,"column":1}},"3":{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},"4":{"start":{"line":23,"column":8},"end":{"line":23,"column":69}},"5":{"start":{"line":28,"column":4},"end":{"line":28,"column":50}},"6":{"start":{"line":31,"column":0},"end":{"line":31,"column":26}}},"branchMap":{"1":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":22,"column":4}},{"start":{"line":22,"column":4},"end":{"line":22,"column":4}}]}},"code":["'use strict';","/* @flow */","","var sumNthPowerDeviations = require('./sum_nth_power_deviations');","","/**"," * The [variance](http://en.wikipedia.org/wiki/Variance)"," * is the sum of squared deviations from the mean."," *"," * This is an implementation of variance, not sample variance:"," * see the `sampleVariance` method if you want a sample measure."," *"," * @param {Array<number>} x a population of one or more data points"," * @returns {number} variance: a value greater than or equal to zero."," * zero indicates that all values are identical."," * @throws {Error} if x's length is 0"," * @example"," * variance([1, 2, 3, 4, 5, 6]); // => 2.9166666666666665"," */","function variance(x/*: Array<number> */)/*:number*/ {","    // The variance of no numbers is null","    if (x.length === 0) {","        throw new Error('variance requires at least one data point');","    }","","    // Find the mean of squared deviations between the","    // mean value and each value.","    return sumNthPowerDeviations(x, 2) / x.length;","}","","module.exports = variance;",""],"l":{"4":1,"20":1,"22":0,"23":0,"28":0,"31":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/sum_nth_power_deviations.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/sum_nth_power_deviations.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"sumNthPowerDeviations","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":81}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":29}},"2":{"start":{"line":20,"column":0},"end":{"line":29,"column":1}},"3":{"start":{"line":21,"column":4},"end":{"line":22,"column":16}},"4":{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},"5":{"start":{"line":25,"column":8},"end":{"line":25,"column":45}},"6":{"start":{"line":28,"column":4},"end":{"line":28,"column":15}},"7":{"start":{"line":31,"column":0},"end":{"line":31,"column":39}}},"branchMap":{},"code":["'use strict';","/* @flow */","","var mean = require('./mean');","","/**"," * The sum of deviations to the Nth power."," * When n=2 it's the sum of squared deviations."," * When n=3 it's the sum of cubed deviations."," *"," * @param {Array<number>} x"," * @param {number} n power"," * @returns {number} sum of nth power deviations"," * @example"," * var input = [1, 2, 3];"," * // since the variance of a set is the mean squared"," * // deviations, we can calculate that with sumNthPowerDeviations:"," * var variance = sumNthPowerDeviations(input) / input.length;"," */","function sumNthPowerDeviations(x/*: Array<number> */, n/*: number */)/*:number*/ {","    var meanValue = mean(x),","        sum = 0;","","    for (var i = 0; i < x.length; i++) {","        sum += Math.pow(x[i] - meanValue, n);","    }","","    return sum;","}","","module.exports = sumNthPowerDeviations;",""],"l":{"4":1,"20":1,"21":0,"24":0,"25":0,"28":0,"31":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/mean.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/mean.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"mean","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":49}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":27}},"2":{"start":{"line":20,"column":0},"end":{"line":27,"column":1}},"3":{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},"4":{"start":{"line":23,"column":8},"end":{"line":23,"column":65}},"5":{"start":{"line":26,"column":4},"end":{"line":26,"column":29}},"6":{"start":{"line":29,"column":0},"end":{"line":29,"column":22}}},"branchMap":{"1":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":22,"column":4}},{"start":{"line":22,"column":4},"end":{"line":22,"column":4}}]}},"code":["'use strict';","/* @flow */","","var sum = require('./sum');","","/**"," * The mean, _also known as average_,"," * is the sum of all values over the number of values."," * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):"," * a method of finding a typical or central value of a set of numbers."," *"," * This runs on `O(n)`, linear time in respect to the array"," *"," * @param {Array<number>} x sample of one or more data points"," * @throws {Error} if the the length of x is less than one"," * @returns {number} mean"," * @example"," * mean([0, 10]); // => 5"," */","function mean(x /*: Array<number> */)/*:number*/ {","    // The mean of no numbers is null","    if (x.length === 0) {","        throw new Error('mean requires at least one data point');","    }","","    return sum(x) / x.length;","}","","module.exports = mean;",""],"l":{"4":1,"20":1,"22":0,"23":0,"26":0,"29":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/sum.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/sum.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"sum","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":49}}}},"statementMap":{"1":{"start":{"line":20,"column":0},"end":{"line":59,"column":1}},"2":{"start":{"line":24,"column":4},"end":{"line":24,"column":16}},"3":{"start":{"line":29,"column":4},"end":{"line":29,"column":30}},"4":{"start":{"line":32,"column":4},"end":{"line":32,"column":30}},"5":{"start":{"line":35,"column":4},"end":{"line":35,"column":16}},"6":{"start":{"line":37,"column":4},"end":{"line":56,"column":5}},"7":{"start":{"line":39,"column":8},"end":{"line":39,"column":57}},"8":{"start":{"line":44,"column":8},"end":{"line":44,"column":46}},"9":{"start":{"line":51,"column":8},"end":{"line":51,"column":66}},"10":{"start":{"line":55,"column":8},"end":{"line":55,"column":22}},"11":{"start":{"line":58,"column":4},"end":{"line":58,"column":15}},"12":{"start":{"line":61,"column":0},"end":{"line":61,"column":21}}},"branchMap":{},"code":["'use strict';","/* @flow */","","/**"," * Our default sum is the [Kahan summation algorithm](https://en.wikipedia.org/wiki/Kahan_summation_algorithm) is"," * a method for computing the sum of a list of numbers while correcting"," * for floating-point errors. Traditionally, sums are calculated as many"," * successive additions, each one with its own floating-point roundoff. These"," * losses in precision add up as the number of numbers increases. This alternative"," * algorithm is more accurate than the simple way of calculating sums by simple"," * addition."," *"," * This runs on `O(n)`, linear time in respect to the array"," *"," * @param {Array<number>} x input"," * @return {number} sum of all input numbers"," * @example"," * sum([1, 2, 3]); // => 6"," */","function sum(x/*: Array<number> */)/*: number */ {","","    // like the traditional sum algorithm, we keep a running","    // count of the current sum.","    var sum = 0;","","    // but we also keep three extra variables as bookkeeping:","    // most importantly, an error correction value. This will be a very","    // small number that is the opposite of the floating point precision loss.","    var errorCompensation = 0;","","    // this will be each number in the list corrected with the compensation value.","    var correctedCurrentValue;","","    // and this will be the next sum","    var nextSum;","","    for (var i = 0; i < x.length; i++) {","        // first correct the value that we're going to add to the sum","        correctedCurrentValue = x[i] - errorCompensation;","","        // compute the next sum. sum is likely a much larger number","        // than correctedCurrentValue, so we'll lose precision here,","        // and measure how much precision is lost in the next step","        nextSum = sum + correctedCurrentValue;","","        // we intentionally didn't assign sum immediately, but stored","        // it for now so we can figure out this: is (sum + nextValue) - nextValue","        // not equal to 0? ideally it would be, but in practice it won't:","        // it will be some very small number. that's what we record","        // as errorCompensation.","        errorCompensation = nextSum - sum - correctedCurrentValue;","","        // now that we've computed how much we'll correct for in the next","        // loop, start treating the nextSum as the current sum.","        sum = nextSum;","    }","","    return sum;","}","","module.exports = sum;",""],"l":{"20":1,"24":0,"29":0,"32":0,"35":0,"37":0,"39":0,"44":0,"51":0,"55":0,"58":0,"61":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/r_squared.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/r_squared.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"rSquared","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":85}}}},"statementMap":{"1":{"start":{"line":18,"column":0},"end":{"line":50,"column":1}},"2":{"start":{"line":19,"column":4},"end":{"line":19,"column":35}},"3":{"start":{"line":19,"column":24},"end":{"line":19,"column":33}},"4":{"start":{"line":24,"column":4},"end":{"line":24,"column":25}},"5":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"6":{"start":{"line":26,"column":8},"end":{"line":26,"column":23}},"7":{"start":{"line":28,"column":4},"end":{"line":28,"column":29}},"8":{"start":{"line":33,"column":4},"end":{"line":33,"column":25}},"9":{"start":{"line":34,"column":4},"end":{"line":36,"column":5}},"10":{"start":{"line":35,"column":8},"end":{"line":35,"column":55}},"11":{"start":{"line":41,"column":4},"end":{"line":41,"column":16}},"12":{"start":{"line":42,"column":4},"end":{"line":44,"column":5}},"13":{"start":{"line":43,"column":8},"end":{"line":43,"column":52}},"14":{"start":{"line":49,"column":4},"end":{"line":49,"column":34}},"15":{"start":{"line":52,"column":0},"end":{"line":52,"column":26}}},"branchMap":{"1":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":4}},{"start":{"line":19,"column":4},"end":{"line":19,"column":4}}]}},"code":["'use strict';","/* @flow */","","/**"," * The [R Squared](http://en.wikipedia.org/wiki/Coefficient_of_determination)"," * value of data compared with a function `f`"," * is the sum of the squared differences between the prediction"," * and the actual value."," *"," * @param {Array<Array<number>>} x input data: this should be doubly-nested"," * @param {Function} func function called on `[i][0]` values within the dataset"," * @returns {number} r-squared value"," * @example"," * var samples = [[0, 0], [1, 1]];"," * var regressionLine = linearRegressionLine(linearRegression(samples));"," * rSquared(samples, regressionLine); // = 1 this line is a perfect fit"," */","function rSquared(x /*: Array<Array<number>> */, func /*: Function */) /*: number */ {","    if (x.length < 2) { return 1; }","","    // Compute the average y value for the actual","    // data set in order to compute the","    // _total sum of squares_","    var sum = 0, average;","    for (var i = 0; i < x.length; i++) {","        sum += x[i][1];","    }","    average = sum / x.length;","","    // Compute the total sum of squares - the","    // squared difference between each point","    // and the average of all points.","    var sumOfSquares = 0;","    for (var j = 0; j < x.length; j++) {","        sumOfSquares += Math.pow(average - x[j][1], 2);","    }","","    // Finally estimate the error: the squared","    // difference between the estimate and the actual data","    // value at each point.","    var err = 0;","    for (var k = 0; k < x.length; k++) {","        err += Math.pow(x[k][1] - func(x[k][0]), 2);","    }","","    // As the error grows larger, its ratio to the","    // sum of squares increases and the r squared","    // value grows lower.","    return 1 - err / sumOfSquares;","}","","module.exports = rSquared;",""],"l":{"18":1,"19":0,"24":0,"25":0,"26":0,"28":0,"33":0,"34":0,"35":0,"41":0,"42":0,"43":0,"49":0,"52":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/mode.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/mode.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"mode","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":49}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":5,"column":42}},"2":{"start":{"line":23,"column":0},"end":{"line":28,"column":1}},"3":{"start":{"line":27,"column":4},"end":{"line":27,"column":38}},"4":{"start":{"line":30,"column":0},"end":{"line":30,"column":22}}},"branchMap":{},"code":["'use strict';","/* @flow */","","var numericSort = require('./numeric_sort'),","    modeSorted = require('./mode_sorted');","","/**"," * The [mode](http://bit.ly/W5K4Yt) is the number that appears in a list the highest number of times."," * There can be multiple modes in a list: in the event of a tie, this"," * algorithm will return the most recently seen mode."," *"," * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):"," * a method of finding a typical or central value of a set of numbers."," *"," * This runs on `O(nlog(n))` because it needs to sort the array internally"," * before running an `O(n)` search to find the mode."," *"," * @param {Array<number>} x input"," * @returns {number} mode"," * @example"," * mode([0, 0, 1]); // => 0"," */","function mode(x /*: Array<number> */)/*:number*/ {","    // Sorting the array lets us iterate through it below and be sure","    // that every time we see a new number it's new and we'll never","    // see the same number twice","    return modeSorted(numericSort(x));","}","","module.exports = mode;",""],"l":{"4":1,"23":1,"27":0,"30":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/numeric_sort.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/numeric_sort.js","s":{"1":1,"2":0,"3":0,"4":1},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"numericSort","line":21,"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":66}}},"2":{"name":"(anonymous_2)","line":26,"loc":{"start":{"line":26,"column":14},"end":{"line":26,"column":29}}}},"statementMap":{"1":{"start":{"line":21,"column":0},"end":{"line":29,"column":1}},"2":{"start":{"line":22,"column":4},"end":{"line":28,"column":11}},"3":{"start":{"line":27,"column":12},"end":{"line":27,"column":25}},"4":{"start":{"line":31,"column":0},"end":{"line":31,"column":29}}},"branchMap":{},"code":["'use strict';","/* @flow */","","/**"," * Sort an array of numbers by their numeric value, ensuring that the"," * array is not changed in place."," *"," * This is necessary because the default behavior of .sort"," * in JavaScript is to sort arrays as string values"," *"," *     [1, 10, 12, 102, 20].sort()"," *     // output"," *     [1, 10, 102, 12, 20]"," *"," * @param {Array<number>} x input array"," * @return {Array<number>} sorted array"," * @private"," * @example"," * numericSort([3, 2, 1]) // => [1, 2, 3]"," */","function numericSort(x /*: Array<number> */) /*: Array<number> */ {","    return x","        // ensure the array is not changed in-place","        .slice()","        // comparator function that treats input as numeric","        .sort(function(a, b) {","            return a - b;","        });","}","","module.exports = numericSort;",""],"l":{"21":1,"22":0,"27":0,"31":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/mode_sorted.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/mode_sorted.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"modeSorted","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":60}}}},"statementMap":{"1":{"start":{"line":20,"column":0},"end":{"line":62,"column":1}},"2":{"start":{"line":24,"column":4},"end":{"line":28,"column":5}},"3":{"start":{"line":25,"column":8},"end":{"line":25,"column":65}},"4":{"start":{"line":26,"column":11},"end":{"line":28,"column":5}},"5":{"start":{"line":27,"column":8},"end":{"line":27,"column":25}},"6":{"start":{"line":33,"column":4},"end":{"line":40,"column":21}},"7":{"start":{"line":46,"column":4},"end":{"line":60,"column":5}},"8":{"start":{"line":48,"column":8},"end":{"line":59,"column":30}},"9":{"start":{"line":51,"column":12},"end":{"line":54,"column":13}},"10":{"start":{"line":52,"column":16},"end":{"line":52,"column":35}},"11":{"start":{"line":53,"column":16},"end":{"line":53,"column":29}},"12":{"start":{"line":55,"column":12},"end":{"line":55,"column":25}},"13":{"start":{"line":56,"column":12},"end":{"line":56,"column":29}},"14":{"start":{"line":59,"column":17},"end":{"line":59,"column":28}},"15":{"start":{"line":61,"column":4},"end":{"line":61,"column":17}},"16":{"start":{"line":64,"column":0},"end":{"line":64,"column":28}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":24,"column":4}},{"start":{"line":24,"column":4},"end":{"line":24,"column":4}}]},"2":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":11},"end":{"line":26,"column":11}},{"start":{"line":26,"column":11},"end":{"line":26,"column":11}}]},"3":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":8},"end":{"line":48,"column":8}},{"start":{"line":48,"column":8},"end":{"line":48,"column":8}}]},"4":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":12},"end":{"line":51,"column":12}},{"start":{"line":51,"column":12},"end":{"line":51,"column":12}}]}},"code":["'use strict';","/* @flow */","","/**"," * The [mode](http://bit.ly/W5K4Yt) is the number that appears in a list the highest number of times."," * There can be multiple modes in a list: in the event of a tie, this"," * algorithm will return the most recently seen mode."," *"," * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):"," * a method of finding a typical or central value of a set of numbers."," *"," * This runs in `O(n)` because the input is sorted."," *"," * @param {Array<number>} sorted a sample of one or more data points"," * @returns {number} mode"," * @throws {Error} if sorted is empty"," * @example"," * modeSorted([0, 0, 1]); // => 0"," */","function modeSorted(sorted /*: Array<number> */)/*:number*/ {","","    // Handle edge cases:","    // The mode of an empty list is undefined","    if (sorted.length === 0) {","        throw new Error('mode requires at least one data point');","    } else if (sorted.length === 1) {","        return sorted[0];","    }","","    // This assumes it is dealing with an array of size > 1, since size","    // 0 and 1 are handled immediately. Hence it starts at index 1 in the","    // array.","    var last = sorted[0],","        // store the mode as we find new modes","        value = NaN,","        // store how many times we've seen the mode","        maxSeen = 0,","        // how many times the current candidate for the mode","        // has been seen","        seenThis = 1;","","    // end at sorted.length + 1 to fix the case in which the mode is","    // the highest number that occurs in the sequence. the last iteration","    // compares sorted[i], which is undefined, to the highest number","    // in the series","    for (var i = 1; i < sorted.length + 1; i++) {","        // we're seeing a new number pass by","        if (sorted[i] !== last) {","            // the last number is the new mode since we saw it more","            // often than the old one","            if (seenThis > maxSeen) {","                maxSeen = seenThis;","                value = last;","            }","            seenThis = 1;","            last = sorted[i];","        // if this isn't a new number, it's one more occurrence of","        // the potential mode","        } else { seenThis++; }","    }","    return value;","}","","module.exports = modeSorted;",""],"l":{"20":1,"24":0,"25":0,"26":0,"27":0,"33":0,"46":0,"48":0,"51":0,"52":0,"53":0,"55":0,"56":0,"59":0,"61":0,"64":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/mode_fast.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/mode_fast.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"modeFast","line":27,"loc":{"start":{"line":27,"column":0},"end":{"line":27,"column":55}}}},"statementMap":{"1":{"start":{"line":27,"column":0},"end":{"line":57,"column":1}},"2":{"start":{"line":32,"column":4},"end":{"line":32,"column":26}},"3":{"start":{"line":35,"column":4},"end":{"line":35,"column":13}},"4":{"start":{"line":36,"column":4},"end":{"line":36,"column":22}},"5":{"start":{"line":38,"column":4},"end":{"line":50,"column":5}},"6":{"start":{"line":39,"column":8},"end":{"line":39,"column":39}},"7":{"start":{"line":40,"column":8},"end":{"line":44,"column":9}},"8":{"start":{"line":41,"column":12},"end":{"line":41,"column":25}},"9":{"start":{"line":43,"column":12},"end":{"line":43,"column":23}},"10":{"start":{"line":45,"column":8},"end":{"line":48,"column":9}},"11":{"start":{"line":46,"column":12},"end":{"line":46,"column":24}},"12":{"start":{"line":47,"column":12},"end":{"line":47,"column":33}},"13":{"start":{"line":49,"column":8},"end":{"line":49,"column":34}},"14":{"start":{"line":52,"column":4},"end":{"line":54,"column":5}},"15":{"start":{"line":53,"column":8},"end":{"line":53,"column":64}},"16":{"start":{"line":56,"column":4},"end":{"line":56,"column":16}},"17":{"start":{"line":59,"column":0},"end":{"line":59,"column":26}}},"branchMap":{"1":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":8},"end":{"line":40,"column":8}},{"start":{"line":40,"column":8},"end":{"line":40,"column":8}}]},"2":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]},"3":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":4},"end":{"line":52,"column":4}},{"start":{"line":52,"column":4},"end":{"line":52,"column":4}}]}},"code":["'use strict';","/* @flow */","/* globals Map: false */","","/**"," * The [mode](http://bit.ly/W5K4Yt) is the number that appears in a list the highest number of times."," * There can be multiple modes in a list: in the event of a tie, this"," * algorithm will return the most recently seen mode."," *"," * modeFast uses a Map object to keep track of the mode, instead of the approach"," * used with `mode`, a sorted array. As a result, it is faster"," * than `mode` and supports any data type that can be compared with `==`."," * It also requires a"," * [JavaScript environment with support for Map](https://kangax.github.io/compat-table/es6/#test-Map),"," * and will throw an error if Map is not available."," *"," * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):"," * a method of finding a typical or central value of a set of numbers."," *"," * @param {Array<*>} x a sample of one or more data points"," * @returns {?*} mode"," * @throws {ReferenceError} if the JavaScript environment doesn't support Map"," * @throws {Error} if x is empty"," * @example"," * modeFast(['rabbits', 'rabbits', 'squirrels']); // => 'rabbits'"," */","function modeFast/*::<T>*/(x /*: Array<T> */)/*: ?T */ {","","    // This index will reflect the incidence of different values, indexing","    // them like","    // { value: count }","    var index = new Map();","","    // A running `mode` and the number of times it has been encountered.","    var mode;","    var modeCount = 0;","","    for (var i = 0; i < x.length; i++) {","        var newCount = index.get(x[i]);","        if (newCount === undefined) {","            newCount = 1;","        } else {","            newCount++;","        }","        if (newCount > modeCount) {","            mode = x[i];","            modeCount = newCount;","        }","        index.set(x[i], newCount);","    }","","    if (modeCount === 0) {","        throw new Error('mode requires at last one data point');","    }","","    return mode;","}","","module.exports = modeFast;",""],"l":{"27":1,"32":0,"35":0,"36":0,"38":0,"39":0,"40":0,"41":0,"43":0,"45":0,"46":0,"47":0,"49":0,"52":0,"53":0,"56":0,"59":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/min.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/min.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"min","line":13,"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":48}}}},"statementMap":{"1":{"start":{"line":13,"column":0},"end":{"line":26,"column":1}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":15,"column":4},"end":{"line":21,"column":5}},"4":{"start":{"line":18,"column":8},"end":{"line":20,"column":9}},"5":{"start":{"line":19,"column":12},"end":{"line":19,"column":25}},"6":{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},"7":{"start":{"line":23,"column":8},"end":{"line":23,"column":64}},"8":{"start":{"line":25,"column":4},"end":{"line":25,"column":17}},"9":{"start":{"line":28,"column":0},"end":{"line":28,"column":21}}},"branchMap":{"1":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":8},"end":{"line":18,"column":8}},{"start":{"line":18,"column":8},"end":{"line":18,"column":8}}]},"2":{"line":18,"type":"binary-expr","locations":[{"start":{"line":18,"column":12},"end":{"line":18,"column":31}},{"start":{"line":18,"column":35},"end":{"line":18,"column":47}}]},"3":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":22,"column":4}},{"start":{"line":22,"column":4},"end":{"line":22,"column":4}}]}},"code":["'use strict';","/* @flow */","","/**"," * The min is the lowest number in the array. This runs on `O(n)`, linear time in respect to the array"," *"," * @param {Array<number>} x sample of one or more data points"," * @throws {Error} if the the length of x is less than one"," * @returns {number} minimum value"," * @example"," * min([1, 5, -10, 100, 2]); // => -10"," */","function min(x /*: Array<number> */)/*:number*/ {","    var value;","    for (var i = 0; i < x.length; i++) {","        // On the first iteration of this loop, min is","        // undefined and is thus made the minimum element in the array","        if (value === undefined || x[i] < value) {","            value = x[i];","        }","    }","    if (value === undefined) {","        throw new Error('min requires at least one data point');","    }","    return value;","}","","module.exports = min;",""],"l":{"13":1,"14":0,"15":0,"18":0,"19":0,"22":0,"23":0,"25":0,"28":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/max.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/max.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"max","line":16,"loc":{"start":{"line":16,"column":0},"end":{"line":16,"column":49}}}},"statementMap":{"1":{"start":{"line":16,"column":0},"end":{"line":29,"column":1}},"2":{"start":{"line":17,"column":4},"end":{"line":17,"column":14}},"3":{"start":{"line":18,"column":4},"end":{"line":24,"column":5}},"4":{"start":{"line":21,"column":8},"end":{"line":23,"column":9}},"5":{"start":{"line":22,"column":12},"end":{"line":22,"column":25}},"6":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"7":{"start":{"line":26,"column":8},"end":{"line":26,"column":64}},"8":{"start":{"line":28,"column":4},"end":{"line":28,"column":17}},"9":{"start":{"line":31,"column":0},"end":{"line":31,"column":21}}},"branchMap":{"1":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":8},"end":{"line":21,"column":8}},{"start":{"line":21,"column":8},"end":{"line":21,"column":8}}]},"2":{"line":21,"type":"binary-expr","locations":[{"start":{"line":21,"column":12},"end":{"line":21,"column":31}},{"start":{"line":21,"column":35},"end":{"line":21,"column":47}}]},"3":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]}},"code":["'use strict';","/* @flow */","","/**"," * This computes the maximum number in an array."," *"," * This runs on `O(n)`, linear time in respect to the array"," *"," * @param {Array<number>} x sample of one or more data points"," * @returns {number} maximum value"," * @throws {Error} if the the length of x is less than one"," * @example"," * max([1, 2, 3, 4]);"," * // => 4"," */","function max(x /*: Array<number> */) /*:number*/ {","    var value;","    for (var i = 0; i < x.length; i++) {","        // On the first iteration of this loop, max is","        // undefined and is thus made the maximum element in the array","        if (value === undefined || x[i] > value) {","            value = x[i];","        }","    }","    if (value === undefined) {","        throw new Error('max requires at least one data point');","    }","    return value;","}","","module.exports = max;",""],"l":{"16":1,"17":0,"18":0,"21":0,"22":0,"25":0,"26":0,"28":0,"31":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/min_sorted.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/min_sorted.js","s":{"1":1,"2":0,"3":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"minSorted","line":14,"loc":{"start":{"line":14,"column":0},"end":{"line":14,"column":54}}}},"statementMap":{"1":{"start":{"line":14,"column":0},"end":{"line":16,"column":1}},"2":{"start":{"line":15,"column":4},"end":{"line":15,"column":16}},"3":{"start":{"line":18,"column":0},"end":{"line":18,"column":27}}},"branchMap":{},"code":["'use strict';","/* @flow */","","/**"," * The minimum is the lowest number in the array. With a sorted array,"," * the first element in the array is always the smallest, so this calculation"," * can be done in one step, or constant time."," *"," * @param {Array<number>} x input"," * @returns {number} minimum value"," * @example"," * minSorted([-100, -10, 1, 2, 5]); // => -100"," */","function minSorted(x /*: Array<number> */)/*:number*/ {","    return x[0];","}","","module.exports = minSorted;",""],"l":{"14":1,"15":0,"18":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/max_sorted.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/max_sorted.js","s":{"1":1,"2":0,"3":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"maxSorted","line":14,"loc":{"start":{"line":14,"column":0},"end":{"line":14,"column":54}}}},"statementMap":{"1":{"start":{"line":14,"column":0},"end":{"line":16,"column":1}},"2":{"start":{"line":15,"column":4},"end":{"line":15,"column":27}},"3":{"start":{"line":18,"column":0},"end":{"line":18,"column":27}}},"branchMap":{},"code":["'use strict';","/* @flow */","","/**"," * The maximum is the highest number in the array. With a sorted array,"," * the last element in the array is always the largest, so this calculation"," * can be done in one step, or constant time."," *"," * @param {Array<number>} x input"," * @returns {number} maximum value"," * @example"," * maxSorted([-100, -10, 1, 2, 5]); // => 5"," */","function maxSorted(x /*: Array<number> */)/*:number*/ {","    return x[x.length - 1];","}","","module.exports = maxSorted;",""],"l":{"14":1,"15":0,"18":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/sum_simple.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/sum_simple.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"sumSimple","line":15,"loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":55}}}},"statementMap":{"1":{"start":{"line":15,"column":0},"end":{"line":21,"column":1}},"2":{"start":{"line":16,"column":4},"end":{"line":16,"column":18}},"3":{"start":{"line":17,"column":4},"end":{"line":19,"column":5}},"4":{"start":{"line":18,"column":8},"end":{"line":18,"column":22}},"5":{"start":{"line":20,"column":4},"end":{"line":20,"column":17}},"6":{"start":{"line":23,"column":0},"end":{"line":23,"column":27}}},"branchMap":{},"code":["'use strict';","/* @flow */","","/**"," * The simple [sum](https://en.wikipedia.org/wiki/Summation) of an array"," * is the result of adding all numbers together, starting from zero."," *"," * This runs on `O(n)`, linear time in respect to the array"," *"," * @param {Array<number>} x input"," * @return {number} sum of all input numbers"," * @example"," * sumSimple([1, 2, 3]); // => 6"," */","function sumSimple(x/*: Array<number> */)/*: number */ {","    var value = 0;","    for (var i = 0; i < x.length; i++) {","        value += x[i];","    }","    return value;","}","","module.exports = sumSimple;",""],"l":{"15":1,"16":0,"17":0,"18":0,"20":0,"23":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/product.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/product.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"product","line":15,"loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":53}}}},"statementMap":{"1":{"start":{"line":15,"column":0},"end":{"line":21,"column":1}},"2":{"start":{"line":16,"column":4},"end":{"line":16,"column":18}},"3":{"start":{"line":17,"column":4},"end":{"line":19,"column":5}},"4":{"start":{"line":18,"column":8},"end":{"line":18,"column":22}},"5":{"start":{"line":20,"column":4},"end":{"line":20,"column":17}},"6":{"start":{"line":23,"column":0},"end":{"line":23,"column":25}}},"branchMap":{},"code":["'use strict';","/* @flow */","","/**"," * The [product](https://en.wikipedia.org/wiki/Product_(mathematics)) of an array"," * is the result of multiplying all numbers together, starting using one as the multiplicative identity."," *"," * This runs on `O(n)`, linear time in respect to the array"," *"," * @param {Array<number>} x input"," * @return {number} product of all input numbers"," * @example"," * product([1, 2, 3, 4]); // => 24"," */","function product(x/*: Array<number> */)/*: number */ {","    var value = 1;","    for (var i = 0; i < x.length; i++) {","        value *= x[i];","    }","    return value;","}","","module.exports = product;",""],"l":{"15":1,"16":0,"17":0,"18":0,"20":0,"23":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/quantile.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/quantile.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":1,"36":0,"37":1,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"quantile","line":28,"loc":{"start":{"line":28,"column":0},"end":{"line":28,"column":75}}},"2":{"name":"quantileSelect","line":49,"loc":{"start":{"line":49,"column":0},"end":{"line":49,"column":45}}},"3":{"name":"multiQuantileSelect","line":59,"loc":{"start":{"line":59,"column":0},"end":{"line":59,"column":37}}},"4":{"name":"compare","line":81,"loc":{"start":{"line":81,"column":0},"end":{"line":81,"column":23}}},"5":{"name":"quantileIndex","line":85,"loc":{"start":{"line":85,"column":0},"end":{"line":85,"column":70}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":50}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":43}},"3":{"start":{"line":28,"column":0},"end":{"line":47,"column":1}},"4":{"start":{"line":29,"column":4},"end":{"line":29,"column":25}},"5":{"start":{"line":31,"column":4},"end":{"line":46,"column":5}},"6":{"start":{"line":34,"column":8},"end":{"line":34,"column":37}},"7":{"start":{"line":36,"column":8},"end":{"line":36,"column":25}},"8":{"start":{"line":38,"column":8},"end":{"line":40,"column":9}},"9":{"start":{"line":39,"column":12},"end":{"line":39,"column":52}},"10":{"start":{"line":41,"column":8},"end":{"line":41,"column":23}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":48}},"12":{"start":{"line":44,"column":8},"end":{"line":44,"column":54}},"13":{"start":{"line":45,"column":8},"end":{"line":45,"column":39}},"14":{"start":{"line":49,"column":0},"end":{"line":57,"column":1}},"15":{"start":{"line":50,"column":4},"end":{"line":56,"column":5}},"16":{"start":{"line":51,"column":8},"end":{"line":51,"column":41}},"17":{"start":{"line":53,"column":8},"end":{"line":53,"column":26}},"18":{"start":{"line":54,"column":8},"end":{"line":54,"column":41}},"19":{"start":{"line":55,"column":8},"end":{"line":55,"column":46}},"20":{"start":{"line":59,"column":0},"end":{"line":79,"column":1}},"21":{"start":{"line":60,"column":4},"end":{"line":60,"column":22}},"22":{"start":{"line":61,"column":4},"end":{"line":63,"column":5}},"23":{"start":{"line":62,"column":8},"end":{"line":62,"column":54}},"24":{"start":{"line":64,"column":4},"end":{"line":64,"column":33}},"25":{"start":{"line":65,"column":4},"end":{"line":65,"column":26}},"26":{"start":{"line":67,"column":4},"end":{"line":67,"column":40}},"27":{"start":{"line":69,"column":4},"end":{"line":78,"column":5}},"28":{"start":{"line":70,"column":8},"end":{"line":70,"column":39}},"29":{"start":{"line":71,"column":8},"end":{"line":71,"column":40}},"30":{"start":{"line":72,"column":8},"end":{"line":72,"column":33}},"31":{"start":{"line":72,"column":24},"end":{"line":72,"column":33}},"32":{"start":{"line":74,"column":8},"end":{"line":74,"column":40}},"33":{"start":{"line":75,"column":8},"end":{"line":75,"column":64}},"34":{"start":{"line":77,"column":8},"end":{"line":77,"column":31}},"35":{"start":{"line":81,"column":0},"end":{"line":83,"column":1}},"36":{"start":{"line":82,"column":4},"end":{"line":82,"column":17}},"37":{"start":{"line":85,"column":0},"end":{"line":105,"column":1}},"38":{"start":{"line":86,"column":4},"end":{"line":86,"column":22}},"39":{"start":{"line":87,"column":4},"end":{"line":104,"column":5}},"40":{"start":{"line":89,"column":8},"end":{"line":89,"column":23}},"41":{"start":{"line":90,"column":11},"end":{"line":104,"column":5}},"42":{"start":{"line":92,"column":8},"end":{"line":92,"column":17}},"43":{"start":{"line":93,"column":11},"end":{"line":104,"column":5}},"44":{"start":{"line":95,"column":8},"end":{"line":95,"column":34}},"45":{"start":{"line":96,"column":11},"end":{"line":104,"column":5}},"46":{"start":{"line":99,"column":8},"end":{"line":99,"column":25}},"47":{"start":{"line":103,"column":8},"end":{"line":103,"column":19}},"48":{"start":{"line":107,"column":0},"end":{"line":107,"column":26}}},"branchMap":{"1":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":4},"end":{"line":31,"column":4}},{"start":{"line":31,"column":4},"end":{"line":31,"column":4}}]},"2":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":4},"end":{"line":50,"column":4}},{"start":{"line":50,"column":4},"end":{"line":50,"column":4}}]},"3":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":8},"end":{"line":72,"column":8}},{"start":{"line":72,"column":8},"end":{"line":72,"column":8}}]},"4":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":4},"end":{"line":87,"column":4}},{"start":{"line":87,"column":4},"end":{"line":87,"column":4}}]},"5":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":11},"end":{"line":90,"column":11}},{"start":{"line":90,"column":11},"end":{"line":90,"column":11}}]},"6":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":11},"end":{"line":93,"column":11}},{"start":{"line":93,"column":11},"end":{"line":93,"column":11}}]},"7":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":11},"end":{"line":96,"column":11}},{"start":{"line":96,"column":11},"end":{"line":96,"column":11}}]}},"code":["'use strict';","/* @flow */","","var quantileSorted = require('./quantile_sorted');","var quickselect = require('./quickselect');","","/**"," * The [quantile](https://en.wikipedia.org/wiki/Quantile):"," * this is a population quantile, since we assume to know the entire"," * dataset in this library. This is an implementation of the"," * [Quantiles of a Population](http://en.wikipedia.org/wiki/Quantile#Quantiles_of_a_population)"," * algorithm from wikipedia."," *"," * Sample is a one-dimensional array of numbers,"," * and p is either a decimal number from 0 to 1 or an array of decimal"," * numbers from 0 to 1."," * In terms of a k/q quantile, p = k/q - it's just dealing with fractions or dealing"," * with decimal values."," * When p is an array, the result of the function is also an array containing the appropriate"," * quantiles in input order"," *"," * @param {Array<number>} x sample of one or more numbers"," * @param {number} p the desired quantile, as a number between 0 and 1"," * @returns {number} quantile"," * @example"," * quantile([3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20], 0.5); // => 9"," */","function quantile(x /*: Array<number> */, p /*: Array<number> | number */) {","    var copy = x.slice();","","    if (Array.isArray(p)) {","        // rearrange elements so that each element corresponding to a requested","        // quantile is on a place it would be if the array was fully sorted","        multiQuantileSelect(copy, p);","        // Initialize the result array","        var results = [];","        // For each requested quantile","        for (var i = 0; i < p.length; i++) {","            results[i] = quantileSorted(copy, p[i]);","        }","        return results;","    } else {","        var idx = quantileIndex(copy.length, p);","        quantileSelect(copy, idx, 0, copy.length - 1);","        return quantileSorted(copy, p);","    }","}","","function quantileSelect(arr, k, left, right) {","    if (k % 1 === 0) {","        quickselect(arr, k, left, right);","    } else {","        k = Math.floor(k);","        quickselect(arr, k, left, right);","        quickselect(arr, k + 1, k + 1, right);","    }","}","","function multiQuantileSelect(arr, p) {","    var indices = [0];","    for (var i = 0; i < p.length; i++) {","        indices.push(quantileIndex(arr.length, p[i]));","    }","    indices.push(arr.length - 1);","    indices.sort(compare);","","    var stack = [0, indices.length - 1];","","    while (stack.length) {","        var r = Math.ceil(stack.pop());","        var l = Math.floor(stack.pop());","        if (r - l <= 1) continue;","","        var m = Math.floor((l + r) / 2);","        quantileSelect(arr, indices[m], indices[l], indices[r]);","","        stack.push(l, m, m, r);","    }","}","","function compare(a, b) {","    return a - b;","}","","function quantileIndex(len /*: number */, p /*: number */)/*:number*/ {","    var idx = len * p;","    if (p === 1) {","        // If p is 1, directly return the last index","        return len - 1;","    } else if (p === 0) {","        // If p is 0, directly return the first index","        return 0;","    } else if (idx % 1 !== 0) {","        // If index is not integer, return the next index in array","        return Math.ceil(idx) - 1;","    } else if (len % 2 === 0) {","        // If the list has even-length, we'll return the middle of two indices","        // around quantile to indicate that we need an average value of the two","        return idx - 0.5;","    } else {","        // Finally, in the simple case of an integer index","        // with an odd-length list, return the index","        return idx;","    }","}","","module.exports = quantile;",""],"l":{"4":1,"5":1,"28":1,"29":0,"31":0,"34":0,"36":0,"38":0,"39":0,"41":0,"43":0,"44":0,"45":0,"49":1,"50":0,"51":0,"53":0,"54":0,"55":0,"59":1,"60":0,"61":0,"62":0,"64":0,"65":0,"67":0,"69":0,"70":0,"71":0,"72":0,"74":0,"75":0,"77":0,"81":1,"82":0,"85":1,"86":0,"87":0,"89":0,"90":0,"92":0,"93":0,"95":0,"96":0,"99":0,"103":0,"107":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/quantile_sorted.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/quantile_sorted.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"quantileSorted","line":17,"loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":76}}}},"statementMap":{"1":{"start":{"line":17,"column":0},"end":{"line":41,"column":1}},"2":{"start":{"line":18,"column":4},"end":{"line":18,"column":27}},"3":{"start":{"line":19,"column":4},"end":{"line":40,"column":5}},"4":{"start":{"line":20,"column":8},"end":{"line":20,"column":70}},"5":{"start":{"line":21,"column":11},"end":{"line":40,"column":5}},"6":{"start":{"line":22,"column":8},"end":{"line":22,"column":61}},"7":{"start":{"line":23,"column":11},"end":{"line":40,"column":5}},"8":{"start":{"line":25,"column":8},"end":{"line":25,"column":31}},"9":{"start":{"line":26,"column":11},"end":{"line":40,"column":5}},"10":{"start":{"line":28,"column":8},"end":{"line":28,"column":20}},"11":{"start":{"line":29,"column":11},"end":{"line":40,"column":5}},"12":{"start":{"line":31,"column":8},"end":{"line":31,"column":37}},"13":{"start":{"line":32,"column":11},"end":{"line":40,"column":5}},"14":{"start":{"line":35,"column":8},"end":{"line":35,"column":41}},"15":{"start":{"line":39,"column":8},"end":{"line":39,"column":22}},"16":{"start":{"line":43,"column":0},"end":{"line":43,"column":32}}},"branchMap":{"1":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":4}},{"start":{"line":19,"column":4},"end":{"line":19,"column":4}}]},"2":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":11},"end":{"line":21,"column":11}},{"start":{"line":21,"column":11},"end":{"line":21,"column":11}}]},"3":{"line":21,"type":"binary-expr","locations":[{"start":{"line":21,"column":15},"end":{"line":21,"column":20}},{"start":{"line":21,"column":24},"end":{"line":21,"column":29}}]},"4":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":11},"end":{"line":23,"column":11}},{"start":{"line":23,"column":11},"end":{"line":23,"column":11}}]},"5":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":11},"end":{"line":26,"column":11}},{"start":{"line":26,"column":11},"end":{"line":26,"column":11}}]},"6":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":11},"end":{"line":29,"column":11}},{"start":{"line":29,"column":11},"end":{"line":29,"column":11}}]},"7":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":11},"end":{"line":32,"column":11}},{"start":{"line":32,"column":11},"end":{"line":32,"column":11}}]}},"code":["'use strict';","/* @flow */","","/**"," * This is the internal implementation of quantiles: when you know"," * that the order is sorted, you don't need to re-sort it, and the computations"," * are faster."," *"," * @param {Array<number>} x sample of one or more data points"," * @param {number} p desired quantile: a number between 0 to 1, inclusive"," * @returns {number} quantile value"," * @throws {Error} if p ix outside of the range from 0 to 1"," * @throws {Error} if x is empty"," * @example"," * quantileSorted([3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20], 0.5); // => 9"," */","function quantileSorted(x /*: Array<number> */, p /*: number */)/*:number*/ {","    var idx = x.length * p;","    if (x.length === 0) {","        throw new Error('quantile requires at least one data point.');","    } else if (p < 0 || p > 1) {","        throw new Error('quantiles must be between 0 and 1');","    } else if (p === 1) {","        // If p is 1, directly return the last element","        return x[x.length - 1];","    } else if (p === 0) {","        // If p is 0, directly return the first element","        return x[0];","    } else if (idx % 1 !== 0) {","        // If p is not integer, return the next element in array","        return x[Math.ceil(idx) - 1];","    } else if (x.length % 2 === 0) {","        // If the list has even-length, we'll take the average of this number","        // and the next value, if there is one","        return (x[idx - 1] + x[idx]) / 2;","    } else {","        // Finally, in the simple case of an integer value","        // with an odd-length list, return the x value at the index.","        return x[idx];","    }","}","","module.exports = quantileSorted;",""],"l":{"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"25":0,"26":0,"28":0,"29":0,"31":0,"32":0,"35":0,"39":0,"43":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/quickselect.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/quickselect.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":0,"41":0,"42":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"quickselect","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":105}}},"2":{"name":"swap","line":67,"loc":{"start":{"line":67,"column":0},"end":{"line":67,"column":25}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":29}},"2":{"start":{"line":23,"column":0},"end":{"line":65,"column":1}},"3":{"start":{"line":24,"column":4},"end":{"line":24,"column":21}},"4":{"start":{"line":25,"column":4},"end":{"line":25,"column":38}},"5":{"start":{"line":27,"column":4},"end":{"line":64,"column":5}},"6":{"start":{"line":29,"column":8},"end":{"line":39,"column":9}},"7":{"start":{"line":30,"column":12},"end":{"line":30,"column":37}},"8":{"start":{"line":31,"column":12},"end":{"line":31,"column":33}},"9":{"start":{"line":32,"column":12},"end":{"line":32,"column":32}},"10":{"start":{"line":33,"column":12},"end":{"line":33,"column":46}},"11":{"start":{"line":34,"column":12},"end":{"line":34,"column":58}},"12":{"start":{"line":35,"column":12},"end":{"line":35,"column":40}},"13":{"start":{"line":35,"column":31},"end":{"line":35,"column":40}},"14":{"start":{"line":36,"column":12},"end":{"line":36,"column":73}},"15":{"start":{"line":37,"column":12},"end":{"line":37,"column":81}},"16":{"start":{"line":38,"column":12},"end":{"line":38,"column":51}},"17":{"start":{"line":41,"column":8},"end":{"line":41,"column":23}},"18":{"start":{"line":42,"column":8},"end":{"line":42,"column":21}},"19":{"start":{"line":43,"column":8},"end":{"line":43,"column":22}},"20":{"start":{"line":45,"column":8},"end":{"line":45,"column":27}},"21":{"start":{"line":46,"column":8},"end":{"line":46,"column":51}},"22":{"start":{"line":46,"column":28},"end":{"line":46,"column":51}},"23":{"start":{"line":48,"column":8},"end":{"line":54,"column":9}},"24":{"start":{"line":49,"column":12},"end":{"line":49,"column":28}},"25":{"start":{"line":50,"column":12},"end":{"line":50,"column":16}},"26":{"start":{"line":51,"column":12},"end":{"line":51,"column":16}},"27":{"start":{"line":52,"column":12},"end":{"line":52,"column":35}},"28":{"start":{"line":52,"column":31},"end":{"line":52,"column":35}},"29":{"start":{"line":53,"column":12},"end":{"line":53,"column":35}},"30":{"start":{"line":53,"column":31},"end":{"line":53,"column":35}},"31":{"start":{"line":56,"column":8},"end":{"line":60,"column":9}},"32":{"start":{"line":56,"column":29},"end":{"line":56,"column":48}},"33":{"start":{"line":58,"column":12},"end":{"line":58,"column":16}},"34":{"start":{"line":59,"column":12},"end":{"line":59,"column":32}},"35":{"start":{"line":62,"column":8},"end":{"line":62,"column":33}},"36":{"start":{"line":62,"column":20},"end":{"line":62,"column":33}},"37":{"start":{"line":63,"column":8},"end":{"line":63,"column":34}},"38":{"start":{"line":63,"column":20},"end":{"line":63,"column":34}},"39":{"start":{"line":67,"column":0},"end":{"line":71,"column":1}},"40":{"start":{"line":68,"column":4},"end":{"line":68,"column":21}},"41":{"start":{"line":69,"column":4},"end":{"line":69,"column":20}},"42":{"start":{"line":70,"column":4},"end":{"line":70,"column":17}}},"branchMap":{"1":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":11},"end":{"line":24,"column":15}},{"start":{"line":24,"column":19},"end":{"line":24,"column":20}}]},"2":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":12},"end":{"line":25,"column":17}},{"start":{"line":25,"column":22},"end":{"line":25,"column":36}}]},"3":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":8},"end":{"line":29,"column":8}},{"start":{"line":29,"column":8},"end":{"line":29,"column":8}}]},"4":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":12},"end":{"line":35,"column":12}},{"start":{"line":35,"column":12},"end":{"line":35,"column":12}}]},"5":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":46,"column":8}},{"start":{"line":46,"column":8},"end":{"line":46,"column":8}}]},"6":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":8},"end":{"line":56,"column":8}},{"start":{"line":56,"column":8},"end":{"line":56,"column":8}}]},"7":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":8},"end":{"line":62,"column":8}},{"start":{"line":62,"column":8},"end":{"line":62,"column":8}}]},"8":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":8},"end":{"line":63,"column":8}},{"start":{"line":63,"column":8},"end":{"line":63,"column":8}}]}},"code":["'use strict';","/* @flow */","","module.exports = quickselect;","","/**"," * Rearrange items in `arr` so that all items in `[left, k]` range are the smallest."," * The `k`-th element will have the `(k - left + 1)`-th smallest value in `[left, right]`."," *"," * Implements Floyd-Rivest selection algorithm https://en.wikipedia.org/wiki/Floyd-Rivest_algorithm"," *"," * @private"," * @param {Array<number>} arr input array"," * @param {number} k pivot index"," * @param {number} left left index"," * @param {number} right right index"," * @returns {undefined}"," * @example"," * var arr = [65, 28, 59, 33, 21, 56, 22, 95, 50, 12, 90, 53, 28, 77, 39];"," * quickselect(arr, 8);"," * // = [39, 28, 28, 33, 21, 12, 22, 50, 53, 56, 59, 65, 90, 77, 95]"," */","function quickselect(arr /*: Array<number> */, k /*: number */, left /*: number */, right /*: number */) {","    left = left || 0;","    right = right || (arr.length - 1);","","    while (right > left) {","        // 600 and 0.5 are arbitrary constants chosen in the original paper to minimize execution time","        if (right - left > 600) {","            var n = right - left + 1;","            var m = k - left + 1;","            var z = Math.log(n);","            var s = 0.5 * Math.exp(2 * z / 3);","            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n);","            if (m - n / 2 < 0) sd *= -1;","            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));","            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));","            quickselect(arr, k, newLeft, newRight);","        }","","        var t = arr[k];","        var i = left;","        var j = right;","","        swap(arr, left, k);","        if (arr[right] > t) swap(arr, left, right);","","        while (i < j) {","            swap(arr, i, j);","            i++;","            j--;","            while (arr[i] < t) i++;","            while (arr[j] > t) j--;","        }","","        if (arr[left] === t) swap(arr, left, j);","        else {","            j++;","            swap(arr, j, right);","        }","","        if (j <= k) left = j + 1;","        if (k <= j) right = j - 1;","    }","}","","function swap(arr, i, j) {","    var tmp = arr[i];","    arr[i] = arr[j];","    arr[j] = tmp;","}",""],"l":{"4":1,"23":1,"24":0,"25":0,"27":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"41":0,"42":0,"43":0,"45":0,"46":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"56":0,"58":0,"59":0,"62":0,"63":0,"67":1,"68":0,"69":0,"70":0}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/interquartile_range.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/interquartile_range.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"interquartileRange","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":51}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":37}},"2":{"start":{"line":18,"column":0},"end":{"line":27,"column":1}},"3":{"start":{"line":21,"column":4},"end":{"line":22,"column":31}},"4":{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},"5":{"start":{"line":25,"column":8},"end":{"line":25,"column":23}},"6":{"start":{"line":29,"column":0},"end":{"line":29,"column":36}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":24,"column":4}},{"start":{"line":24,"column":4},"end":{"line":24,"column":4}}]},"2":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":8},"end":{"line":24,"column":30}},{"start":{"line":24,"column":34},"end":{"line":24,"column":56}}]}},"code":["'use strict';","/* @flow */","","var quantile = require('./quantile');","","/**"," * The [Interquartile range](http://en.wikipedia.org/wiki/Interquartile_range) is"," * a measure of statistical dispersion, or how scattered, spread, or"," * concentrated a distribution is. It's computed as the difference between"," * the third quartile and first quartile."," *"," * @param {Array<number>} x sample of one or more numbers"," * @returns {number} interquartile range: the span between lower and upper quartile,"," * 0.25 and 0.75"," * @example"," * interquartileRange([0, 1, 2, 3]); // => 2"," */","function interquartileRange(x/*: Array<number> */) {","    // Interquartile range is the span between the upper quartile,","    // at `0.75`, and lower quartile, `0.25`","    var q1 = quantile(x, 0.75),","        q2 = quantile(x, 0.25);","","    if (typeof q1 === 'number' && typeof q2 === 'number') {","        return q1 - q2;","    }","}","","module.exports = interquartileRange;",""],"l":{"4":1,"18":1,"21":0,"24":0,"25":0,"29":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/median_absolute_deviation.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/median_absolute_deviation.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"medianAbsoluteDeviation","line":16,"loc":{"start":{"line":16,"column":0},"end":{"line":16,"column":57}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":33}},"2":{"start":{"line":16,"column":0},"end":{"line":28,"column":1}},"3":{"start":{"line":18,"column":4},"end":{"line":19,"column":38}},"4":{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},"5":{"start":{"line":23,"column":8},"end":{"line":23,"column":68}},"6":{"start":{"line":27,"column":4},"end":{"line":27,"column":44}},"7":{"start":{"line":30,"column":0},"end":{"line":30,"column":41}}},"branchMap":{},"code":["'use strict';","/* @flow */","","var median = require('./median');","","/**"," * The [Median Absolute Deviation](http://en.wikipedia.org/wiki/Median_absolute_deviation) is"," * a robust measure of statistical"," * dispersion. It is more resilient to outliers than the standard deviation."," *"," * @param {Array<number>} x input array"," * @returns {number} median absolute deviation"," * @example"," * medianAbsoluteDeviation([1, 1, 2, 2, 4, 6, 9]); // => 1"," */","function medianAbsoluteDeviation(x /*: Array<number> */) {","    // The mad of nothing is null","    var medianValue = median(x),","        medianAbsoluteDeviations = [];","","    // Make a list of absolute deviations from the median","    for (var i = 0; i < x.length; i++) {","        medianAbsoluteDeviations.push(Math.abs(x[i] - medianValue));","    }","","    // Find the median value of that list","    return median(medianAbsoluteDeviations);","}","","module.exports = medianAbsoluteDeviation;",""],"l":{"4":1,"16":1,"18":0,"22":0,"23":0,"27":0,"30":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/median.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/median.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"median","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":51}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":37}},"2":{"start":{"line":22,"column":0},"end":{"line":24,"column":1}},"3":{"start":{"line":23,"column":4},"end":{"line":23,"column":29}},"4":{"start":{"line":26,"column":0},"end":{"line":26,"column":24}}},"branchMap":{},"code":["'use strict';","/* @flow */","","var quantile = require('./quantile');","","/**"," * The [median](http://en.wikipedia.org/wiki/Median) is"," * the middle number of a list. This is often a good indicator of 'the middle'"," * when there are outliers that skew the `mean()` value."," * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):"," * a method of finding a typical or central value of a set of numbers."," *"," * The median isn't necessarily one of the elements in the list: the value"," * can be the average of two elements if the list has an even length"," * and the two central values are different."," *"," * @param {Array<number>} x input"," * @returns {number} median value"," * @example"," * median([10, 2, 5, 100, 2, 1]); // => 3.5"," */","function median(x /*: Array<number> */)/*:number*/ {","    return +quantile(x, 0.5);","}","","module.exports = median;",""],"l":{"4":1,"22":1,"23":0,"26":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/chunk.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/chunk.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"chunk","line":21,"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":78}}}},"statementMap":{"1":{"start":{"line":21,"column":0},"end":{"line":48,"column":1}},"2":{"start":{"line":24,"column":4},"end":{"line":24,"column":20}},"3":{"start":{"line":30,"column":4},"end":{"line":32,"column":5}},"4":{"start":{"line":31,"column":8},"end":{"line":31,"column":64}},"5":{"start":{"line":34,"column":4},"end":{"line":36,"column":5}},"6":{"start":{"line":35,"column":8},"end":{"line":35,"column":57}},"7":{"start":{"line":40,"column":4},"end":{"line":46,"column":5}},"8":{"start":{"line":45,"column":8},"end":{"line":45,"column":55}},"9":{"start":{"line":47,"column":4},"end":{"line":47,"column":18}},"10":{"start":{"line":50,"column":0},"end":{"line":50,"column":23}}},"branchMap":{"1":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":4},"end":{"line":30,"column":4}},{"start":{"line":30,"column":4},"end":{"line":30,"column":4}}]},"2":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":4},"end":{"line":34,"column":4}},{"start":{"line":34,"column":4},"end":{"line":34,"column":4}}]}},"code":["'use strict';","/* @flow */","","/**"," * Split an array into chunks of a specified size. This function"," * has the same behavior as [PHP's array_chunk](http://php.net/manual/en/function.array-chunk.php)"," * function, and thus will insert smaller-sized chunks at the end if"," * the input size is not divisible by the chunk size."," *"," * `x` is expected to be an array, and `chunkSize` a number."," * The `x` array can contain any kind of data."," *"," * @param {Array} x a sample"," * @param {number} chunkSize size of each output array. must be a positive integer"," * @returns {Array<Array>} a chunked array"," * @throws {Error} if chunk size is less than 1 or not an integer"," * @example"," * chunk([1, 2, 3, 4, 5, 6], 2);"," * // => [[1, 2], [3, 4], [5, 6]]"," */","function chunk(x/*:Array<any>*/, chunkSize/*:number*/)/*:?Array<Array<any>>*/ {","","    // a list of result chunks, as arrays in an array","    var output = [];","","    // `chunkSize` must be zero or higher - otherwise the loop below,","    // in which we call `start += chunkSize`, will loop infinitely.","    // So, we'll detect and throw in that case to indicate","    // invalid input.","    if (chunkSize < 1) {","        throw new Error('chunk size must be a positive number');","    }","","    if (Math.floor(chunkSize) !== chunkSize) {","        throw new Error('chunk size must be an integer');","    }","","    // `start` is the index at which `.slice` will start selecting","    // new array elements","    for (var start = 0; start < x.length; start += chunkSize) {","","        // for each chunk, slice that part of the array and add it","        // to the output. The `.slice` function does not change","        // the original array.","        output.push(x.slice(start, start + chunkSize));","    }","    return output;","}","","module.exports = chunk;",""],"l":{"21":1,"24":0,"30":0,"31":0,"34":0,"35":0,"40":0,"45":0,"47":0,"50":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/sample_with_replacement.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/sample_with_replacement.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"sampleWithReplacement","line":17,"loc":{"start":{"line":17,"column":0},"end":{"line":19,"column":31}}}},"statementMap":{"1":{"start":{"line":17,"column":0},"end":{"line":40,"column":1}},"2":{"start":{"line":21,"column":4},"end":{"line":23,"column":5}},"3":{"start":{"line":22,"column":8},"end":{"line":22,"column":18}},"4":{"start":{"line":28,"column":4},"end":{"line":28,"column":47}},"5":{"start":{"line":30,"column":4},"end":{"line":30,"column":26}},"6":{"start":{"line":31,"column":4},"end":{"line":31,"column":20}},"7":{"start":{"line":33,"column":4},"end":{"line":37,"column":5}},"8":{"start":{"line":34,"column":8},"end":{"line":34,"column":56}},"9":{"start":{"line":36,"column":8},"end":{"line":36,"column":30}},"10":{"start":{"line":39,"column":4},"end":{"line":39,"column":18}},"11":{"start":{"line":42,"column":0},"end":{"line":42,"column":39}}},"branchMap":{"1":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":21,"column":4}},{"start":{"line":21,"column":4},"end":{"line":21,"column":4}}]},"2":{"line":28,"type":"binary-expr","locations":[{"start":{"line":28,"column":19},"end":{"line":28,"column":31}},{"start":{"line":28,"column":35},"end":{"line":28,"column":46}}]}},"code":["'use strict';","/* @flow */","","/**"," * Sampling with replacement is a type of sampling that allows the same"," * item to be picked out of a population more than once."," *"," * @param {Array<*>} x an array of any kind of value"," * @param {number} n count of how many elements to take"," * @param {Function} [randomSource=Math.random] an optional entropy source that"," * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)"," * @return {Array} n sampled items from the population"," * @example"," * var sample = sampleWithReplacement([1, 2, 3, 4], 2);"," * sampleWithReplacement; // = [2, 4] or any other random sample of 2 items"," */","function sampleWithReplacement/*::<T>*/(x/*:Array<T>*/,","    n /*: number */,","    randomSource/*:Function*/) {","","    if (x.length === 0) {","        return [];","    }","","    // a custom random number source can be provided if you want to use","    // a fixed seed or another random number generator, like","    // [random-js](https://www.npmjs.org/package/random-js)","    randomSource = randomSource || Math.random;","","    var length = x.length;","    var sample = [];","","    for (var i = 0; i < n; i++) {","        var index = Math.floor(randomSource() * length);","","        sample.push(x[index]);","    }","","    return sample;","}","","module.exports = sampleWithReplacement;",""],"l":{"17":1,"21":0,"22":0,"28":0,"30":0,"31":0,"33":0,"34":0,"36":0,"39":0,"42":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/shuffle.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/shuffle.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"shuffle","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":69}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":51}},"2":{"start":{"line":20,"column":0},"end":{"line":26,"column":1}},"3":{"start":{"line":22,"column":4},"end":{"line":22,"column":27}},"4":{"start":{"line":25,"column":4},"end":{"line":25,"column":56}},"5":{"start":{"line":28,"column":0},"end":{"line":28,"column":25}}},"branchMap":{},"code":["'use strict';","/* @flow */","","var shuffleInPlace = require('./shuffle_in_place');","","/**"," * A [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)"," * is a fast way to create a random permutation of a finite set. This is"," * a function around `shuffle_in_place` that adds the guarantee that"," * it will not modify its input."," *"," * @param {Array} x sample of 0 or more numbers"," * @param {Function} [randomSource=Math.random] an optional entropy source that"," * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)"," * @return {Array} shuffled version of input"," * @example"," * var shuffled = shuffle([1, 2, 3, 4]);"," * shuffled; // = [2, 3, 1, 4] or any other random permutation"," */","function shuffle/*::<T>*/(x/*:Array<T>*/, randomSource/*:Function*/) {","    // slice the original array so that it is not modified","    var sample = x.slice();","","    // and then shuffle that shallow-copied array, in place","    return shuffleInPlace(sample.slice(), randomSource);","}","","module.exports = shuffle;",""],"l":{"4":1,"20":1,"22":0,"25":0,"28":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/shuffle_in_place.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/shuffle_in_place.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"shuffleInPlace","line":21,"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":84}}}},"statementMap":{"1":{"start":{"line":21,"column":0},"end":{"line":54,"column":1}},"2":{"start":{"line":26,"column":4},"end":{"line":26,"column":47}},"3":{"start":{"line":30,"column":4},"end":{"line":30,"column":26}},"4":{"start":{"line":34,"column":4},"end":{"line":34,"column":18}},"5":{"start":{"line":37,"column":4},"end":{"line":37,"column":14}},"6":{"start":{"line":40,"column":4},"end":{"line":51,"column":5}},"7":{"start":{"line":43,"column":8},"end":{"line":43,"column":54}},"8":{"start":{"line":46,"column":8},"end":{"line":46,"column":30}},"9":{"start":{"line":49,"column":8},"end":{"line":49,"column":29}},"10":{"start":{"line":50,"column":8},"end":{"line":50,"column":29}},"11":{"start":{"line":53,"column":4},"end":{"line":53,"column":13}},"12":{"start":{"line":56,"column":0},"end":{"line":56,"column":32}}},"branchMap":{"1":{"line":26,"type":"binary-expr","locations":[{"start":{"line":26,"column":19},"end":{"line":26,"column":31}},{"start":{"line":26,"column":35},"end":{"line":26,"column":46}}]}},"code":["'use strict';","/* @flow */","","/**"," * A [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)"," * in-place - which means that it **will change the order of the original"," * array by reference**."," *"," * This is an algorithm that generates a random [permutation](https://en.wikipedia.org/wiki/Permutation)"," * of a set."," *"," * @param {Array} x sample of one or more numbers"," * @param {Function} [randomSource=Math.random] an optional entropy source that"," * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)"," * @returns {Array} x"," * @example"," * var x = [1, 2, 3, 4];"," * shuffleInPlace(x);"," * // x is shuffled to a value like [2, 1, 4, 3]"," */","function shuffleInPlace(x/*:Array<any>*/, randomSource/*:Function*/)/*:Array<any>*/ {","","    // a custom random number source can be provided if you want to use","    // a fixed seed or another random number generator, like","    // [random-js](https://www.npmjs.org/package/random-js)","    randomSource = randomSource || Math.random;","","    // store the current length of the x to determine","    // when no elements remain to shuffle.","    var length = x.length;","","    // temporary is used to hold an item when it is being","    // swapped between indices.","    var temporary;","","    // The index to swap at each stage.","    var index;","","    // While there are still items to shuffle","    while (length > 0) {","        // chose a random index within the subset of the array","        // that is not yet shuffled","        index = Math.floor(randomSource() * length--);","","        // store the value that we'll move temporarily","        temporary = x[length];","","        // swap the value at `x[length]` with `x[index]`","        x[length] = x[index];","        x[index] = temporary;","    }","","    return x;","}","","module.exports = shuffleInPlace;",""],"l":{"21":1,"26":0,"30":0,"34":0,"37":0,"40":0,"43":0,"46":0,"49":0,"50":0,"53":0,"56":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/sample.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/sample.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"sample","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":25,"column":50}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":35}},"2":{"start":{"line":22,"column":0},"end":{"line":31,"column":1}},"3":{"start":{"line":27,"column":4},"end":{"line":27,"column":44}},"4":{"start":{"line":30,"column":4},"end":{"line":30,"column":32}},"5":{"start":{"line":33,"column":0},"end":{"line":33,"column":24}}},"branchMap":{},"code":["'use strict';","/* @flow */","","var shuffle = require('./shuffle');","","/**"," * Create a [simple random sample](http://en.wikipedia.org/wiki/Simple_random_sample)"," * from a given array of `n` elements."," *"," * The sampled values will be in any order, not necessarily the order"," * they appear in the input."," *"," * @param {Array<any>} x input array. can contain any type"," * @param {number} n count of how many elements to take"," * @param {Function} [randomSource=Math.random] an optional entropy source that"," * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)"," * @return {Array} subset of n elements in original array"," * @example"," * var values = [1, 2, 4, 5, 6, 7, 8, 9];"," * sample(values, 3); // returns 3 random values, like [2, 5, 8];"," */","function sample/*:: <T> */(","    x /*: Array<T> */,","    n /*: number */,","    randomSource /*: Function */) /*: Array<T> */ {","    // shuffle the original array using a fisher-yates shuffle","    var shuffled = shuffle(x, randomSource);","","    // and then return a subset of it - the first `n` elements.","    return shuffled.slice(0, n);","}","","module.exports = sample;",""],"l":{"4":1,"22":1,"27":0,"30":0,"33":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/ckmeans.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/ckmeans.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":1,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":1,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"makeMatrix","line":17,"loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":35}}},"2":{"name":"ssq","line":42,"loc":{"start":{"line":42,"column":0},"end":{"line":42,"column":40}}},"3":{"name":"fillMatrixColumn","line":69,"loc":{"start":{"line":69,"column":0},"end":{"line":69,"column":93}}},"4":{"name":"fillMatrices","line":135,"loc":{"start":{"line":135,"column":0},"end":{"line":135,"column":53}}},"5":{"name":"ckmeans","line":217,"loc":{"start":{"line":217,"column":0},"end":{"line":217,"column":91}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":5,"column":44}},"2":{"start":{"line":17,"column":0},"end":{"line":27,"column":1}},"3":{"start":{"line":18,"column":4},"end":{"line":18,"column":20}},"4":{"start":{"line":19,"column":4},"end":{"line":25,"column":5}},"5":{"start":{"line":20,"column":8},"end":{"line":20,"column":24}},"6":{"start":{"line":21,"column":8},"end":{"line":23,"column":9}},"7":{"start":{"line":22,"column":12},"end":{"line":22,"column":27}},"8":{"start":{"line":24,"column":8},"end":{"line":24,"column":28}},"9":{"start":{"line":26,"column":4},"end":{"line":26,"column":18}},"10":{"start":{"line":42,"column":0},"end":{"line":54,"column":1}},"11":{"start":{"line":43,"column":4},"end":{"line":43,"column":12}},"12":{"start":{"line":44,"column":4},"end":{"line":49,"column":5}},"13":{"start":{"line":45,"column":8},"end":{"line":45,"column":57}},"14":{"start":{"line":46,"column":8},"end":{"line":46,"column":82}},"15":{"start":{"line":48,"column":8},"end":{"line":48,"column":61}},"16":{"start":{"line":50,"column":4},"end":{"line":52,"column":5}},"17":{"start":{"line":51,"column":8},"end":{"line":51,"column":17}},"18":{"start":{"line":53,"column":4},"end":{"line":53,"column":15}},"19":{"start":{"line":69,"column":0},"end":{"line":124,"column":1}},"20":{"start":{"line":70,"column":4},"end":{"line":72,"column":5}},"21":{"start":{"line":71,"column":8},"end":{"line":71,"column":15}},"22":{"start":{"line":75,"column":4},"end":{"line":75,"column":42}},"23":{"start":{"line":77,"column":4},"end":{"line":77,"column":52}},"24":{"start":{"line":78,"column":4},"end":{"line":78,"column":36}},"25":{"start":{"line":80,"column":4},"end":{"line":80,"column":23}},"26":{"start":{"line":82,"column":4},"end":{"line":84,"column":5}},"27":{"start":{"line":83,"column":8},"end":{"line":83,"column":71}},"28":{"start":{"line":85,"column":4},"end":{"line":85,"column":64}},"29":{"start":{"line":87,"column":4},"end":{"line":87,"column":22}},"30":{"start":{"line":88,"column":4},"end":{"line":90,"column":5}},"31":{"start":{"line":89,"column":8},"end":{"line":89,"column":73}},"32":{"start":{"line":92,"column":4},"end":{"line":92,"column":12}},"33":{"start":{"line":93,"column":4},"end":{"line":93,"column":15}},"34":{"start":{"line":94,"column":4},"end":{"line":94,"column":16}},"35":{"start":{"line":95,"column":4},"end":{"line":95,"column":13}},"36":{"start":{"line":96,"column":4},"end":{"line":120,"column":5}},"37":{"start":{"line":97,"column":8},"end":{"line":97,"column":45}},"38":{"start":{"line":99,"column":8},"end":{"line":101,"column":9}},"39":{"start":{"line":100,"column":12},"end":{"line":100,"column":18}},"40":{"start":{"line":104,"column":8},"end":{"line":104,"column":51}},"41":{"start":{"line":106,"column":8},"end":{"line":106,"column":57}},"42":{"start":{"line":108,"column":8},"end":{"line":112,"column":9}},"43":{"start":{"line":110,"column":12},"end":{"line":110,"column":41}},"44":{"start":{"line":111,"column":12},"end":{"line":111,"column":47}},"45":{"start":{"line":113,"column":8},"end":{"line":113,"column":15}},"46":{"start":{"line":115,"column":8},"end":{"line":115,"column":48}},"47":{"start":{"line":116,"column":8},"end":{"line":119,"column":9}},"48":{"start":{"line":117,"column":12},"end":{"line":117,"column":38}},"49":{"start":{"line":118,"column":12},"end":{"line":118,"column":44}},"50":{"start":{"line":122,"column":4},"end":{"line":122,"column":89}},"51":{"start":{"line":123,"column":4},"end":{"line":123,"column":89}},"52":{"start":{"line":135,"column":0},"end":{"line":173,"column":1}},"53":{"start":{"line":136,"column":4},"end":{"line":136,"column":35}},"54":{"start":{"line":139,"column":4},"end":{"line":139,"column":46}},"55":{"start":{"line":142,"column":4},"end":{"line":142,"column":18}},"56":{"start":{"line":143,"column":4},"end":{"line":143,"column":27}},"57":{"start":{"line":146,"column":4},"end":{"line":159,"column":5}},"58":{"start":{"line":147,"column":8},"end":{"line":147,"column":39}},"59":{"start":{"line":148,"column":8},"end":{"line":154,"column":9}},"60":{"start":{"line":149,"column":12},"end":{"line":149,"column":36}},"61":{"start":{"line":150,"column":12},"end":{"line":150,"column":60}},"62":{"start":{"line":152,"column":12},"end":{"line":152,"column":50}},"63":{"start":{"line":153,"column":12},"end":{"line":153,"column":83}},"64":{"start":{"line":157,"column":8},"end":{"line":157,"column":54}},"65":{"start":{"line":158,"column":8},"end":{"line":158,"column":34}},"66":{"start":{"line":162,"column":4},"end":{"line":162,"column":13}},"67":{"start":{"line":163,"column":4},"end":{"line":172,"column":5}},"68":{"start":{"line":164,"column":8},"end":{"line":169,"column":9}},"69":{"start":{"line":165,"column":12},"end":{"line":165,"column":27}},"70":{"start":{"line":168,"column":12},"end":{"line":168,"column":31}},"71":{"start":{"line":171,"column":8},"end":{"line":171,"column":99}},"72":{"start":{"line":217,"column":0},"end":{"line":269,"column":1}},"73":{"start":{"line":219,"column":4},"end":{"line":221,"column":5}},"74":{"start":{"line":220,"column":8},"end":{"line":220,"column":83}},"75":{"start":{"line":223,"column":4},"end":{"line":225,"column":48}},"76":{"start":{"line":229,"column":4},"end":{"line":231,"column":5}},"77":{"start":{"line":230,"column":8},"end":{"line":230,"column":24}},"78":{"start":{"line":234,"column":4},"end":{"line":236,"column":63}},"79":{"start":{"line":242,"column":4},"end":{"line":242,"column":50}},"80":{"start":{"line":248,"column":4},"end":{"line":249,"column":53}},"81":{"start":{"line":254,"column":4},"end":{"line":266,"column":5}},"82":{"start":{"line":256,"column":8},"end":{"line":256,"column":65}},"83":{"start":{"line":261,"column":8},"end":{"line":261,"column":72}},"84":{"start":{"line":263,"column":8},"end":{"line":265,"column":9}},"85":{"start":{"line":264,"column":12},"end":{"line":264,"column":43}},"86":{"start":{"line":268,"column":4},"end":{"line":268,"column":20}},"87":{"start":{"line":271,"column":0},"end":{"line":271,"column":25}}},"branchMap":{"1":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":44,"column":4}},{"start":{"line":44,"column":4},"end":{"line":44,"column":4}}]},"2":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":4},"end":{"line":50,"column":4}},{"start":{"line":50,"column":4},"end":{"line":50,"column":4}}]},"3":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":4},"end":{"line":70,"column":4}},{"start":{"line":70,"column":4},"end":{"line":70,"column":4}}]},"4":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":4},"end":{"line":82,"column":4}},{"start":{"line":82,"column":4},"end":{"line":82,"column":4}}]},"5":{"line":83,"type":"binary-expr","locations":[{"start":{"line":83,"column":30},"end":{"line":83,"column":64}},{"start":{"line":83,"column":68},"end":{"line":83,"column":69}}]},"6":{"line":85,"type":"binary-expr","locations":[{"start":{"line":85,"column":26},"end":{"line":85,"column":57}},{"start":{"line":85,"column":61},"end":{"line":85,"column":62}}]},"7":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":4},"end":{"line":88,"column":4}},{"start":{"line":88,"column":4},"end":{"line":88,"column":4}}]},"8":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":32},"end":{"line":89,"column":66}},{"start":{"line":89,"column":70},"end":{"line":89,"column":71}}]},"9":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":8},"end":{"line":99,"column":8}},{"start":{"line":99,"column":8},"end":{"line":99,"column":8}}]},"10":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":8},"end":{"line":108,"column":8}},{"start":{"line":108,"column":8},"end":{"line":108,"column":8}}]},"11":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":8},"end":{"line":116,"column":8}},{"start":{"line":116,"column":8},"end":{"line":116,"column":8}}]},"12":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":8},"end":{"line":148,"column":8}},{"start":{"line":148,"column":8},"end":{"line":148,"column":8}}]},"13":{"line":164,"type":"if","locations":[{"start":{"line":164,"column":8},"end":{"line":164,"column":8}},{"start":{"line":164,"column":8},"end":{"line":164,"column":8}}]},"14":{"line":219,"type":"if","locations":[{"start":{"line":219,"column":4},"end":{"line":219,"column":4}},{"start":{"line":219,"column":4},"end":{"line":219,"column":4}}]},"15":{"line":229,"type":"if","locations":[{"start":{"line":229,"column":4},"end":{"line":229,"column":4}},{"start":{"line":229,"column":4},"end":{"line":229,"column":4}}]},"16":{"line":263,"type":"if","locations":[{"start":{"line":263,"column":8},"end":{"line":263,"column":8}},{"start":{"line":263,"column":8},"end":{"line":263,"column":8}}]}},"code":["'use strict';","/* @flow */","","var uniqueCountSorted = require('./unique_count_sorted'),","    numericSort = require('./numeric_sort');","","/**"," * Create a new column x row matrix."," *"," * @private"," * @param {number} columns"," * @param {number} rows"," * @return {Array<Array<number>>} matrix"," * @example"," * makeMatrix(10, 10);"," */","function makeMatrix(columns, rows) {","    var matrix = [];","    for (var i = 0; i < columns; i++) {","        var column = [];","        for (var j = 0; j < rows; j++) {","            column.push(0);","        }","        matrix.push(column);","    }","    return matrix;","}","","/**"," * Generates incrementally computed values based on the sums and sums of"," * squares for the data array"," *"," * @private"," * @param {number} j"," * @param {number} i"," * @param {Array<number>} sums"," * @param {Array<number>} sumsOfSquares"," * @return {number}"," * @example"," * ssq(0, 1, [-1, 0, 2], [1, 1, 5]);"," */","function ssq(j, i, sums, sumsOfSquares) {","    var sji; // s(j, i)","    if (j > 0) {","        var muji = (sums[i] - sums[j - 1]) / (i - j + 1); // mu(j, i)","        sji = sumsOfSquares[i] - sumsOfSquares[j - 1] - (i - j + 1) * muji * muji;","    } else {","        sji = sumsOfSquares[i] - sums[i] * sums[i] / (i + 1);","    }","    if (sji < 0) {","        return 0;","    }","    return sji;","}","","/**"," * Function that recursively divides and conquers computations"," * for cluster j"," *"," * @private"," * @param {number} iMin Minimum index in cluster to be computed"," * @param {number} iMax Maximum index in cluster to be computed"," * @param {number} cluster Index of the cluster currently being computed"," * @param {Array<Array<number>>} matrix"," * @param {Array<Array<number>>} backtrackMatrix"," * @param {Array<number>} sums"," * @param {Array<number>} sumsOfSquares"," */","function fillMatrixColumn(iMin, iMax, cluster, matrix, backtrackMatrix, sums, sumsOfSquares) {","    if (iMin > iMax) {","        return;","    }","","    // Start at midpoint between iMin and iMax","    var i = Math.floor((iMin + iMax) / 2);","","    matrix[cluster][i] = matrix[cluster - 1][i - 1];","    backtrackMatrix[cluster][i] = i;","","    var jlow = cluster; // the lower end for j","","    if (iMin > cluster) {","        jlow = Math.max(jlow, backtrackMatrix[cluster][iMin - 1] || 0);","    }","    jlow = Math.max(jlow, backtrackMatrix[cluster - 1][i] || 0);","","    var jhigh = i - 1; // the upper end for j","    if (iMax < matrix.length - 1) {","        jhigh = Math.min(jhigh, backtrackMatrix[cluster][iMax + 1] || 0);","    }","","    var sji;","    var sjlowi;","    var ssqjlow;","    var ssqj;","    for (var j = jhigh; j >= jlow; --j) {","        sji = ssq(j, i, sums, sumsOfSquares);","","        if (sji + matrix[cluster - 1][jlow - 1] >= matrix[cluster][i]) {","            break;","        }","","        // Examine the lower bound of the cluster border","        sjlowi = ssq(jlow, i, sums, sumsOfSquares);","","        ssqjlow = sjlowi + matrix[cluster - 1][jlow - 1];","","        if (ssqjlow < matrix[cluster][i]) {","            // Shrink the lower bound","            matrix[cluster][i] = ssqjlow;","            backtrackMatrix[cluster][i] = jlow;","        }","        jlow++;","","        ssqj = sji + matrix[cluster - 1][j - 1];","        if (ssqj < matrix[cluster][i]) {","            matrix[cluster][i] = ssqj;","            backtrackMatrix[cluster][i] = j;","        }","    }","","    fillMatrixColumn(iMin, i - 1, cluster, matrix, backtrackMatrix, sums, sumsOfSquares);","    fillMatrixColumn(i + 1, iMax, cluster, matrix, backtrackMatrix, sums, sumsOfSquares);","}","","/**"," * Initializes the main matrices used in Ckmeans and kicks"," * off the divide and conquer cluster computation strategy"," *"," * @private"," * @param {Array<number>} data sorted array of values"," * @param {Array<Array<number>>} matrix"," * @param {Array<Array<number>>} backtrackMatrix"," */","function fillMatrices(data, matrix, backtrackMatrix) {","    var nValues = matrix[0].length;","","    // Shift values by the median to improve numeric stability","    var shift = data[Math.floor(nValues / 2)];","","    // Cumulative sum and cumulative sum of squares for all values in data array","    var sums = [];","    var sumsOfSquares = [];","","    // Initialize first column in matrix & backtrackMatrix","    for (var i = 0, shiftedValue; i < nValues; ++i) {","        shiftedValue = data[i] - shift;","        if (i === 0) {","            sums.push(shiftedValue);","            sumsOfSquares.push(shiftedValue * shiftedValue);","        } else {","            sums.push(sums[i - 1] + shiftedValue);","            sumsOfSquares.push(sumsOfSquares[i - 1] + shiftedValue * shiftedValue);","        }","","        // Initialize for cluster = 0","        matrix[0][i] = ssq(0, i, sums, sumsOfSquares);","        backtrackMatrix[0][i] = 0;","    }","","    // Initialize the rest of the columns","    var iMin;","    for (var cluster = 1; cluster < matrix.length; ++cluster) {","        if (cluster < matrix.length - 1) {","            iMin = cluster;","        } else {","            // No need to compute matrix[K-1][0] ... matrix[K-1][N-2]","            iMin = nValues - 1;","        }","","        fillMatrixColumn(iMin, nValues - 1, cluster, matrix, backtrackMatrix, sums, sumsOfSquares);","    }","}","","/**"," * Ckmeans clustering is an improvement on heuristic-based clustering"," * approaches like Jenks. The algorithm was developed in"," * [Haizhou Wang and Mingzhou Song](http://journal.r-project.org/archive/2011-2/RJournal_2011-2_Wang+Song.pdf)"," * as a [dynamic programming](https://en.wikipedia.org/wiki/Dynamic_programming) approach"," * to the problem of clustering numeric data into groups with the least"," * within-group sum-of-squared-deviations."," *"," * Minimizing the difference within groups - what Wang & Song refer to as"," * `withinss`, or within sum-of-squares, means that groups are optimally"," * homogenous within and the data is split into representative groups."," * This is very useful for visualization, where you may want to represent"," * a continuous variable in discrete color or style groups. This function"," * can provide groups that emphasize differences between data."," *"," * Being a dynamic approach, this algorithm is based on two matrices that"," * store incrementally-computed values for squared deviations and backtracking"," * indexes."," *"," * This implementation is based on Ckmeans 3.4.6, which introduced a new divide"," * and conquer approach that improved runtime from O(kn^2) to O(kn log(n))."," *"," * Unlike the [original implementation](https://cran.r-project.org/web/packages/Ckmeans.1d.dp/index.html),"," * this implementation does not include any code to automatically determine"," * the optimal number of clusters: this information needs to be explicitly"," * provided."," *"," * ### References"," * _Ckmeans.1d.dp: Optimal k-means Clustering in One Dimension by Dynamic"," * Programming_ Haizhou Wang and Mingzhou Song ISSN 2073-4859"," *"," * from The R Journal Vol. 3/2, December 2011"," * @param {Array<number>} x input data, as an array of number values"," * @param {number} nClusters number of desired classes. This cannot be"," * greater than the number of values in the data array."," * @returns {Array<Array<number>>} clustered input"," * @throws {Error} if the number of requested clusters is higher than the size of the data"," * @example"," * ckmeans([-1, 2, -1, 2, 4, 5, 6, -1, 2, -1], 3);"," * // The input, clustered into groups of similar numbers."," * //= [[-1, -1, -1, -1], [2, 2, 2], [4, 5, 6]]);"," */","function ckmeans(x/*: Array<number> */, nClusters/*: number */)/*: Array<Array<number>> */ {","","    if (nClusters > x.length) {","        throw new Error('cannot generate more classes than there are data values');","    }","","    var sorted = numericSort(x),","        // we'll use this as the maximum number of clusters","        uniqueCount = uniqueCountSorted(sorted);","","    // if all of the input values are identical, there's one cluster","    // with all of the input in it.","    if (uniqueCount === 1) {","        return [sorted];","    }","","    // named 'S' originally","    var matrix = makeMatrix(nClusters, sorted.length),","        // named 'J' originally","        backtrackMatrix = makeMatrix(nClusters, sorted.length);","","    // This is a dynamic programming way to solve the problem of minimizing","    // within-cluster sum of squares. It's similar to linear regression","    // in this way, and this calculation incrementally computes the","    // sum of squares that are later read.","    fillMatrices(sorted, matrix, backtrackMatrix);","","    // The real work of Ckmeans clustering happens in the matrix generation:","    // the generated matrices encode all possible clustering combinations, and","    // once they're generated we can solve for the best clustering groups","    // very quickly.","    var clusters = [],","        clusterRight = backtrackMatrix[0].length - 1;","","    // Backtrack the clusters from the dynamic programming matrix. This","    // starts at the bottom-right corner of the matrix (if the top-left is 0, 0),","    // and moves the cluster target with the loop.","    for (var cluster = backtrackMatrix.length - 1; cluster >= 0; cluster--) {","","        var clusterLeft = backtrackMatrix[cluster][clusterRight];","","        // fill the cluster from the sorted input by taking a slice of the","        // array. the backtrack matrix makes this easy - it stores the","        // indexes where the cluster should start and end.","        clusters[cluster] = sorted.slice(clusterLeft, clusterRight + 1);","","        if (cluster > 0) {","            clusterRight = clusterLeft - 1;","        }","    }","","    return clusters;","}","","module.exports = ckmeans;",""],"l":{"4":1,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"24":0,"26":0,"42":1,"43":0,"44":0,"45":0,"46":0,"48":0,"50":0,"51":0,"53":0,"69":1,"70":0,"71":0,"75":0,"77":0,"78":0,"80":0,"82":0,"83":0,"85":0,"87":0,"88":0,"89":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"99":0,"100":0,"104":0,"106":0,"108":0,"110":0,"111":0,"113":0,"115":0,"116":0,"117":0,"118":0,"122":0,"123":0,"135":1,"136":0,"139":0,"142":0,"143":0,"146":0,"147":0,"148":0,"149":0,"150":0,"152":0,"153":0,"157":0,"158":0,"162":0,"163":0,"164":0,"165":0,"168":0,"171":0,"217":1,"219":0,"220":0,"223":0,"229":0,"230":0,"234":0,"242":0,"248":0,"254":0,"256":0,"261":0,"263":0,"264":0,"268":0,"271":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/unique_count_sorted.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/unique_count_sorted.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"uniqueCountSorted","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":59}}}},"statementMap":{"1":{"start":{"line":18,"column":0},"end":{"line":28,"column":1}},"2":{"start":{"line":19,"column":4},"end":{"line":20,"column":22}},"3":{"start":{"line":21,"column":4},"end":{"line":26,"column":5}},"4":{"start":{"line":22,"column":8},"end":{"line":25,"column":9}},"5":{"start":{"line":23,"column":12},"end":{"line":23,"column":33}},"6":{"start":{"line":24,"column":12},"end":{"line":24,"column":31}},"7":{"start":{"line":27,"column":4},"end":{"line":27,"column":28}},"8":{"start":{"line":30,"column":0},"end":{"line":30,"column":35}}},"branchMap":{"1":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":8},"end":{"line":22,"column":8}},{"start":{"line":22,"column":8},"end":{"line":22,"column":8}}]},"2":{"line":22,"type":"binary-expr","locations":[{"start":{"line":22,"column":12},"end":{"line":22,"column":19}},{"start":{"line":22,"column":23},"end":{"line":22,"column":45}}]}},"code":["'use strict';","/* @flow */","","/**"," * For a sorted input, counting the number of unique values"," * is possible in constant time and constant memory. This is"," * a simple implementation of the algorithm."," *"," * Values are compared with `===`, so objects and non-primitive objects"," * are not handled in any special way."," *"," * @param {Array<*>} x an array of any kind of value"," * @returns {number} count of unique values"," * @example"," * uniqueCountSorted([1, 2, 3]); // => 3"," * uniqueCountSorted([1, 1, 1]); // => 1"," */","function uniqueCountSorted(x/*: Array<any>*/)/*: number */ {","    var uniqueValueCount = 0,","        lastSeenValue;","    for (var i = 0; i < x.length; i++) {","        if (i === 0 || x[i] !== lastSeenValue) {","            lastSeenValue = x[i];","            uniqueValueCount++;","        }","    }","    return uniqueValueCount;","}","","module.exports = uniqueCountSorted;",""],"l":{"18":1,"19":0,"21":0,"22":0,"23":0,"24":0,"27":0,"30":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/equal_interval_breaks.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/equal_interval_breaks.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"equalIntervalBreaks","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":93}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":5,"column":27}},"2":{"start":{"line":20,"column":0},"end":{"line":48,"column":1}},"3":{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},"4":{"start":{"line":23,"column":8},"end":{"line":23,"column":17}},"5":{"start":{"line":26,"column":4},"end":{"line":27,"column":24}},"6":{"start":{"line":31,"column":4},"end":{"line":31,"column":26}},"7":{"start":{"line":35,"column":4},"end":{"line":35,"column":49}},"8":{"start":{"line":39,"column":4},"end":{"line":41,"column":5}},"9":{"start":{"line":40,"column":8},"end":{"line":40,"column":47}},"10":{"start":{"line":45,"column":4},"end":{"line":45,"column":24}},"11":{"start":{"line":47,"column":4},"end":{"line":47,"column":18}},"12":{"start":{"line":50,"column":0},"end":{"line":50,"column":37}}},"branchMap":{"1":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":22,"column":4}},{"start":{"line":22,"column":4},"end":{"line":22,"column":4}}]}},"code":["'use strict';","/* @flow */","","var max = require('./max'),","    min = require('./min');","","/**"," * Given an array of x, this will find the extent of the"," * x and return an array of breaks that can be used"," * to categorize the x into a number of classes. The"," * returned array will always be 1 longer than the number of"," * classes because it includes the minimum value."," *"," * @param {Array<number>} x an array of number values"," * @param {number} nClasses number of desired classes"," * @returns {Array<number>} array of class break positions"," * @example"," * equalIntervalBreaks([1, 2, 3, 4, 5, 6], 4); //= [1, 2.25, 3.5, 4.75, 6]"," */","function equalIntervalBreaks(x/*: Array<number> */, nClasses/*:number*/)/*: Array<number> */ {","","    if (x.length < 2) {","        return x;","    }","","    var theMin = min(x),","        theMax = max(x); ","","    // the first break will always be the minimum value","    // in the xset","    var breaks = [theMin];","","    // The size of each break is the full range of the x","    // divided by the number of classes requested","    var breakSize = (theMax - theMin) / nClasses;","","    // In the case of nClasses = 1, this loop won't run","    // and the returned breaks will be [min, max]","    for (var i = 1; i < nClasses; i++) {","        breaks.push(breaks[0] + breakSize * i);","    }","","    // the last break will always be the","    // maximum.","    breaks.push(theMax);","","    return breaks;","}","","module.exports = equalIntervalBreaks;",""],"l":{"4":1,"20":1,"22":0,"23":0,"26":0,"31":0,"35":0,"39":0,"40":0,"45":0,"47":0,"50":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/sample_covariance.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/sample_covariance.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"sampleCovariance","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":81}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":29}},"2":{"start":{"line":19,"column":0},"end":{"line":53,"column":1}},"3":{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},"4":{"start":{"line":23,"column":8},"end":{"line":23,"column":80}},"5":{"start":{"line":26,"column":4},"end":{"line":28,"column":5}},"6":{"start":{"line":27,"column":8},"end":{"line":27,"column":93}},"7":{"start":{"line":34,"column":4},"end":{"line":36,"column":16}},"8":{"start":{"line":42,"column":4},"end":{"line":44,"column":5}},"9":{"start":{"line":43,"column":8},"end":{"line":43,"column":47}},"10":{"start":{"line":49,"column":4},"end":{"line":49,"column":41}},"11":{"start":{"line":52,"column":4},"end":{"line":52,"column":35}},"12":{"start":{"line":55,"column":0},"end":{"line":55,"column":34}}},"branchMap":{"1":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":22,"column":4}},{"start":{"line":22,"column":4},"end":{"line":22,"column":4}}]},"2":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":4},"end":{"line":26,"column":4}},{"start":{"line":26,"column":4},"end":{"line":26,"column":4}}]}},"code":["'use strict';","/* @flow */","","var mean = require('./mean');","","/**"," * [Sample covariance](https://en.wikipedia.org/wiki/Sample_mean_and_sampleCovariance) of two datasets:"," * how much do the two datasets move together?"," * x and y are two datasets, represented as arrays of numbers."," *"," * @param {Array<number>} x a sample of two or more data points"," * @param {Array<number>} y a sample of two or more data points"," * @throws {Error} if x and y do not have equal lengths"," * @throws {Error} if x or y have length of one or less"," * @returns {number} sample covariance"," * @example"," * sampleCovariance([1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1]); // => -3.5"," */","function sampleCovariance(x /*:Array<number>*/, y /*:Array<number>*/)/*:number*/ {","","    // The two datasets must have the same length which must be more than 1","    if (x.length !== y.length) {","        throw new Error('sampleCovariance requires samples with equal lengths');","    }","","    if (x.length < 2) {","        throw new Error('sampleCovariance requires at least two data points in each sample');","    }","","    // determine the mean of each dataset so that we can judge each","    // value of the dataset fairly as the difference from the mean. this","    // way, if one dataset is [1, 2, 3] and [2, 3, 4], their covariance","    // does not suffer because of the difference in absolute values","    var xmean = mean(x),","        ymean = mean(y),","        sum = 0;","","    // for each pair of values, the covariance increases when their","    // difference from the mean is associated - if both are well above","    // or if both are well below","    // the mean, the covariance increases significantly.","    for (var i = 0; i < x.length; i++) {","        sum += (x[i] - xmean) * (y[i] - ymean);","    }","","    // this is Bessels' Correction: an adjustment made to sample statistics","    // that allows for the reduced degree of freedom entailed in calculating","    // values from samples rather than complete populations.","    var besselsCorrection = x.length - 1;","","    // the covariance is weighted by the length of the datasets.","    return sum / besselsCorrection;","}","","module.exports = sampleCovariance;",""],"l":{"4":1,"19":1,"22":0,"23":0,"26":0,"27":0,"34":0,"42":0,"43":0,"49":0,"52":0,"55":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/sample_correlation.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/sample_correlation.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"sampleCorrelation","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":84}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":54}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":69}},"3":{"start":{"line":18,"column":0},"end":{"line":24,"column":1}},"4":{"start":{"line":19,"column":4},"end":{"line":21,"column":42}},"5":{"start":{"line":23,"column":4},"end":{"line":23,"column":29}},"6":{"start":{"line":26,"column":0},"end":{"line":26,"column":35}}},"branchMap":{},"code":["'use strict';","/* @flow */","","var sampleCovariance = require('./sample_covariance');","var sampleStandardDeviation = require('./sample_standard_deviation');","","/**"," * The [correlation](http://en.wikipedia.org/wiki/Correlation_and_dependence) is"," * a measure of how correlated two datasets are, between -1 and 1"," *"," * @param {Array<number>} x first input"," * @param {Array<number>} y second input"," * @returns {number} sample correlation"," * @example"," * sampleCorrelation([1, 2, 3, 4, 5, 6], [2, 2, 3, 4, 5, 60]).toFixed(2);"," * // => '0.69'"," */","function sampleCorrelation(x/*: Array<number> */, y/*: Array<number> */)/*:number*/ {","    var cov = sampleCovariance(x, y),","        xstd = sampleStandardDeviation(x),","        ystd = sampleStandardDeviation(y);","","    return cov / xstd / ystd;","}","","module.exports = sampleCorrelation;",""],"l":{"4":1,"5":1,"18":1,"19":0,"23":0,"26":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/sample_standard_deviation.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/sample_standard_deviation.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"sampleStandardDeviation","line":16,"loc":{"start":{"line":16,"column":0},"end":{"line":16,"column":65}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":50}},"2":{"start":{"line":16,"column":0},"end":{"line":20,"column":1}},"3":{"start":{"line":18,"column":4},"end":{"line":18,"column":44}},"4":{"start":{"line":19,"column":4},"end":{"line":19,"column":38}},"5":{"start":{"line":22,"column":0},"end":{"line":22,"column":41}}},"branchMap":{},"code":["'use strict';","/* @flow */","","var sampleVariance = require('./sample_variance');","","/**"," * The [standard deviation](http://en.wikipedia.org/wiki/Standard_deviation)"," * is the square root of the variance."," *"," * @param {Array<number>} x input array"," * @returns {number} sample standard deviation"," * @example"," * sampleStandardDeviation([2, 4, 4, 4, 5, 5, 7, 9]).toFixed(2);"," * // => '2.14'"," */","function sampleStandardDeviation(x/*:Array<number>*/)/*:number*/ {","    // The standard deviation of no numbers is null","    var sampleVarianceX = sampleVariance(x);","    return Math.sqrt(sampleVarianceX);","}","","module.exports = sampleStandardDeviation;",""],"l":{"4":1,"16":1,"18":0,"19":0,"22":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/sample_variance.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/sample_variance.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"sampleVariance","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":59}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":66}},"2":{"start":{"line":23,"column":0},"end":{"line":38,"column":1}},"3":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"4":{"start":{"line":26,"column":8},"end":{"line":26,"column":76}},"5":{"start":{"line":29,"column":4},"end":{"line":29,"column":64}},"6":{"start":{"line":34,"column":4},"end":{"line":34,"column":41}},"7":{"start":{"line":37,"column":4},"end":{"line":37,"column":57}},"8":{"start":{"line":40,"column":0},"end":{"line":40,"column":32}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]}},"code":["'use strict';","/* @flow */","","var sumNthPowerDeviations = require('./sum_nth_power_deviations');","","/**"," * The [sample variance](https://en.wikipedia.org/wiki/Variance#Sample_variance)"," * is the sum of squared deviations from the mean. The sample variance"," * is distinguished from the variance by the usage of [Bessel's Correction](https://en.wikipedia.org/wiki/Bessel's_correction):"," * instead of dividing the sum of squared deviations by the length of the input,"," * it is divided by the length minus one. This corrects the bias in estimating"," * a value from a set that you don't know if full."," *"," * References:"," * * [Wolfram MathWorld on Sample Variance](http://mathworld.wolfram.com/SampleVariance.html)"," *"," * @param {Array<number>} x a sample of two or more data points"," * @throws {Error} if the length of x is less than 2"," * @return {number} sample variance"," * @example"," * sampleVariance([1, 2, 3, 4, 5]); // => 2.5"," */","function sampleVariance(x /*: Array<number> */)/*:number*/ {","    // The variance of no numbers is null","    if (x.length < 2) {","        throw new Error('sampleVariance requires at least two data points');","    }","","    var sumSquaredDeviationsValue = sumNthPowerDeviations(x, 2);","","    // this is Bessels' Correction: an adjustment made to sample statistics","    // that allows for the reduced degree of freedom entailed in calculating","    // values from samples rather than complete populations.","    var besselsCorrection = x.length - 1;","","    // Find the mean value of that list","    return sumSquaredDeviationsValue / besselsCorrection;","}","","module.exports = sampleVariance;",""],"l":{"4":1,"23":1,"25":0,"26":0,"29":0,"34":0,"37":0,"40":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/sample_skewness.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/sample_skewness.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"sampleSkewness","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":59}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":66}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":69}},"3":{"start":{"line":23,"column":0},"end":{"line":36,"column":1}},"4":{"start":{"line":25,"column":4},"end":{"line":25,"column":64}},"5":{"start":{"line":27,"column":4},"end":{"line":29,"column":5}},"6":{"start":{"line":28,"column":8},"end":{"line":28,"column":78}},"7":{"start":{"line":31,"column":4},"end":{"line":33,"column":57}},"8":{"start":{"line":35,"column":4},"end":{"line":35,"column":65}},"9":{"start":{"line":38,"column":0},"end":{"line":38,"column":32}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":27,"column":4}},{"start":{"line":27,"column":4},"end":{"line":27,"column":4}}]}},"code":["'use strict';","/* @flow */","","var sumNthPowerDeviations = require('./sum_nth_power_deviations');","var sampleStandardDeviation = require('./sample_standard_deviation');","","/**"," * [Skewness](http://en.wikipedia.org/wiki/Skewness) is"," * a measure of the extent to which a probability distribution of a"," * real-valued random variable \"leans\" to one side of the mean."," * The skewness value can be positive or negative, or even undefined."," *"," * Implementation is based on the adjusted Fisher-Pearson standardized"," * moment coefficient, which is the version found in Excel and several"," * statistical packages including Minitab, SAS and SPSS."," *"," * @param {Array<number>} x a sample of 3 or more data points"," * @returns {number} sample skewness"," * @throws {Error} if x has length of 3 or less"," * @example"," * sampleSkewness([2, 4, 6, 3, 1]); // => 0.590128656384365"," */","function sampleSkewness(x /*: Array<number> */)/*:number*/ {","    // The skewness of less than three arguments is null","    var theSampleStandardDeviation = sampleStandardDeviation(x);","","    if (x.length < 3) {","        throw new Error('sampleSkewness requires at least three data points');","    }","","    var n = x.length,","        cubedS = Math.pow(theSampleStandardDeviation, 3),","        sumCubedDeviations = sumNthPowerDeviations(x, 3);","","    return n * sumCubedDeviations / ((n - 1) * (n - 2) * cubedS);","}","","module.exports = sampleSkewness;",""],"l":{"4":1,"5":1,"23":1,"25":0,"27":0,"28":0,"31":0,"35":0,"38":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/permutations_heap.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/permutations_heap.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"permutationsHeap","line":12,"loc":{"start":{"line":12,"column":0},"end":{"line":12,"column":85}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":47,"column":1}},"2":{"start":{"line":13,"column":4},"end":{"line":13,"column":45}},"3":{"start":{"line":14,"column":4},"end":{"line":14,"column":42}},"4":{"start":{"line":16,"column":4},"end":{"line":18,"column":5}},"5":{"start":{"line":17,"column":8},"end":{"line":17,"column":23}},"6":{"start":{"line":20,"column":4},"end":{"line":44,"column":5}},"7":{"start":{"line":21,"column":8},"end":{"line":43,"column":9}},"8":{"start":{"line":25,"column":12},"end":{"line":25,"column":29}},"9":{"start":{"line":26,"column":12},"end":{"line":28,"column":13}},"10":{"start":{"line":27,"column":16},"end":{"line":27,"column":38}},"11":{"start":{"line":32,"column":12},"end":{"line":32,"column":42}},"12":{"start":{"line":33,"column":12},"end":{"line":33,"column":45}},"13":{"start":{"line":34,"column":12},"end":{"line":34,"column":31}},"14":{"start":{"line":36,"column":12},"end":{"line":36,"column":48}},"15":{"start":{"line":37,"column":12},"end":{"line":37,"column":25}},"16":{"start":{"line":38,"column":12},"end":{"line":38,"column":18}},"17":{"start":{"line":41,"column":12},"end":{"line":41,"column":27}},"18":{"start":{"line":42,"column":12},"end":{"line":42,"column":16}},"19":{"start":{"line":46,"column":4},"end":{"line":46,"column":24}},"20":{"start":{"line":49,"column":0},"end":{"line":49,"column":34}}},"branchMap":{"1":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":8},"end":{"line":21,"column":8}},{"start":{"line":21,"column":8},"end":{"line":21,"column":8}}]},"2":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":12},"end":{"line":26,"column":12}},{"start":{"line":26,"column":12},"end":{"line":26,"column":12}}]}},"code":["/* @flow */","","'use strict';","","/**"," * Implementation of [Heap's Algorithm](https://en.wikipedia.org/wiki/Heap%27s_algorithm)"," * for generating permutations."," *"," * @param {Array} elements any type of data"," * @returns {Array<Array>} array of permutations"," */","function permutationsHeap/*:: <T> */(elements /*: Array<T> */)/*: Array<Array<T>> */ {","    var indexes = new Array(elements.length);","    var permutations = [elements.slice()];","","    for (var i = 0; i < elements.length; i++) {","        indexes[i] = 0;","    }","","    for (i = 0; i < elements.length;) {","        if (indexes[i] < i) {","","            // At odd indexes, swap from indexes[i] instead","            // of from the beginning of the array","            var swapFrom = 0;","            if (i % 2 !== 0) {","                swapFrom = indexes[i];","            }","","            // swap between swapFrom and i, using","            // a temporary variable as storage.","            var temp = elements[swapFrom];","            elements[swapFrom] = elements[i];","            elements[i] = temp;","","            permutations.push(elements.slice());","            indexes[i]++;","            i = 0;","","        } else {","            indexes[i] = 0;","            i++;","        }","    }","","    return permutations;","}","","module.exports = permutationsHeap;",""],"l":{"12":1,"13":0,"14":0,"16":0,"17":0,"20":0,"21":0,"25":0,"26":0,"27":0,"32":0,"33":0,"34":0,"36":0,"37":0,"38":0,"41":0,"42":0,"46":0,"49":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/combinations.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/combinations.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"combinations","line":14,"loc":{"start":{"line":14,"column":0},"end":{"line":14,"column":59}}}},"statementMap":{"1":{"start":{"line":14,"column":0},"end":{"line":34,"column":1}},"2":{"start":{"line":15,"column":4},"end":{"line":15,"column":10}},"3":{"start":{"line":16,"column":4},"end":{"line":16,"column":13}},"4":{"start":{"line":17,"column":4},"end":{"line":17,"column":29}},"5":{"start":{"line":18,"column":4},"end":{"line":18,"column":27}},"6":{"start":{"line":19,"column":4},"end":{"line":19,"column":13}},"7":{"start":{"line":21,"column":4},"end":{"line":32,"column":5}},"8":{"start":{"line":22,"column":8},"end":{"line":31,"column":9}},"9":{"start":{"line":23,"column":12},"end":{"line":23,"column":40}},"10":{"start":{"line":25,"column":12},"end":{"line":25,"column":81}},"11":{"start":{"line":26,"column":12},"end":{"line":30,"column":13}},"12":{"start":{"line":27,"column":16},"end":{"line":27,"column":48}},"13":{"start":{"line":28,"column":16},"end":{"line":28,"column":35}},"14":{"start":{"line":29,"column":16},"end":{"line":29,"column":43}},"15":{"start":{"line":33,"column":4},"end":{"line":33,"column":27}},"16":{"start":{"line":36,"column":0},"end":{"line":36,"column":30}}},"branchMap":{"1":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":8},"end":{"line":22,"column":8}},{"start":{"line":22,"column":8},"end":{"line":22,"column":8}}]}},"code":["/* @flow */","'use strict';","/**"," * Implementation of Combinations"," * Combinations are unique subsets of a collection - in this case, k x from a collection at a time."," * https://en.wikipedia.org/wiki/Combination"," * @param {Array} x any type of data"," * @param {int} k the number of objects in each group (without replacement)"," * @returns {Array<Array>} array of permutations"," * @example"," * combinations([1, 2, 3], 2); // => [[1,2], [1,3], [2,3]]"," */","","function combinations(x /*: Array<any> */, k/*: number */) {","    var i;","    var subI;","    var combinationList = [];","    var subsetCombinations;","    var next;","","    for (i = 0; i < x.length; i++) {","        if (k === 1) {","            combinationList.push([x[i]])","        } else {","            subsetCombinations = combinations(x.slice( i + 1, x.length ), k - 1);","            for (subI = 0; subI < subsetCombinations.length; subI++) {","                next = subsetCombinations[subI];","                next.unshift(x[i]);","                combinationList.push(next);","            }","        }","    }","    return combinationList;","}","","module.exports = combinations;",""],"l":{"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"21":0,"22":0,"23":0,"25":0,"26":0,"27":0,"28":0,"29":0,"33":0,"36":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/combinations_replacement.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/combinations_replacement.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"combinationsReplacement","line":16,"loc":{"start":{"line":16,"column":0},"end":{"line":18,"column":21}}}},"statementMap":{"1":{"start":{"line":16,"column":0},"end":{"line":47,"column":1}},"2":{"start":{"line":20,"column":4},"end":{"line":20,"column":29}},"3":{"start":{"line":22,"column":4},"end":{"line":44,"column":5}},"4":{"start":{"line":23,"column":8},"end":{"line":43,"column":9}},"5":{"start":{"line":26,"column":12},"end":{"line":26,"column":40}},"6":{"start":{"line":35,"column":12},"end":{"line":37,"column":23}},"7":{"start":{"line":39,"column":12},"end":{"line":42,"column":13}},"8":{"start":{"line":40,"column":16},"end":{"line":41,"column":52}},"9":{"start":{"line":46,"column":4},"end":{"line":46,"column":27}},"10":{"start":{"line":49,"column":0},"end":{"line":49,"column":41}}},"branchMap":{"1":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":8},"end":{"line":23,"column":8}},{"start":{"line":23,"column":8},"end":{"line":23,"column":8}}]}},"code":["/* @flow */","'use strict';","","/**"," * Implementation of [Combinations](https://en.wikipedia.org/wiki/Combination) with replacement"," * Combinations are unique subsets of a collection - in this case, k x from a collection at a time."," * 'With replacement' means that a given element can be chosen multiple times."," * Unlike permutation, order doesn't matter for combinations."," * "," * @param {Array} x any type of data"," * @param {int} k the number of objects in each group (without replacement)"," * @returns {Array<Array>} array of permutations"," * @example"," * combinationsReplacement([1, 2], 2); // => [[1, 1], [1, 2], [2, 2]]"," */","function combinationsReplacement(","    x /*: Array<any> */,","    k /*: number */) {","","    var combinationList = [];","","    for (var i = 0; i < x.length; i++) {","        if (k === 1) {","            // If we're requested to find only one element, we don't need","            // to recurse: just push `x[i]` onto the list of combinations.","            combinationList.push([x[i]])","        } else {","            // Otherwise, recursively find combinations, given `k - 1`. Note that","            // we request `k - 1`, so if you were looking for k=3 combinations, we're","            // requesting k=2. This -1 gets reversed in the for loop right after this","            // code, since we concatenate `x[i]` onto the selected combinations,","            // bringing `k` back up to your requested level.","            // This recursion may go many levels deep, since it only stops once","            // k=1.","            var subsetCombinations = combinationsReplacement(","                x.slice(i, x.length),","                k - 1);","","            for (var j = 0; j < subsetCombinations.length; j++) {","                combinationList.push([x[i]]","                    .concat(subsetCombinations[j]));","            }","        }","    }","","    return combinationList;","}","","module.exports = combinationsReplacement;",""],"l":{"16":1,"20":0,"22":0,"23":0,"26":0,"35":0,"39":0,"40":0,"46":0,"49":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/add_to_mean.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/add_to_mean.js","s":{"1":1,"2":0,"3":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"addToMean","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":90}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":21,"column":1}},"2":{"start":{"line":20,"column":4},"end":{"line":20,"column":48}},"3":{"start":{"line":23,"column":0},"end":{"line":23,"column":27}}},"branchMap":{},"code":["'use strict';","/* @flow */","","/**"," * When adding a new value to a list, one does not have to necessary"," * recompute the mean of the list in linear time. They can instead use"," * this function to compute the new mean by providing the current mean,"," * the number of elements in the list that produced it and the new"," * value to add."," *"," * @param {number} mean current mean"," * @param {number} n number of items in the list"," * @param {number} newValue the added value"," * @returns {number} the new mean"," *"," * @example"," * addToMean(14, 5, 53); // => 20.5"," */","function addToMean(mean /*: number*/, n/*: number */, newValue/*: number */)/*: number */ {","    return mean + ((newValue - mean) / (n + 1));","}","","module.exports = addToMean;",""],"l":{"19":1,"20":0,"23":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/combine_means.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/combine_means.js","s":{"1":1,"2":0,"3":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"combineMeans","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":109}}}},"statementMap":{"1":{"start":{"line":20,"column":0},"end":{"line":22,"column":1}},"2":{"start":{"line":21,"column":4},"end":{"line":21,"column":49}},"3":{"start":{"line":24,"column":0},"end":{"line":24,"column":30}}},"branchMap":{},"code":["'use strict';","/* @flow */","","/**"," * When combining two lists of values for which one already knows the means,"," * one does not have to necessary recompute the mean of the combined lists in"," * linear time. They can instead use this function to compute the combined"," * mean by providing the mean & number of values of the first list and the mean"," * & number of values of the second list."," *"," * @param {number} mean1 mean of the first list"," * @param {number} n1 number of items in the first list"," * @param {number} mean2 mean of the second list"," * @param {number} n2 number of items in the second list"," * @returns {number} the combined mean"," *"," * @example"," * combineMeans(5, 3, 4, 3); // => 4.5"," */","function combineMeans(mean1 /*: number*/, n1/*: number */, mean2 /*: number*/, n2/*: number */)/*: number */ {","    return (mean1 * n1 + mean2 * n2) / (n1 + n2);","}","","module.exports = combineMeans;",""],"l":{"20":1,"21":0,"24":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/combine_variances.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/combine_variances.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"combineVariances","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":30,"column":34}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":45}},"2":{"start":{"line":24,"column":0},"end":{"line":38,"column":1}},"3":{"start":{"line":32,"column":4},"end":{"line":32,"column":53}},"4":{"start":{"line":34,"column":4},"end":{"line":37,"column":18}},"5":{"start":{"line":40,"column":0},"end":{"line":40,"column":34}}},"branchMap":{},"code":["'use strict';","/* @flow */","","var combineMeans = require('./combine_means')","","/**"," * When combining two lists of values for which one already knows the variances,"," * one does not have to necessary recompute the variance of the combined lists"," * in linear time. They can instead use this function to compute the combined"," * variance by providing the variance, mean & number of values of the first list"," * and the variance, mean & number of values of the second list."," *"," * @param {number} variance1 variance of the first list"," * @param {number} mean1 mean of the first list"," * @param {number} n1 number of items in the first list"," * @param {number} variance2 variance of the second list"," * @param {number} mean2 mean of the second list"," * @param {number} n2 number of items in the second list"," * @returns {number} the combined mean"," *"," * @example"," * combineVariances(14 / 3, 5, 3, 8 / 3, 4, 3); // => 47 / 12"," */","function combineVariances(","    variance1 /*: number*/,","    mean1 /*: number*/,","    n1/*: number */,","    variance2 /*: number*/,","    mean2 /*: number*/,","    n2/*: number */)/*: number */ {","","    var newMean = combineMeans(mean1, n1, mean2, n2);","","    return (","      n1 * (variance1 + Math.pow(mean1 - newMean, 2)) +","      n2 * (variance2 + Math.pow(mean2 - newMean, 2))","    ) / (n1 + n2);","}","","module.exports = combineVariances;",""],"l":{"4":1,"24":1,"32":0,"34":0,"40":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/geometric_mean.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/geometric_mean.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"geometricMean","line":38,"loc":{"start":{"line":38,"column":0},"end":{"line":38,"column":47}}}},"statementMap":{"1":{"start":{"line":38,"column":0},"end":{"line":58,"column":1}},"2":{"start":{"line":40,"column":4},"end":{"line":42,"column":5}},"3":{"start":{"line":41,"column":8},"end":{"line":41,"column":74}},"4":{"start":{"line":45,"column":4},"end":{"line":45,"column":18}},"5":{"start":{"line":47,"column":4},"end":{"line":55,"column":5}},"6":{"start":{"line":49,"column":8},"end":{"line":51,"column":9}},"7":{"start":{"line":50,"column":12},"end":{"line":50,"column":85}},"8":{"start":{"line":54,"column":8},"end":{"line":54,"column":22}},"9":{"start":{"line":57,"column":4},"end":{"line":57,"column":41}},"10":{"start":{"line":60,"column":0},"end":{"line":60,"column":31}}},"branchMap":{"1":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":4},"end":{"line":40,"column":4}},{"start":{"line":40,"column":4},"end":{"line":40,"column":4}}]},"2":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":8},"end":{"line":49,"column":8}},{"start":{"line":49,"column":8},"end":{"line":49,"column":8}}]}},"code":["'use strict';","/* @flow */","","/**"," * The [Geometric Mean](https://en.wikipedia.org/wiki/Geometric_mean) is"," * a mean function that is more useful for numbers in different"," * ranges."," *"," * This is the nth root of the input numbers multiplied by each other."," *"," * The geometric mean is often useful for"," * **[proportional growth](https://en.wikipedia.org/wiki/Geometric_mean#Proportional_growth)**: given"," * growth rates for multiple years, like _80%, 16.66% and 42.85%_, a simple"," * mean will incorrectly estimate an average growth rate, whereas a geometric"," * mean will correctly estimate a growth rate that, over those years,"," * will yield the same end value."," *"," * This runs on `O(n)`, linear time in respect to the array"," *"," * @param {Array<number>} x sample of one or more data points"," * @returns {number} geometric mean"," * @throws {Error} if x is empty"," * @throws {Error} if x contains a negative number"," * @example"," * var growthRates = [1.80, 1.166666, 1.428571];"," * var averageGrowth = geometricMean(growthRates);"," * var averageGrowthRates = [averageGrowth, averageGrowth, averageGrowth];"," * var startingValue = 10;"," * var startingValueMean = 10;"," * growthRates.forEach(function(rate) {"," *   startingValue *= rate;"," * });"," * averageGrowthRates.forEach(function(rate) {"," *   startingValueMean *= rate;"," * });"," * startingValueMean === startingValue;"," */","function geometricMean(x /*: Array<number> */) {","    // The mean of no numbers is null","    if (x.length === 0) {","        throw new Error('geometricMean requires at least one data point');","    }","","    // the starting value.","    var value = 1;","","    for (var i = 0; i < x.length; i++) {","        // the geometric mean is only valid for positive numbers","        if (x[i] <= 0) {","            throw new Error('geometricMean requires only positive numbers as input');","        }","","        // repeatedly multiply the value by each number","        value *= x[i];","    }","","    return Math.pow(value, 1 / x.length);","}","","module.exports = geometricMean;",""],"l":{"38":1,"40":0,"41":0,"45":0,"47":0,"49":0,"50":0,"54":0,"57":0,"60":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/harmonic_mean.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/harmonic_mean.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"harmonicMean","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":46}}}},"statementMap":{"1":{"start":{"line":22,"column":0},"end":{"line":41,"column":1}},"2":{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},"3":{"start":{"line":25,"column":8},"end":{"line":25,"column":73}},"4":{"start":{"line":28,"column":4},"end":{"line":28,"column":26}},"5":{"start":{"line":30,"column":4},"end":{"line":37,"column":5}},"6":{"start":{"line":32,"column":8},"end":{"line":34,"column":9}},"7":{"start":{"line":33,"column":12},"end":{"line":33,"column":84}},"8":{"start":{"line":36,"column":8},"end":{"line":36,"column":34}},"9":{"start":{"line":40,"column":4},"end":{"line":40,"column":36}},"10":{"start":{"line":43,"column":0},"end":{"line":43,"column":30}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":24,"column":4}},{"start":{"line":24,"column":4},"end":{"line":24,"column":4}}]},"2":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":8},"end":{"line":32,"column":8}},{"start":{"line":32,"column":8},"end":{"line":32,"column":8}}]}},"code":["'use strict';","/* @flow */","","/**"," * The [Harmonic Mean](https://en.wikipedia.org/wiki/Harmonic_mean) is"," * a mean function typically used to find the average of rates."," * This mean is calculated by taking the reciprocal of the arithmetic mean"," * of the reciprocals of the input numbers."," *"," * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):"," * a method of finding a typical or central value of a set of numbers."," *"," * This runs on `O(n)`, linear time in respect to the array."," *"," * @param {Array<number>} x sample of one or more data points"," * @returns {number} harmonic mean"," * @throws {Error} if x is empty"," * @throws {Error} if x contains a negative number"," * @example"," * harmonicMean([2, 3]).toFixed(2) // => '2.40'"," */","function harmonicMean(x /*: Array<number> */) {","    // The mean of no numbers is null","    if (x.length === 0) {","        throw new Error('harmonicMean requires at least one data point');","    }","","    var reciprocalSum = 0;","","    for (var i = 0; i < x.length; i++) {","        // the harmonic mean is only valid for positive numbers","        if (x[i] <= 0) {","            throw new Error('harmonicMean requires only positive numbers as input');","        }","","        reciprocalSum += 1 / x[i];","    }","","    // divide n by the the reciprocal sum","    return x.length / reciprocalSum;","}","","module.exports = harmonicMean;",""],"l":{"22":1,"24":0,"25":0,"28":0,"30":0,"32":0,"33":0,"36":0,"40":0,"43":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/median_sorted.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/median_sorted.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"medianSorted","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":62}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":50}},"2":{"start":{"line":22,"column":0},"end":{"line":24,"column":1}},"3":{"start":{"line":23,"column":4},"end":{"line":23,"column":39}},"4":{"start":{"line":26,"column":0},"end":{"line":26,"column":30}}},"branchMap":{},"code":["'use strict';","/* @flow */","","var quantileSorted = require('./quantile_sorted');","","/**"," * The [median](http://en.wikipedia.org/wiki/Median) is"," * the middle number of a list. This is often a good indicator of 'the middle'"," * when there are outliers that skew the `mean()` value."," * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):"," * a method of finding a typical or central value of a set of numbers."," *"," * The median isn't necessarily one of the elements in the list: the value"," * can be the average of two elements if the list has an even length"," * and the two central values are different."," *"," * @param {Array<number>} sorted input"," * @returns {number} median value"," * @example"," * medianSorted([10, 2, 5, 100, 2, 1]); // => 52.5"," */","function medianSorted(sorted /*: Array<number> */)/*:number*/ {","    return quantileSorted(sorted, 0.5);","}","","module.exports = medianSorted;",""],"l":{"4":1,"22":1,"23":0,"26":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/subtract_from_mean.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/subtract_from_mean.js","s":{"1":1,"2":0,"3":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"subtractFromMean","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":94}}}},"statementMap":{"1":{"start":{"line":18,"column":0},"end":{"line":20,"column":1}},"2":{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},"3":{"start":{"line":22,"column":0},"end":{"line":22,"column":34}}},"branchMap":{},"code":["'use strict';","/* @flow */","","/**"," * When removing a value from a list, one does not have to necessary"," * recompute the mean of the list in linear time. They can instead use"," * this function to compute the new mean by providing the current mean,"," * the number of elements in the list that produced it and the value to remove."," *"," * @param {number} mean current mean"," * @param {number} n number of items in the list"," * @param {number} value the value to remove"," * @returns {number} the new mean"," *"," * @example"," * subtractFromMean(20.5, 6, 53); // => 14"," */","function subtractFromMean(mean /*: number*/, n/*: number */, value/*: number */)/*: number */ {","    return ((mean * n) - value) / (n - 1);","}","","module.exports = subtractFromMean;",""],"l":{"18":1,"19":0,"22":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/root_mean_square.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/root_mean_square.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"rootMeanSquare","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":59}}}},"statementMap":{"1":{"start":{"line":18,"column":0},"end":{"line":29,"column":1}},"2":{"start":{"line":19,"column":4},"end":{"line":21,"column":5}},"3":{"start":{"line":20,"column":8},"end":{"line":20,"column":75}},"4":{"start":{"line":23,"column":4},"end":{"line":23,"column":25}},"5":{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},"6":{"start":{"line":25,"column":8},"end":{"line":25,"column":42}},"7":{"start":{"line":28,"column":4},"end":{"line":28,"column":46}},"8":{"start":{"line":31,"column":0},"end":{"line":31,"column":32}}},"branchMap":{"1":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":4}},{"start":{"line":19,"column":4},"end":{"line":19,"column":4}}]}},"code":["'use strict';","/* @flow */","","/**"," * The Root Mean Square (RMS) is"," * a mean function used as a measure of the magnitude of a set"," * of numbers, regardless of their sign."," * This is the square root of the mean of the squares of the"," * input numbers."," * This runs on `O(n)`, linear time in respect to the array"," *"," * @param {Array<number>} x a sample of one or more data points"," * @returns {number} root mean square"," * @throws {Error} if x is empty"," * @example"," * rootMeanSquare([-1, 1, -1, 1]); // => 1"," */","function rootMeanSquare(x /*: Array<number> */)/*:number*/ {","    if (x.length === 0) {","        throw new Error('rootMeanSquare requires at least one data point');","    }","","    var sumOfSquares = 0;","    for (var i = 0; i < x.length; i++) {","        sumOfSquares += Math.pow(x[i], 2);","    }","","    return Math.sqrt(sumOfSquares / x.length);","}","","module.exports = rootMeanSquare;",""],"l":{"18":1,"19":0,"20":0,"23":0,"24":0,"25":0,"28":0,"31":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/t_test.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/t_test.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"tTest","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":77}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":29}},"3":{"start":{"line":24,"column":0},"end":{"line":36,"column":1}},"4":{"start":{"line":26,"column":4},"end":{"line":26,"column":29}},"5":{"start":{"line":29,"column":4},"end":{"line":29,"column":34}},"6":{"start":{"line":32,"column":4},"end":{"line":32,"column":36}},"7":{"start":{"line":35,"column":4},"end":{"line":35,"column":55}},"8":{"start":{"line":38,"column":0},"end":{"line":38,"column":23}}},"branchMap":{},"code":["'use strict';","/* @flow */","","var standardDeviation = require('./standard_deviation');","var mean = require('./mean');","","/**"," * This is to compute [a one-sample t-test](https://en.wikipedia.org/wiki/Student%27s_t-test#One-sample_t-test), comparing the mean"," * of a sample to a known value, x."," *"," * in this case, we're trying to determine whether the"," * population mean is equal to the value that we know, which is `x`"," * here. usually the results here are used to look up a"," * [p-value](http://en.wikipedia.org/wiki/P-value), which, for"," * a certain level of significance, will let you determine that the"," * null hypothesis can or cannot be rejected."," *"," * @param {Array<number>} x sample of one or more numbers"," * @param {number} expectedValue expected value of the population mean"," * @returns {number} value"," * @example"," * tTest([1, 2, 3, 4, 5, 6], 3.385).toFixed(2); // => '0.16'"," */","function tTest(x/*: Array<number> */, expectedValue/*: number */)/*:number*/ {","    // The mean of the sample","    var sampleMean = mean(x);","","    // The standard deviation of the sample","    var sd = standardDeviation(x);","","    // Square root the length of the sample","    var rootN = Math.sqrt(x.length);","","    // returning the t value","    return (sampleMean - expectedValue) / (sd / rootN);","}","","module.exports = tTest;",""],"l":{"4":1,"5":1,"24":1,"26":0,"29":0,"32":0,"35":0,"38":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/t_test_two_sample.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/t_test_two_sample.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0,0]},"f":{"1":0},"fnMap":{"1":{"name":"tTestTwoSample","line":33,"loc":{"start":{"line":33,"column":0},"end":{"line":36,"column":29}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":29}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":50}},"3":{"start":{"line":33,"column":0},"end":{"line":64,"column":1}},"4":{"start":{"line":37,"column":4},"end":{"line":38,"column":27}},"5":{"start":{"line":42,"column":4},"end":{"line":42,"column":34}},"6":{"start":{"line":42,"column":20},"end":{"line":42,"column":32}},"7":{"start":{"line":45,"column":4},"end":{"line":47,"column":5}},"8":{"start":{"line":46,"column":8},"end":{"line":46,"column":23}},"9":{"start":{"line":49,"column":4},"end":{"line":52,"column":50}},"10":{"start":{"line":54,"column":4},"end":{"line":63,"column":5}},"11":{"start":{"line":58,"column":8},"end":{"line":59,"column":53}},"12":{"start":{"line":61,"column":8},"end":{"line":62,"column":58}},"13":{"start":{"line":66,"column":0},"end":{"line":66,"column":32}}},"branchMap":{"1":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":4},"end":{"line":42,"column":4}},{"start":{"line":42,"column":4},"end":{"line":42,"column":4}}]},"2":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":8},"end":{"line":42,"column":10}},{"start":{"line":42,"column":14},"end":{"line":42,"column":16}}]},"3":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":4},"end":{"line":45,"column":4}},{"start":{"line":45,"column":4},"end":{"line":45,"column":4}}]},"4":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":4},"end":{"line":54,"column":4}},{"start":{"line":54,"column":4},"end":{"line":54,"column":4}}]},"5":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":8},"end":{"line":54,"column":33}},{"start":{"line":55,"column":8},"end":{"line":55,"column":33}},{"start":{"line":56,"column":8},"end":{"line":56,"column":43}},{"start":{"line":57,"column":8},"end":{"line":57,"column":43}}]}},"code":["'use strict';","/* @flow */","","var mean = require('./mean');","var sampleVariance = require('./sample_variance');","","/**"," * This is to compute [two sample t-test](http://en.wikipedia.org/wiki/Student's_t-test)."," * Tests whether \"mean(X)-mean(Y) = difference\", ("," * in the most common case, we often have `difference == 0` to test if two samples"," * are likely to be taken from populations with the same mean value) with"," * no prior knowledge on standard deviations of both samples"," * other than the fact that they have the same standard deviation."," *"," * Usually the results here are used to look up a"," * [p-value](http://en.wikipedia.org/wiki/P-value), which, for"," * a certain level of significance, will let you determine that the"," * null hypothesis can or cannot be rejected."," *"," * `diff` can be omitted if it equals 0."," *"," * [This is used to confirm or deny](http://www.monarchlab.org/Lab/Research/Stats/2SampleT.aspx)"," * a null hypothesis that the two populations that have been sampled into"," * `sampleX` and `sampleY` are equal to each other."," *"," * @param {Array<number>} sampleX a sample as an array of numbers"," * @param {Array<number>} sampleY a sample as an array of numbers"," * @param {number} [difference=0]"," * @returns {number} test result"," * @example"," * ss.tTestTwoSample([1, 2, 3, 4], [3, 4, 5, 6], 0); //= -2.1908902300206643"," */","function tTestTwoSample(","    sampleX/*: Array<number> */,","    sampleY/*: Array<number> */,","    difference/*: number */) {","    var n = sampleX.length,","        m = sampleY.length;","","    // If either sample doesn't actually have any values, we can't","    // compute this at all, so we return `null`.","    if (!n || !m) { return null; }","","    // default difference (mu) is zero","    if (!difference) {","        difference = 0;","    }","","    var meanX = mean(sampleX),","        meanY = mean(sampleY),","        sampleVarianceX = sampleVariance(sampleX),","        sampleVarianceY = sampleVariance(sampleY);","","    if (typeof meanX === 'number' &&","        typeof meanY === 'number' &&","        typeof sampleVarianceX === 'number' &&","        typeof sampleVarianceY === 'number') {","        var weightedVariance = ((n - 1) * sampleVarianceX +","            (m - 1) * sampleVarianceY) / (n + m - 2);","","        return (meanX - meanY - difference) /","            Math.sqrt(weightedVariance * (1 / n + 1 / m));","    }","}","","module.exports = tTestTwoSample;",""],"l":{"4":1,"5":1,"33":1,"37":0,"42":0,"45":0,"46":0,"49":0,"54":0,"58":0,"61":0,"66":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/bayesian_classifier.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/bayesian_classifier.js","s":{"1":1,"2":0,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"BayesianClassifier","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":30}}},"2":{"name":"(anonymous_2)","line":40,"loc":{"start":{"line":40,"column":37},"end":{"line":40,"column":62}}},"3":{"name":"(anonymous_3)","line":75,"loc":{"start":{"line":75,"column":37},"end":{"line":75,"column":52}}}},"statementMap":{"1":{"start":{"line":24,"column":0},"end":{"line":30,"column":1}},"2":{"start":{"line":27,"column":4},"end":{"line":27,"column":24}},"3":{"start":{"line":29,"column":4},"end":{"line":29,"column":19}},"4":{"start":{"line":40,"column":0},"end":{"line":65,"column":2}},"5":{"start":{"line":43,"column":4},"end":{"line":45,"column":5}},"6":{"start":{"line":44,"column":8},"end":{"line":44,"column":33}},"7":{"start":{"line":48,"column":4},"end":{"line":61,"column":5}},"8":{"start":{"line":49,"column":8},"end":{"line":49,"column":24}},"9":{"start":{"line":52,"column":8},"end":{"line":54,"column":9}},"10":{"start":{"line":53,"column":12},"end":{"line":53,"column":40}},"11":{"start":{"line":55,"column":8},"end":{"line":57,"column":9}},"12":{"start":{"line":56,"column":12},"end":{"line":56,"column":42}},"13":{"start":{"line":60,"column":8},"end":{"line":60,"column":36}},"14":{"start":{"line":64,"column":4},"end":{"line":64,"column":22}},"15":{"start":{"line":75,"column":0},"end":{"line":114,"column":2}},"16":{"start":{"line":77,"column":4},"end":{"line":77,"column":28}},"17":{"start":{"line":81,"column":4},"end":{"line":98,"column":5}},"18":{"start":{"line":82,"column":8},"end":{"line":82,"column":24}},"19":{"start":{"line":83,"column":8},"end":{"line":97,"column":9}},"20":{"start":{"line":86,"column":12},"end":{"line":86,"column":32}},"21":{"start":{"line":92,"column":12},"end":{"line":96,"column":13}},"22":{"start":{"line":93,"column":16},"end":{"line":93,"column":97}},"23":{"start":{"line":95,"column":16},"end":{"line":95,"column":48}},"24":{"start":{"line":101,"column":4},"end":{"line":101,"column":22}},"25":{"start":{"line":103,"column":4},"end":{"line":111,"column":5}},"26":{"start":{"line":107,"column":8},"end":{"line":107,"column":31}},"27":{"start":{"line":108,"column":8},"end":{"line":110,"column":9}},"28":{"start":{"line":109,"column":12},"end":{"line":109,"column":62}},"29":{"start":{"line":113,"column":4},"end":{"line":113,"column":20}},"30":{"start":{"line":116,"column":0},"end":{"line":116,"column":36}}},"branchMap":{"1":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":4},"end":{"line":43,"column":4}},{"start":{"line":43,"column":4},"end":{"line":43,"column":4}}]},"2":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":8},"end":{"line":52,"column":8}},{"start":{"line":52,"column":8},"end":{"line":52,"column":8}}]},"3":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":8},"end":{"line":55,"column":8}},{"start":{"line":55,"column":8},"end":{"line":55,"column":8}}]},"4":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":12},"end":{"line":92,"column":12}},{"start":{"line":92,"column":12},"end":{"line":92,"column":12}}]},"5":{"line":93,"type":"binary-expr","locations":[{"start":{"line":93,"column":47},"end":{"line":93,"column":72}},{"start":{"line":93,"column":76},"end":{"line":93,"column":77}}]}},"code":["'use strict';","/* @flow */","","/**"," * [Bayesian Classifier](http://en.wikipedia.org/wiki/Naive_Bayes_classifier)"," *"," * This is a naïve bayesian classifier that takes"," * singly-nested objects."," *"," * @class"," * @example"," * var bayes = new BayesianClassifier();"," * bayes.train({"," *   species: 'Cat'"," * }, 'animal');"," * var result = bayes.score({"," *   species: 'Cat'"," * })"," * // result"," * // {"," * //   animal: 1"," * // }"," */","function BayesianClassifier() {","    // The number of items that are currently","    // classified in the model","    this.totalCount = 0;","    // Every item classified in the model","    this.data = {};","}","","/**"," * Train the classifier with a new item, which has a single"," * dimension of Javascript literal keys and values."," *"," * @param {Object} item an object with singly-deep properties"," * @param {string} category the category this item belongs to"," * @return {undefined} adds the item to the classifier"," */","BayesianClassifier.prototype.train = function(item, category) {","    // If the data object doesn't have any values","    // for this category, create a new object for it.","    if (!this.data[category]) {","        this.data[category] = {};","    }","","    // Iterate through each key in the item.","    for (var k in item) {","        var v = item[k];","        // Initialize the nested object `data[category][k][item[k]]`","        // with an object of keys that equal 0.","        if (this.data[category][k] === undefined) {","            this.data[category][k] = {};","        }","        if (this.data[category][k][v] === undefined) {","            this.data[category][k][v] = 0;","        }","","        // And increment the key for this key/value combination.","        this.data[category][k][v]++;","    }","","    // Increment the number of items classified","    this.totalCount++;","};","","/**"," * Generate a score of how well this item matches all"," * possible categories based on its attributes"," *"," * @param {Object} item an item in the same format as with train"," * @returns {Object} of probabilities that this item belongs to a"," * given category."," */","BayesianClassifier.prototype.score = function(item) {","    // Initialize an empty array of odds per category.","    var odds = {}, category;","    // Iterate through each key in the item,","    // then iterate through each category that has been used","    // in previous calls to `.train()`","    for (var k in item) {","        var v = item[k];","        for (category in this.data) {","            // Create an empty object for storing key - value combinations","            // for this category.","            odds[category] = {};","","            // If this item doesn't even have a property, it counts for nothing,","            // but if it does have the property that we're looking for from","            // the item to categorize, it counts based on how popular it is","            // versus the whole population.","            if (this.data[category][k]) {","                odds[category][k + '_' + v] = (this.data[category][k][v] || 0) / this.totalCount;","            } else {","                odds[category][k + '_' + v] = 0;","            }","        }","    }","","    // Set up a new object that will contain sums of these odds by category","    var oddsSums = {};","","    for (category in odds) {","        // Tally all of the odds for each category-combination pair -","        // the non-existence of a category does not add anything to the","        // score.","        oddsSums[category] = 0;","        for (var combination in odds[category]) {","            oddsSums[category] += odds[category][combination];","        }","    }","","    return oddsSums;","};","","module.exports = BayesianClassifier;",""],"l":{"24":1,"27":0,"29":0,"40":1,"43":0,"44":0,"48":0,"49":0,"52":0,"53":0,"55":0,"56":0,"60":0,"64":0,"75":1,"77":0,"81":0,"82":0,"83":0,"86":0,"92":0,"93":0,"95":0,"101":0,"103":0,"107":0,"108":0,"109":0,"113":0,"116":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/perceptron.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/perceptron.js","s":{"1":1,"2":0,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"PerceptronModel","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":27}}},"2":{"name":"(anonymous_2)","line":41,"loc":{"start":{"line":41,"column":36},"end":{"line":41,"column":55}}},"3":{"name":"(anonymous_3)","line":71,"loc":{"start":{"line":71,"column":34},"end":{"line":71,"column":60}}}},"statementMap":{"1":{"start":{"line":24,"column":0},"end":{"line":32,"column":1}},"2":{"start":{"line":27,"column":4},"end":{"line":27,"column":22}},"3":{"start":{"line":31,"column":4},"end":{"line":31,"column":18}},"4":{"start":{"line":41,"column":0},"end":{"line":61,"column":2}},"5":{"start":{"line":45,"column":4},"end":{"line":45,"column":65}},"6":{"start":{"line":45,"column":51},"end":{"line":45,"column":63}},"7":{"start":{"line":49,"column":4},"end":{"line":49,"column":18}},"8":{"start":{"line":50,"column":4},"end":{"line":52,"column":5}},"9":{"start":{"line":51,"column":8},"end":{"line":51,"column":47}},"10":{"start":{"line":53,"column":4},"end":{"line":53,"column":23}},"11":{"start":{"line":56,"column":4},"end":{"line":60,"column":5}},"12":{"start":{"line":57,"column":8},"end":{"line":57,"column":17}},"13":{"start":{"line":59,"column":8},"end":{"line":59,"column":17}},"14":{"start":{"line":71,"column":0},"end":{"line":94,"column":2}},"15":{"start":{"line":73,"column":4},"end":{"line":73,"column":52}},"16":{"start":{"line":73,"column":38},"end":{"line":73,"column":50}},"17":{"start":{"line":79,"column":4},"end":{"line":82,"column":5}},"18":{"start":{"line":80,"column":8},"end":{"line":80,"column":32}},"19":{"start":{"line":81,"column":8},"end":{"line":81,"column":22}},"20":{"start":{"line":84,"column":4},"end":{"line":84,"column":44}},"21":{"start":{"line":86,"column":4},"end":{"line":92,"column":5}},"22":{"start":{"line":87,"column":8},"end":{"line":87,"column":42}},"23":{"start":{"line":88,"column":8},"end":{"line":90,"column":9}},"24":{"start":{"line":89,"column":12},"end":{"line":89,"column":54}},"25":{"start":{"line":91,"column":8},"end":{"line":91,"column":30}},"26":{"start":{"line":93,"column":4},"end":{"line":93,"column":16}},"27":{"start":{"line":96,"column":0},"end":{"line":96,"column":33}}},"branchMap":{"1":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":4},"end":{"line":45,"column":4}},{"start":{"line":45,"column":4},"end":{"line":45,"column":4}}]},"2":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":4},"end":{"line":56,"column":4}},{"start":{"line":56,"column":4},"end":{"line":56,"column":4}}]},"3":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":4},"end":{"line":73,"column":4}},{"start":{"line":73,"column":4},"end":{"line":73,"column":4}}]},"4":{"line":73,"type":"binary-expr","locations":[{"start":{"line":73,"column":8},"end":{"line":73,"column":19}},{"start":{"line":73,"column":23},"end":{"line":73,"column":34}}]},"5":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":4},"end":{"line":79,"column":4}},{"start":{"line":79,"column":4},"end":{"line":79,"column":4}}]},"6":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":4},"end":{"line":86,"column":4}},{"start":{"line":86,"column":4},"end":{"line":86,"column":4}}]}},"code":["'use strict';","/* @flow */","","/**"," * This is a single-layer [Perceptron Classifier](http://en.wikipedia.org/wiki/Perceptron) that takes"," * arrays of numbers and predicts whether they should be classified"," * as either 0 or 1 (negative or positive examples)."," * @class"," * @example"," * // Create the model"," * var p = new PerceptronModel();"," * // Train the model with input with a diagonal boundary."," * for (var i = 0; i < 5; i++) {"," *     p.train([1, 1], 1);"," *     p.train([0, 1], 0);"," *     p.train([1, 0], 0);"," *     p.train([0, 0], 0);"," * }"," * p.predict([0, 0]); // 0"," * p.predict([0, 1]); // 0"," * p.predict([1, 0]); // 0"," * p.predict([1, 1]); // 1"," */","function PerceptronModel() {","    // The weights, or coefficients of the model;","    // weights are only populated when training with data.","    this.weights = [];","    // The bias term, or intercept; it is also a weight but","    // it's stored separately for convenience as it is always","    // multiplied by one.","    this.bias = 0;","}","","/**"," * **Predict**: Use an array of features with the weight array and bias"," * to predict whether an example is labeled 0 or 1."," *"," * @param {Array<number>} features an array of features as numbers"," * @returns {number} 1 if the score is over 0, otherwise 0"," */","PerceptronModel.prototype.predict = function(features) {","","    // Only predict if previously trained","    // on the same size feature array(s).","    if (features.length !== this.weights.length) { return null; }","","    // Calculate the sum of features times weights,","    // with the bias added (implicitly times one).","    var score = 0;","    for (var i = 0; i < this.weights.length; i++) {","        score += this.weights[i] * features[i];","    }","    score += this.bias;","","    // Classify as 1 if the score is over 0, otherwise 0.","    if (score > 0) {","        return 1;","    } else {","        return 0;","    }","};","","/**"," * **Train** the classifier with a new example, which is"," * a numeric array of features and a 0 or 1 label."," *"," * @param {Array<number>} features an array of features as numbers"," * @param {number} label either 0 or 1"," * @returns {PerceptronModel} this"," */","PerceptronModel.prototype.train = function(features, label) {","    // Require that only labels of 0 or 1 are considered.","    if (label !== 0 && label !== 1) { return null; }","    // The length of the feature array determines","    // the length of the weight array.","    // The perceptron will continue learning as long as","    // it keeps seeing feature arrays of the same length.","    // When it sees a new data shape, it initializes.","    if (features.length !== this.weights.length) {","        this.weights = features;","        this.bias = 1;","    }","    // Make a prediction based on current weights.","    var prediction = this.predict(features);","    // Update the weights if the prediction is wrong.","    if (prediction !== label) {","        var gradient = label - prediction;","        for (var i = 0; i < this.weights.length; i++) {","            this.weights[i] += gradient * features[i];","        }","        this.bias += gradient;","    }","    return this;","};","","module.exports = PerceptronModel;",""],"l":{"24":1,"27":0,"31":0,"41":1,"45":0,"49":0,"50":0,"51":0,"53":0,"56":0,"57":0,"59":0,"71":1,"73":0,"79":0,"80":0,"81":0,"84":0,"86":0,"87":0,"88":0,"89":0,"91":0,"93":0,"96":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/epsilon.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/epsilon.js","s":{"1":1,"2":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":38,"column":0},"end":{"line":38,"column":21}},"2":{"start":{"line":40,"column":0},"end":{"line":40,"column":25}}},"branchMap":{},"code":["'use strict';","/* @flow */","","/**"," * We use `ε`, epsilon, as a stopping criterion when we want to iterate"," * until we're \"close enough\". Epsilon is a very small number: for"," * simple statistics, that number is **0.0001**"," *"," * This is used in calculations like the binomialDistribution, in which"," * the process of finding a value is [iterative](https://en.wikipedia.org/wiki/Iterative_method):"," * it progresses until it is close enough."," *"," * Below is an example of using epsilon in [gradient descent](https://en.wikipedia.org/wiki/Gradient_descent),"," * where we're trying to find a local minimum of a function's derivative,"," * given by the `fDerivative` method."," *"," * @example"," * // From calculation, we expect that the local minimum occurs at x=9/4"," * var x_old = 0;"," * // The algorithm starts at x=6"," * var x_new = 6;"," * var stepSize = 0.01;"," *"," * function fDerivative(x) {"," *   return 4 * Math.pow(x, 3) - 9 * Math.pow(x, 2);"," * }"," *"," * // The loop runs until the difference between the previous"," * // value and the current value is smaller than epsilon - a rough"," * // meaure of 'close enough'"," * while (Math.abs(x_new - x_old) > ss.epsilon) {"," *   x_old = x_new;"," *   x_new = x_old - stepSize * fDerivative(x_old);"," * }"," *"," * console.log('Local minimum occurs at', x_new);"," */","var epsilon = 0.0001;","","module.exports = epsilon;",""],"l":{"38":1,"40":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/factorial.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/factorial.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"factorial","line":16,"loc":{"start":{"line":16,"column":0},"end":{"line":16,"column":49}}}},"statementMap":{"1":{"start":{"line":16,"column":0},"end":{"line":38,"column":1}},"2":{"start":{"line":19,"column":4},"end":{"line":21,"column":5}},"3":{"start":{"line":20,"column":8},"end":{"line":20,"column":63}},"4":{"start":{"line":23,"column":4},"end":{"line":25,"column":5}},"5":{"start":{"line":24,"column":8},"end":{"line":24,"column":67}},"6":{"start":{"line":31,"column":4},"end":{"line":31,"column":24}},"7":{"start":{"line":32,"column":4},"end":{"line":36,"column":5}},"8":{"start":{"line":35,"column":8},"end":{"line":35,"column":25}},"9":{"start":{"line":37,"column":4},"end":{"line":37,"column":23}},"10":{"start":{"line":40,"column":0},"end":{"line":40,"column":27}}},"branchMap":{"1":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":4}},{"start":{"line":19,"column":4},"end":{"line":19,"column":4}}]},"2":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":4},"end":{"line":23,"column":4}},{"start":{"line":23,"column":4},"end":{"line":23,"column":4}}]}},"code":["'use strict';","/* @flow */","","/**"," * A [Factorial](https://en.wikipedia.org/wiki/Factorial), usually written n!, is the product of all positive"," * integers less than or equal to n. Often factorial is implemented"," * recursively, but this iterative approach is significantly faster"," * and simpler."," *"," * @param {number} n input, must be an integer number 1 or greater"," * @returns {number} factorial: n!"," * @throws {Error} if n is less than 0 or not an integer"," * @example"," * factorial(5); // => 120"," */","function factorial(n /*: number */)/*: number */ {","","    // factorial is mathematically undefined for negative numbers","    if (n < 0) {","        throw new Error('factorial requires an integer input');","    }","","    if (Math.floor(n) !== n) {","        throw new Error('factorial requires a non-negative value');","    }","","    // typically you'll expand the factorial function going down, like","    // 5! = 5 * 4 * 3 * 2 * 1. This is going in the opposite direction,","    // counting from 2 up to the number in question, and since anything","    // multiplied by 1 is itself, the loop only needs to start at 2.","    var accumulator = 1;","    for (var i = 2; i <= n; i++) {","        // for each number up to and including the number `n`, multiply","        // the accumulator my that number.","        accumulator *= i;","    }","    return accumulator;","}","","module.exports = factorial;",""],"l":{"16":1,"19":0,"20":0,"23":0,"24":0,"31":0,"32":0,"35":0,"37":0,"40":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/bernoulli_distribution.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/bernoulli_distribution.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"bernoulliDistribution","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":47}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":62}},"2":{"start":{"line":23,"column":0},"end":{"line":30,"column":1}},"3":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"4":{"start":{"line":26,"column":8},"end":{"line":26,"column":102}},"5":{"start":{"line":29,"column":4},"end":{"line":29,"column":38}},"6":{"start":{"line":32,"column":0},"end":{"line":32,"column":39}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]},"2":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":8},"end":{"line":25,"column":13}},{"start":{"line":25,"column":17},"end":{"line":25,"column":22}}]}},"code":["'use strict';","/* @flow */","","var binomialDistribution = require('./binomial_distribution');","","/**"," * The [Bernoulli distribution](http://en.wikipedia.org/wiki/Bernoulli_distribution)"," * is the probability discrete"," * distribution of a random variable which takes value 1 with success"," * probability `p` and value 0 with failure"," * probability `q` = 1 - `p`. It can be used, for example, to represent the"," * toss of a coin, where \"1\" is defined to mean \"heads\" and \"0\" is defined"," * to mean \"tails\" (or vice versa). It is"," * a special case of a Binomial Distribution"," * where `n` = 1."," *"," * @param {number} p input value, between 0 and 1 inclusive"," * @returns {number} value of bernoulli distribution at this point"," * @throws {Error} if p is outside 0 and 1"," * @example"," * bernoulliDistribution(0.5); // => { '0': 0.5, '1': 0.5 }"," */","function bernoulliDistribution(p/*: number */) {","    // Check that `p` is a valid probability (0 ≤ p ≤ 1)","    if (p < 0 || p > 1 ) {","        throw new Error('bernoulliDistribution requires probability to be between 0 and 1 inclusive');","    }","","    return binomialDistribution(1, p);","}","","module.exports = bernoulliDistribution;",""],"l":{"4":1,"23":1,"25":0,"26":0,"29":0,"32":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/binomial_distribution.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/binomial_distribution.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1},"b":{"1":[0,0],"2":[0,0,0,0]},"f":{"1":0},"fnMap":{"1":{"name":"binomialDistribution","line":17,"loc":{"start":{"line":17,"column":0},"end":{"line":19,"column":44}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":35}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":39}},"3":{"start":{"line":17,"column":0},"end":{"line":52,"column":1}},"4":{"start":{"line":22,"column":4},"end":{"line":25,"column":5}},"5":{"start":{"line":24,"column":8},"end":{"line":24,"column":25}},"6":{"start":{"line":33,"column":4},"end":{"line":35,"column":19}},"7":{"start":{"line":40,"column":4},"end":{"line":49,"column":50}},"8":{"start":{"line":42,"column":8},"end":{"line":44,"column":79}},"9":{"start":{"line":45,"column":8},"end":{"line":45,"column":42}},"10":{"start":{"line":46,"column":8},"end":{"line":46,"column":12}},"11":{"start":{"line":51,"column":4},"end":{"line":51,"column":17}},"12":{"start":{"line":54,"column":0},"end":{"line":54,"column":38}}},"branchMap":{"1":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":22,"column":4}},{"start":{"line":22,"column":4},"end":{"line":22,"column":4}}]},"2":{"line":22,"type":"binary-expr","locations":[{"start":{"line":22,"column":8},"end":{"line":22,"column":23}},{"start":{"line":22,"column":27},"end":{"line":22,"column":42}},{"start":{"line":23,"column":8},"end":{"line":23,"column":19}},{"start":{"line":23,"column":23},"end":{"line":23,"column":39}}]}},"code":["'use strict';","/* @flow */","","var epsilon = require('./epsilon');","var factorial = require('./factorial');","","/**"," * The [Binomial Distribution](http://en.wikipedia.org/wiki/Binomial_distribution) is the discrete probability"," * distribution of the number of successes in a sequence of n independent yes/no experiments, each of which yields"," * success with probability `probability`. Such a success/failure experiment is also called a Bernoulli experiment or"," * Bernoulli trial; when trials = 1, the Binomial Distribution is a Bernoulli Distribution."," *"," * @param {number} trials number of trials to simulate"," * @param {number} probability"," * @returns {Object} output"," */","function binomialDistribution(","    trials/*: number */,","    probability/*: number */)/*: ?Object */ {","    // Check that `p` is a valid probability (0 ≤ p ≤ 1),","    // that `n` is an integer, strictly positive.","    if (probability < 0 || probability > 1 ||","        trials <= 0 || trials % 1 !== 0) {","        return undefined;","    }","","    // We initialize `x`, the random variable, and `accumulator`, an accumulator","    // for the cumulative distribution function to 0. `distribution_functions`","    // is the object we'll return with the `probability_of_x` and the","    // `cumulativeProbability_of_x`, as well as the calculated mean &","    // variance. We iterate until the `cumulativeProbability_of_x` is","    // within `epsilon` of 1.0.","    var x = 0,","        cumulativeProbability = 0,","        cells = {};","","    // This algorithm iterates through each potential outcome,","    // until the `cumulativeProbability` is very close to 1, at","    // which point we've defined the vast majority of outcomes","    do {","        // a [probability mass function](https://en.wikipedia.org/wiki/Probability_mass_function)","        cells[x] = factorial(trials) /","            (factorial(x) * factorial(trials - x)) *","            (Math.pow(probability, x) * Math.pow(1 - probability, trials - x));","        cumulativeProbability += cells[x];","        x++;","    // when the cumulativeProbability is nearly 1, we've calculated","    // the useful range of this distribution","    } while (cumulativeProbability < 1 - epsilon);","","    return cells;","}","","module.exports = binomialDistribution;",""],"l":{"4":1,"5":1,"17":1,"22":0,"24":0,"33":0,"40":0,"42":0,"45":0,"46":0,"51":0,"54":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/poisson_distribution.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/poisson_distribution.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"poissonDistribution","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":50}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":35}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":39}},"3":{"start":{"line":20,"column":0},"end":{"line":45,"column":1}},"4":{"start":{"line":22,"column":4},"end":{"line":22,"column":42}},"5":{"start":{"line":22,"column":23},"end":{"line":22,"column":40}},"6":{"start":{"line":25,"column":4},"end":{"line":30,"column":19}},"7":{"start":{"line":35,"column":4},"end":{"line":42,"column":50}},"8":{"start":{"line":37,"column":8},"end":{"line":37,"column":84}},"9":{"start":{"line":38,"column":8},"end":{"line":38,"column":42}},"10":{"start":{"line":39,"column":8},"end":{"line":39,"column":12}},"11":{"start":{"line":44,"column":4},"end":{"line":44,"column":17}},"12":{"start":{"line":47,"column":0},"end":{"line":47,"column":37}}},"branchMap":{"1":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":22,"column":4}},{"start":{"line":22,"column":4},"end":{"line":22,"column":4}}]}},"code":["'use strict';","/* @flow */","","var epsilon = require('./epsilon');","var factorial = require('./factorial');","","/**"," * The [Poisson Distribution](http://en.wikipedia.org/wiki/Poisson_distribution)"," * is a discrete probability distribution that expresses the probability"," * of a given number of events occurring in a fixed interval of time"," * and/or space if these events occur with a known average rate and"," * independently of the time since the last event."," *"," * The Poisson Distribution is characterized by the strictly positive"," * mean arrival or occurrence rate, `λ`."," *"," * @param {number} lambda location poisson distribution"," * @returns {number} value of poisson distribution at that point"," */","function poissonDistribution(lambda/*: number */) {","    // Check that lambda is strictly positive","    if (lambda <= 0) { return undefined; }","","    // our current place in the distribution","    var x = 0,","        // and we keep track of the current cumulative probability, in","        // order to know when to stop calculating chances.","        cumulativeProbability = 0,","        // the calculated cells to be returned","        cells = {};","","    // This algorithm iterates through each potential outcome,","    // until the `cumulativeProbability` is very close to 1, at","    // which point we've defined the vast majority of outcomes","    do {","        // a [probability mass function](https://en.wikipedia.org/wiki/Probability_mass_function)","        cells[x] = (Math.pow(Math.E, -lambda) * Math.pow(lambda, x)) / factorial(x);","        cumulativeProbability += cells[x];","        x++;","    // when the cumulativeProbability is nearly 1, we've calculated","    // the useful range of this distribution","    } while (cumulativeProbability < 1 - epsilon);","","    return cells;","}","","module.exports = poissonDistribution;",""],"l":{"4":1,"5":1,"20":1,"22":0,"25":0,"35":0,"37":0,"38":0,"39":0,"44":0,"47":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/chi_squared_goodness_of_fit.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/chi_squared_goodness_of_fit.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"chiSquaredGoodnessOfFit","line":34,"loc":{"start":{"line":34,"column":0},"end":{"line":37,"column":45}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":29}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":78}},"3":{"start":{"line":34,"column":0},"end":{"line":107,"column":1}},"4":{"start":{"line":39,"column":4},"end":{"line":53,"column":10}},"5":{"start":{"line":57,"column":4},"end":{"line":62,"column":5}},"6":{"start":{"line":58,"column":8},"end":{"line":60,"column":9}},"7":{"start":{"line":59,"column":12},"end":{"line":59,"column":45}},"8":{"start":{"line":61,"column":8},"end":{"line":61,"column":39}},"9":{"start":{"line":67,"column":4},"end":{"line":71,"column":5}},"10":{"start":{"line":68,"column":8},"end":{"line":70,"column":9}},"11":{"start":{"line":69,"column":12},"end":{"line":69,"column":39}},"12":{"start":{"line":75,"column":4},"end":{"line":79,"column":5}},"13":{"start":{"line":76,"column":8},"end":{"line":78,"column":9}},"14":{"start":{"line":77,"column":12},"end":{"line":77,"column":80}},"15":{"start":{"line":84,"column":4},"end":{"line":92,"column":5}},"16":{"start":{"line":85,"column":8},"end":{"line":91,"column":9}},"17":{"start":{"line":86,"column":12},"end":{"line":86,"column":65}},"18":{"start":{"line":87,"column":12},"end":{"line":87,"column":38}},"19":{"start":{"line":89,"column":12},"end":{"line":89,"column":65}},"20":{"start":{"line":90,"column":12},"end":{"line":90,"column":38}},"21":{"start":{"line":96,"column":4},"end":{"line":100,"column":5}},"22":{"start":{"line":97,"column":8},"end":{"line":99,"column":35}},"23":{"start":{"line":105,"column":4},"end":{"line":105,"column":58}},"24":{"start":{"line":106,"column":4},"end":{"line":106,"column":84}},"25":{"start":{"line":109,"column":0},"end":{"line":109,"column":41}}},"branchMap":{"1":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":8},"end":{"line":58,"column":8}},{"start":{"line":58,"column":8},"end":{"line":58,"column":8}}]},"2":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":8},"end":{"line":68,"column":8}},{"start":{"line":68,"column":8},"end":{"line":68,"column":8}}]},"3":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":8},"end":{"line":76,"column":8}},{"start":{"line":76,"column":8},"end":{"line":76,"column":8}}]},"4":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":8},"end":{"line":85,"column":8}},{"start":{"line":85,"column":8},"end":{"line":85,"column":8}}]}},"code":["'use strict';","/* @flow */","","var mean = require('./mean');","var chiSquaredDistributionTable = require('./chi_squared_distribution_table');","","/**"," * The [χ2 (Chi-Squared) Goodness-of-Fit Test](http://en.wikipedia.org/wiki/Goodness_of_fit#Pearson.27s_chi-squared_test)"," * uses a measure of goodness of fit which is the sum of differences between observed and expected outcome frequencies"," * (that is, counts of observations), each squared and divided by the number of observations expected given the"," * hypothesized distribution. The resulting χ2 statistic, `chiSquared`, can be compared to the chi-squared distribution"," * to determine the goodness of fit. In order to determine the degrees of freedom of the chi-squared distribution, one"," * takes the total number of observed frequencies and subtracts the number of estimated parameters. The test statistic"," * follows, approximately, a chi-square distribution with (k − c) degrees of freedom where `k` is the number of non-empty"," * cells and `c` is the number of estimated parameters for the distribution."," *"," * @param {Array<number>} data"," * @param {Function} distributionType a function that returns a point in a distribution:"," * for instance, binomial, bernoulli, or poisson"," * @param {number} significance"," * @returns {number} chi squared goodness of fit"," * @example"," * // Data from Poisson goodness-of-fit example 10-19 in William W. Hines & Douglas C. Montgomery,"," * // \"Probability and Statistics in Engineering and Management Science\", Wiley (1980)."," * var data1019 = ["," *     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"," *     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"," *     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"," *     2, 2, 2, 2, 2, 2, 2, 2, 2,"," *     3, 3, 3, 3"," * ];"," * ss.chiSquaredGoodnessOfFit(data1019, ss.poissonDistribution, 0.05)); //= false"," */","function chiSquaredGoodnessOfFit(","    data/*: Array<number> */,","    distributionType/*: Function */,","    significance/*: number */)/*: boolean */ {","    // Estimate from the sample data, a weighted mean.","    var inputMean = mean(data),","        // Calculated value of the χ2 statistic.","        chiSquared = 0,","        // Degrees of freedom, calculated as (number of class intervals -","        // number of hypothesized distribution parameters estimated - 1)","        degreesOfFreedom,","        // Number of hypothesized distribution parameters estimated, expected to be supplied in the distribution test.","        // Lose one degree of freedom for estimating `lambda` from the sample data.","        c = 1,","        // The hypothesized distribution.","        // Generate the hypothesized distribution.","        hypothesizedDistribution = distributionType(inputMean),","        observedFrequencies = [],","        expectedFrequencies = [],","        k;","","    // Create an array holding a histogram from the sample data, of","    // the form `{ value: numberOfOcurrences }`","    for (var i = 0; i < data.length; i++) {","        if (observedFrequencies[data[i]] === undefined) {","            observedFrequencies[data[i]] = 0;","        }","        observedFrequencies[data[i]]++;","    }","","    // The histogram we created might be sparse - there might be gaps","    // between values. So we iterate through the histogram, making","    // sure that instead of undefined, gaps have 0 values.","    for (i = 0; i < observedFrequencies.length; i++) {","        if (observedFrequencies[i] === undefined) {","            observedFrequencies[i] = 0;","        }","    }","","    // Create an array holding a histogram of expected data given the","    // sample size and hypothesized distribution.","    for (k in hypothesizedDistribution) {","        if (k in observedFrequencies) {","            expectedFrequencies[+k] = hypothesizedDistribution[k] * data.length;","        }","    }","","    // Working backward through the expected frequencies, collapse classes","    // if less than three observations are expected for a class.","    // This transformation is applied to the observed frequencies as well.","    for (k = expectedFrequencies.length - 1; k >= 0; k--) {","        if (expectedFrequencies[k] < 3) {","            expectedFrequencies[k - 1] += expectedFrequencies[k];","            expectedFrequencies.pop();","","            observedFrequencies[k - 1] += observedFrequencies[k];","            observedFrequencies.pop();","        }","    }","","    // Iterate through the squared differences between observed & expected","    // frequencies, accumulating the `chiSquared` statistic.","    for (k = 0; k < observedFrequencies.length; k++) {","        chiSquared += Math.pow(","            observedFrequencies[k] - expectedFrequencies[k], 2) /","            expectedFrequencies[k];","    }","","    // Calculate degrees of freedom for this test and look it up in the","    // `chiSquaredDistributionTable` in order to","    // accept or reject the goodness-of-fit of the hypothesized distribution.","    degreesOfFreedom = observedFrequencies.length - c - 1;","    return chiSquaredDistributionTable[degreesOfFreedom][significance] < chiSquared;","}","","module.exports = chiSquaredGoodnessOfFit;",""],"l":{"4":1,"5":1,"34":1,"39":0,"57":0,"58":0,"59":0,"61":0,"67":0,"68":0,"69":0,"75":0,"76":0,"77":0,"84":0,"85":0,"86":0,"87":0,"89":0,"90":0,"96":0,"97":0,"105":0,"106":0,"109":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/chi_squared_distribution_table.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/chi_squared_distribution_table.js","s":{"1":1,"2":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":15,"column":0},"end":{"line":497,"column":2}},"2":{"start":{"line":499,"column":0},"end":{"line":499,"column":45}}},"branchMap":{},"code":["'use strict';","/* @flow */","","/**"," * **Percentage Points of the χ2 (Chi-Squared) Distribution**"," *"," * The [χ2 (Chi-Squared) Distribution](http://en.wikipedia.org/wiki/Chi-squared_distribution) is used in the common"," * chi-squared tests for goodness of fit of an observed distribution to a theoretical one, the independence of two"," * criteria of classification of qualitative data, and in confidence interval estimation for a population standard"," * deviation of a normal distribution from a sample standard deviation."," *"," * Values from Appendix 1, Table III of William W. Hines & Douglas C. Montgomery, \"Probability and Statistics in"," * Engineering and Management Science\", Wiley (1980)."," */","var chiSquaredDistributionTable = {","    '1': {","        '0.995': 0,","        '0.99': 0,","        '0.975': 0,","        '0.95': 0,","        '0.9': 0.02,","        '0.5': 0.45,","        '0.1': 2.71,","        '0.05': 3.84,","        '0.025': 5.02,","        '0.01': 6.63,","        '0.005': 7.88","    },","    '2': {","        '0.995': 0.01,","        '0.99': 0.02,","        '0.975': 0.05,","        '0.95': 0.1,","        '0.9': 0.21,","        '0.5': 1.39,","        '0.1': 4.61,","        '0.05': 5.99,","        '0.025': 7.38,","        '0.01': 9.21,","        '0.005': 10.6","    },","    '3': {","        '0.995': 0.07,","        '0.99': 0.11,","        '0.975': 0.22,","        '0.95': 0.35,","        '0.9': 0.58,","        '0.5': 2.37,","        '0.1': 6.25,","        '0.05': 7.81,","        '0.025': 9.35,","        '0.01': 11.34,","        '0.005': 12.84","    },","    '4': {","        '0.995': 0.21,","        '0.99': 0.3,","        '0.975': 0.48,","        '0.95': 0.71,","        '0.9': 1.06,","        '0.5': 3.36,","        '0.1': 7.78,","        '0.05': 9.49,","        '0.025': 11.14,","        '0.01': 13.28,","        '0.005': 14.86","    },","    '5': {","        '0.995': 0.41,","        '0.99': 0.55,","        '0.975': 0.83,","        '0.95': 1.15,","        '0.9': 1.61,","        '0.5': 4.35,","        '0.1': 9.24,","        '0.05': 11.07,","        '0.025': 12.83,","        '0.01': 15.09,","        '0.005': 16.75","    },","    '6': {","        '0.995': 0.68,","        '0.99': 0.87,","        '0.975': 1.24,","        '0.95': 1.64,","        '0.9': 2.2,","        '0.5': 5.35,","        '0.1': 10.65,","        '0.05': 12.59,","        '0.025': 14.45,","        '0.01': 16.81,","        '0.005': 18.55","    },","    '7': {","        '0.995': 0.99,","        '0.99': 1.25,","        '0.975': 1.69,","        '0.95': 2.17,","        '0.9': 2.83,","        '0.5': 6.35,","        '0.1': 12.02,","        '0.05': 14.07,","        '0.025': 16.01,","        '0.01': 18.48,","        '0.005': 20.28","    },","    '8': {","        '0.995': 1.34,","        '0.99': 1.65,","        '0.975': 2.18,","        '0.95': 2.73,","        '0.9': 3.49,","        '0.5': 7.34,","        '0.1': 13.36,","        '0.05': 15.51,","        '0.025': 17.53,","        '0.01': 20.09,","        '0.005': 21.96","    },","    '9': {","        '0.995': 1.73,","        '0.99': 2.09,","        '0.975': 2.7,","        '0.95': 3.33,","        '0.9': 4.17,","        '0.5': 8.34,","        '0.1': 14.68,","        '0.05': 16.92,","        '0.025': 19.02,","        '0.01': 21.67,","        '0.005': 23.59","    },","    '10': {","        '0.995': 2.16,","        '0.99': 2.56,","        '0.975': 3.25,","        '0.95': 3.94,","        '0.9': 4.87,","        '0.5': 9.34,","        '0.1': 15.99,","        '0.05': 18.31,","        '0.025': 20.48,","        '0.01': 23.21,","        '0.005': 25.19","    },","    '11': {","        '0.995': 2.6,","        '0.99': 3.05,","        '0.975': 3.82,","        '0.95': 4.57,","        '0.9': 5.58,","        '0.5': 10.34,","        '0.1': 17.28,","        '0.05': 19.68,","        '0.025': 21.92,","        '0.01': 24.72,","        '0.005': 26.76","    },","    '12': {","        '0.995': 3.07,","        '0.99': 3.57,","        '0.975': 4.4,","        '0.95': 5.23,","        '0.9': 6.3,","        '0.5': 11.34,","        '0.1': 18.55,","        '0.05': 21.03,","        '0.025': 23.34,","        '0.01': 26.22,","        '0.005': 28.3","    },","    '13': {","        '0.995': 3.57,","        '0.99': 4.11,","        '0.975': 5.01,","        '0.95': 5.89,","        '0.9': 7.04,","        '0.5': 12.34,","        '0.1': 19.81,","        '0.05': 22.36,","        '0.025': 24.74,","        '0.01': 27.69,","        '0.005': 29.82","    },","    '14': {","        '0.995': 4.07,","        '0.99': 4.66,","        '0.975': 5.63,","        '0.95': 6.57,","        '0.9': 7.79,","        '0.5': 13.34,","        '0.1': 21.06,","        '0.05': 23.68,","        '0.025': 26.12,","        '0.01': 29.14,","        '0.005': 31.32","    },","    '15': {","        '0.995': 4.6,","        '0.99': 5.23,","        '0.975': 6.27,","        '0.95': 7.26,","        '0.9': 8.55,","        '0.5': 14.34,","        '0.1': 22.31,","        '0.05': 25,","        '0.025': 27.49,","        '0.01': 30.58,","        '0.005': 32.8","    },","    '16': {","        '0.995': 5.14,","        '0.99': 5.81,","        '0.975': 6.91,","        '0.95': 7.96,","        '0.9': 9.31,","        '0.5': 15.34,","        '0.1': 23.54,","        '0.05': 26.3,","        '0.025': 28.85,","        '0.01': 32,","        '0.005': 34.27","    },","    '17': {","        '0.995': 5.7,","        '0.99': 6.41,","        '0.975': 7.56,","        '0.95': 8.67,","        '0.9': 10.09,","        '0.5': 16.34,","        '0.1': 24.77,","        '0.05': 27.59,","        '0.025': 30.19,","        '0.01': 33.41,","        '0.005': 35.72","    },","    '18': {","        '0.995': 6.26,","        '0.99': 7.01,","        '0.975': 8.23,","        '0.95': 9.39,","        '0.9': 10.87,","        '0.5': 17.34,","        '0.1': 25.99,","        '0.05': 28.87,","        '0.025': 31.53,","        '0.01': 34.81,","        '0.005': 37.16","    },","    '19': {","        '0.995': 6.84,","        '0.99': 7.63,","        '0.975': 8.91,","        '0.95': 10.12,","        '0.9': 11.65,","        '0.5': 18.34,","        '0.1': 27.2,","        '0.05': 30.14,","        '0.025': 32.85,","        '0.01': 36.19,","        '0.005': 38.58","    },","    '20': {","        '0.995': 7.43,","        '0.99': 8.26,","        '0.975': 9.59,","        '0.95': 10.85,","        '0.9': 12.44,","        '0.5': 19.34,","        '0.1': 28.41,","        '0.05': 31.41,","        '0.025': 34.17,","        '0.01': 37.57,","        '0.005': 40","    },","    '21': {","        '0.995': 8.03,","        '0.99': 8.9,","        '0.975': 10.28,","        '0.95': 11.59,","        '0.9': 13.24,","        '0.5': 20.34,","        '0.1': 29.62,","        '0.05': 32.67,","        '0.025': 35.48,","        '0.01': 38.93,","        '0.005': 41.4","    },","    '22': {","        '0.995': 8.64,","        '0.99': 9.54,","        '0.975': 10.98,","        '0.95': 12.34,","        '0.9': 14.04,","        '0.5': 21.34,","        '0.1': 30.81,","        '0.05': 33.92,","        '0.025': 36.78,","        '0.01': 40.29,","        '0.005': 42.8","    },","    '23': {","        '0.995': 9.26,","        '0.99': 10.2,","        '0.975': 11.69,","        '0.95': 13.09,","        '0.9': 14.85,","        '0.5': 22.34,","        '0.1': 32.01,","        '0.05': 35.17,","        '0.025': 38.08,","        '0.01': 41.64,","        '0.005': 44.18","    },","    '24': {","        '0.995': 9.89,","        '0.99': 10.86,","        '0.975': 12.4,","        '0.95': 13.85,","        '0.9': 15.66,","        '0.5': 23.34,","        '0.1': 33.2,","        '0.05': 36.42,","        '0.025': 39.36,","        '0.01': 42.98,","        '0.005': 45.56","    },","    '25': {","        '0.995': 10.52,","        '0.99': 11.52,","        '0.975': 13.12,","        '0.95': 14.61,","        '0.9': 16.47,","        '0.5': 24.34,","        '0.1': 34.28,","        '0.05': 37.65,","        '0.025': 40.65,","        '0.01': 44.31,","        '0.005': 46.93","    },","    '26': {","        '0.995': 11.16,","        '0.99': 12.2,","        '0.975': 13.84,","        '0.95': 15.38,","        '0.9': 17.29,","        '0.5': 25.34,","        '0.1': 35.56,","        '0.05': 38.89,","        '0.025': 41.92,","        '0.01': 45.64,","        '0.005': 48.29","    },","    '27': {","        '0.995': 11.81,","        '0.99': 12.88,","        '0.975': 14.57,","        '0.95': 16.15,","        '0.9': 18.11,","        '0.5': 26.34,","        '0.1': 36.74,","        '0.05': 40.11,","        '0.025': 43.19,","        '0.01': 46.96,","        '0.005': 49.65","    },","    '28': {","        '0.995': 12.46,","        '0.99': 13.57,","        '0.975': 15.31,","        '0.95': 16.93,","        '0.9': 18.94,","        '0.5': 27.34,","        '0.1': 37.92,","        '0.05': 41.34,","        '0.025': 44.46,","        '0.01': 48.28,","        '0.005': 50.99","    },","    '29': {","        '0.995': 13.12,","        '0.99': 14.26,","        '0.975': 16.05,","        '0.95': 17.71,","        '0.9': 19.77,","        '0.5': 28.34,","        '0.1': 39.09,","        '0.05': 42.56,","        '0.025': 45.72,","        '0.01': 49.59,","        '0.005': 52.34","    },","    '30': {","        '0.995': 13.79,","        '0.99': 14.95,","        '0.975': 16.79,","        '0.95': 18.49,","        '0.9': 20.6,","        '0.5': 29.34,","        '0.1': 40.26,","        '0.05': 43.77,","        '0.025': 46.98,","        '0.01': 50.89,","        '0.005': 53.67","    },","    '40': {","        '0.995': 20.71,","        '0.99': 22.16,","        '0.975': 24.43,","        '0.95': 26.51,","        '0.9': 29.05,","        '0.5': 39.34,","        '0.1': 51.81,","        '0.05': 55.76,","        '0.025': 59.34,","        '0.01': 63.69,","        '0.005': 66.77","    },","    '50': {","        '0.995': 27.99,","        '0.99': 29.71,","        '0.975': 32.36,","        '0.95': 34.76,","        '0.9': 37.69,","        '0.5': 49.33,","        '0.1': 63.17,","        '0.05': 67.5,","        '0.025': 71.42,","        '0.01': 76.15,","        '0.005': 79.49","    },","    '60': {","        '0.995': 35.53,","        '0.99': 37.48,","        '0.975': 40.48,","        '0.95': 43.19,","        '0.9': 46.46,","        '0.5': 59.33,","        '0.1': 74.4,","        '0.05': 79.08,","        '0.025': 83.3,","        '0.01': 88.38,","        '0.005': 91.95","    },","    '70': {","        '0.995': 43.28,","        '0.99': 45.44,","        '0.975': 48.76,","        '0.95': 51.74,","        '0.9': 55.33,","        '0.5': 69.33,","        '0.1': 85.53,","        '0.05': 90.53,","        '0.025': 95.02,","        '0.01': 100.42,","        '0.005': 104.22","    },","    '80': {","        '0.995': 51.17,","        '0.99': 53.54,","        '0.975': 57.15,","        '0.95': 60.39,","        '0.9': 64.28,","        '0.5': 79.33,","        '0.1': 96.58,","        '0.05': 101.88,","        '0.025': 106.63,","        '0.01': 112.33,","        '0.005': 116.32","    },","    '90': {","        '0.995': 59.2,","        '0.99': 61.75,","        '0.975': 65.65,","        '0.95': 69.13,","        '0.9': 73.29,","        '0.5': 89.33,","        '0.1': 107.57,","        '0.05': 113.14,","        '0.025': 118.14,","        '0.01': 124.12,","        '0.005': 128.3","    },","    '100': {","        '0.995': 67.33,","        '0.99': 70.06,","        '0.975': 74.22,","        '0.95': 77.93,","        '0.9': 82.36,","        '0.5': 99.33,","        '0.1': 118.5,","        '0.05': 124.34,","        '0.025': 129.56,","        '0.01': 135.81,","        '0.005': 140.17","    }","};","","module.exports = chiSquaredDistributionTable;",""],"l":{"15":1,"499":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/z_score.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/z_score.js","s":{"1":1,"2":0,"3":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"zScore","line":27,"loc":{"start":{"line":27,"column":0},"end":{"line":27,"column":88}}}},"statementMap":{"1":{"start":{"line":27,"column":0},"end":{"line":29,"column":1}},"2":{"start":{"line":28,"column":4},"end":{"line":28,"column":42}},"3":{"start":{"line":31,"column":0},"end":{"line":31,"column":24}}},"branchMap":{},"code":["'use strict';","/* @flow */","","/**"," * The [Z-Score, or Standard Score](http://en.wikipedia.org/wiki/Standard_score)."," *"," * The standard score is the number of standard deviations an observation"," * or datum is above or below the mean. Thus, a positive standard score"," * represents a datum above the mean, while a negative standard score"," * represents a datum below the mean. It is a dimensionless quantity"," * obtained by subtracting the population mean from an individual raw"," * score and then dividing the difference by the population standard"," * deviation."," *"," * The z-score is only defined if one knows the population parameters;"," * if one only has a sample set, then the analogous computation with"," * sample mean and sample standard deviation yields the"," * Student's t-statistic."," *"," * @param {number} x"," * @param {number} mean"," * @param {number} standardDeviation"," * @return {number} z score"," * @example"," * zScore(78, 80, 5); // => -0.4"," */","function zScore(x/*:number*/, mean/*:number*/, standardDeviation/*:number*/)/*:number*/ {","    return (x - mean) / standardDeviation;","}","","module.exports = zScore;",""],"l":{"27":1,"28":0,"31":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/cumulative_std_normal_probability.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/cumulative_std_normal_probability.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"cumulativeStdNormalProbability","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":68}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":61}},"2":{"start":{"line":20,"column":0},"end":{"line":41,"column":1}},"3":{"start":{"line":23,"column":4},"end":{"line":28,"column":81}},"4":{"start":{"line":33,"column":4},"end":{"line":40,"column":5}},"5":{"start":{"line":34,"column":8},"end":{"line":34,"column":42}},"6":{"start":{"line":39,"column":8},"end":{"line":39,"column":60}},"7":{"start":{"line":43,"column":0},"end":{"line":43,"column":48}}},"branchMap":{"1":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":4},"end":{"line":33,"column":4}},{"start":{"line":33,"column":4},"end":{"line":33,"column":4}}]}},"code":["'use strict';","/* @flow */","","var standardNormalTable = require('./standard_normal_table');","","/**"," * **[Cumulative Standard Normal Probability](http://en.wikipedia.org/wiki/Standard_normal_table)**"," *"," * Since probability tables cannot be"," * printed for every normal distribution, as there are an infinite variety"," * of normal distributions, it is common practice to convert a normal to a"," * standard normal and then use the standard normal table to find probabilities."," *"," * You can use `.5 + .5 * errorFunction(x / Math.sqrt(2))` to calculate the probability"," * instead of looking it up in a table."," *"," * @param {number} z"," * @returns {number} cumulative standard normal probability"," */","function cumulativeStdNormalProbability(z /*:number */)/*:number */ {","","    // Calculate the position of this value.","    var absZ = Math.abs(z),","        // Each row begins with a different","        // significant digit: 0.5, 0.6, 0.7, and so on. Each value in the table","        // corresponds to a range of 0.01 in the input values, so the value is","        // multiplied by 100.","        index = Math.min(Math.round(absZ * 100), standardNormalTable.length - 1);","","    // The index we calculate must be in the table as a positive value,","    // but we still pay attention to whether the input is positive","    // or negative, and flip the output value as a last step.","    if (z >= 0) {","        return standardNormalTable[index];","    } else {","        // due to floating-point arithmetic, values in the table with","        // 4 significant figures can nevertheless end up as repeating","        // fractions when they're computed here.","        return +(1 - standardNormalTable[index]).toFixed(4);","    }","}","","module.exports = cumulativeStdNormalProbability;",""],"l":{"4":1,"20":1,"23":0,"33":0,"34":0,"39":0,"43":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/standard_normal_table.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/standard_normal_table.js","s":{"1":1,"2":1,"3":310,"4":310,"5":4340,"6":4340,"7":310,"8":1,"9":1,"10":310,"11":1},"b":{},"f":{"1":310},"fnMap":{"1":{"name":"cumulativeDistribution","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":35}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":38}},"2":{"start":{"line":6,"column":0},"end":{"line":16,"column":1}},"3":{"start":{"line":7,"column":4},"end":{"line":8,"column":16}},"4":{"start":{"line":11,"column":4},"end":{"line":14,"column":5}},"5":{"start":{"line":12,"column":8},"end":{"line":12,"column":35}},"6":{"start":{"line":13,"column":8},"end":{"line":13,"column":19}},"7":{"start":{"line":15,"column":4},"end":{"line":15,"column":83}},"8":{"start":{"line":31,"column":0},"end":{"line":31,"column":49}},"9":{"start":{"line":33,"column":0},"end":{"line":35,"column":1}},"10":{"start":{"line":34,"column":4},"end":{"line":34,"column":56}},"11":{"start":{"line":37,"column":0},"end":{"line":37,"column":37}}},"branchMap":{},"code":["'use strict';","/* @flow */","","var SQRT_2PI = Math.sqrt(2 * Math.PI);","","function cumulativeDistribution(z) {","    var sum = z,","        tmp = z;","","    // 15 iterations are enough for 4-digit precision","    for (var i = 1; i < 15; i++) {","        tmp *= z * z / (2 * i + 1);","        sum += tmp;","    }","    return Math.round((0.5 + (sum / SQRT_2PI) * Math.exp(-z * z / 2)) * 1e4) / 1e4;","}","","/**"," * A standard normal table, also called the unit normal table or Z table,"," * is a mathematical table for the values of Φ (phi), which are the values of"," * the cumulative distribution function of the normal distribution."," * It is used to find the probability that a statistic is observed below,"," * above, or between values on the standard normal distribution, and by"," * extension, any normal distribution."," *"," * The probabilities are calculated using the"," * [Cumulative distribution function](https://en.wikipedia.org/wiki/Normal_distribution#Cumulative_distribution_function)."," * The table used is the cumulative, and not cumulative from 0 to mean"," * (even though the latter has 5 digits precision, instead of 4)."," */","var standardNormalTable/*: Array<number> */ = [];","","for (var z = 0; z <= 3.09; z += 0.01) {","    standardNormalTable.push(cumulativeDistribution(z));","}","","module.exports = standardNormalTable;",""],"l":{"4":1,"6":1,"7":310,"11":310,"12":4340,"13":4340,"15":310,"31":1,"33":1,"34":310,"37":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/error_function.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/error_function.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"errorFunction","line":17,"loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":52}}}},"statementMap":{"1":{"start":{"line":17,"column":0},"end":{"line":35,"column":1}},"2":{"start":{"line":18,"column":4},"end":{"line":18,"column":40}},"3":{"start":{"line":19,"column":4},"end":{"line":29,"column":37}},"4":{"start":{"line":30,"column":4},"end":{"line":34,"column":5}},"5":{"start":{"line":31,"column":8},"end":{"line":31,"column":23}},"6":{"start":{"line":33,"column":8},"end":{"line":33,"column":23}},"7":{"start":{"line":37,"column":0},"end":{"line":37,"column":31}}},"branchMap":{"1":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":4},"end":{"line":30,"column":4}},{"start":{"line":30,"column":4},"end":{"line":30,"column":4}}]}},"code":["'use strict';","/* @flow */","","/**"," * **[Gaussian error function](http://en.wikipedia.org/wiki/Error_function)**"," *"," * The `errorFunction(x/(sd * Math.sqrt(2)))` is the probability that a value in a"," * normal distribution with standard deviation sd is within x of the mean."," *"," * This function returns a numerical approximation to the exact value."," *"," * @param {number} x input"," * @return {number} error estimation"," * @example"," * errorFunction(1).toFixed(2); // => '0.84'"," */","function errorFunction(x/*: number */)/*: number */ {","    var t = 1 / (1 + 0.5 * Math.abs(x));","    var tau = t * Math.exp(-Math.pow(x, 2) -","        1.26551223 +","        1.00002368 * t +","        0.37409196 * Math.pow(t, 2) +","        0.09678418 * Math.pow(t, 3) -","        0.18628806 * Math.pow(t, 4) +","        0.27886807 * Math.pow(t, 5) -","        1.13520398 * Math.pow(t, 6) +","        1.48851587 * Math.pow(t, 7) -","        0.82215223 * Math.pow(t, 8) +","        0.17087277 * Math.pow(t, 9));","    if (x >= 0) {","        return 1 - tau;","    } else {","        return tau - 1;","    }","}","","module.exports = errorFunction;",""],"l":{"17":1,"18":0,"19":0,"30":0,"31":0,"33":0,"37":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/inverse_error_function.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/inverse_error_function.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":1},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"inverseErrorFunction","line":12,"loc":{"start":{"line":12,"column":0},"end":{"line":12,"column":59}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":25,"column":1}},"2":{"start":{"line":13,"column":4},"end":{"line":13,"column":64}},"3":{"start":{"line":15,"column":4},"end":{"line":18,"column":55}},"4":{"start":{"line":20,"column":4},"end":{"line":24,"column":5}},"5":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"6":{"start":{"line":23,"column":8},"end":{"line":23,"column":20}},"7":{"start":{"line":27,"column":0},"end":{"line":27,"column":38}}},"branchMap":{"1":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":4},"end":{"line":20,"column":4}},{"start":{"line":20,"column":4},"end":{"line":20,"column":4}}]}},"code":["'use strict';","/* @flow */","","/**"," * The Inverse [Gaussian error function](http://en.wikipedia.org/wiki/Error_function)"," * returns a numerical approximation to the value that would have caused"," * `errorFunction()` to return x."," *"," * @param {number} x value of error function"," * @returns {number} estimated inverted value"," */","function inverseErrorFunction(x/*: number */)/*: number */ {","    var a = (8 * (Math.PI - 3)) / (3 * Math.PI * (4 - Math.PI));","","    var inv = Math.sqrt(Math.sqrt(","        Math.pow(2 / (Math.PI * a) + Math.log(1 - x * x) / 2, 2) -","        Math.log(1 - x * x) / a) -","        (2 / (Math.PI * a) + Math.log(1 - x * x) / 2));","","    if (x >= 0) {","        return inv;","    } else {","        return -inv;","    }","}","","module.exports = inverseErrorFunction;",""],"l":{"12":1,"13":0,"15":0,"20":0,"21":0,"23":0,"27":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/probit.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/probit.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"probit","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":46}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":35}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":63}},"3":{"start":{"line":20,"column":0},"end":{"line":27,"column":1}},"4":{"start":{"line":21,"column":4},"end":{"line":25,"column":5}},"5":{"start":{"line":22,"column":8},"end":{"line":22,"column":20}},"6":{"start":{"line":23,"column":11},"end":{"line":25,"column":5}},"7":{"start":{"line":24,"column":8},"end":{"line":24,"column":24}},"8":{"start":{"line":26,"column":4},"end":{"line":26,"column":58}},"9":{"start":{"line":29,"column":0},"end":{"line":29,"column":24}}},"branchMap":{"1":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":21,"column":4}},{"start":{"line":21,"column":4},"end":{"line":21,"column":4}}]},"2":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":11},"end":{"line":23,"column":11}},{"start":{"line":23,"column":11},"end":{"line":23,"column":11}}]}},"code":["'use strict';","/* @flow */","","var epsilon = require('./epsilon');","var inverseErrorFunction = require('./inverse_error_function');","","/**"," * The [Probit](http://en.wikipedia.org/wiki/Probit)"," * is the inverse of cumulativeStdNormalProbability(),"," * and is also known as the normal quantile function."," *"," * It returns the number of standard deviations from the mean"," * where the p'th quantile of values can be found in a normal distribution."," * So, for example, probit(0.5 + 0.6827/2) ≈ 1 because 68.27% of values are"," * normally found within 1 standard deviation above or below the mean."," *"," * @param {number} p"," * @returns {number} probit"," */","function probit(p /*: number */)/*: number */ {","    if (p === 0) {","        p = epsilon;","    } else if (p >= 1) {","        p = 1 - epsilon;","    }","    return Math.sqrt(2) * inverseErrorFunction(2 * p - 1);","}","","module.exports = probit;",""],"l":{"4":1,"5":1,"20":1,"21":0,"22":0,"23":0,"24":0,"26":0,"29":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/mixin.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/mixin.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"mixin","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":69}}},"2":{"name":"wrap","line":40,"loc":{"start":{"line":40,"column":4},"end":{"line":40,"column":26}}},"3":{"name":"(anonymous_3)","line":41,"loc":{"start":{"line":41,"column":15},"end":{"line":41,"column":26}}}},"statementMap":{"1":{"start":{"line":23,"column":0},"end":{"line":78,"column":1}},"2":{"start":{"line":24,"column":4},"end":{"line":24,"column":71}},"3":{"start":{"line":27,"column":4},"end":{"line":29,"column":5},"skip":true},"4":{"start":{"line":28,"column":8},"end":{"line":28,"column":88},"skip":true},"5":{"start":{"line":33,"column":4},"end":{"line":36,"column":44}},"6":{"start":{"line":40,"column":4},"end":{"line":50,"column":5}},"7":{"start":{"line":41,"column":8},"end":{"line":49,"column":10}},"8":{"start":{"line":44,"column":12},"end":{"line":44,"column":62}},"9":{"start":{"line":46,"column":12},"end":{"line":46,"column":31}},"10":{"start":{"line":48,"column":12},"end":{"line":48,"column":46}},"11":{"start":{"line":53,"column":4},"end":{"line":53,"column":18}},"12":{"start":{"line":54,"column":4},"end":{"line":60,"column":5}},"13":{"start":{"line":57,"column":8},"end":{"line":57,"column":34}},"14":{"start":{"line":59,"column":8},"end":{"line":59,"column":36}},"15":{"start":{"line":68,"column":4},"end":{"line":75,"column":5}},"16":{"start":{"line":69,"column":8},"end":{"line":74,"column":11}},"17":{"start":{"line":77,"column":4},"end":{"line":77,"column":21}},"18":{"start":{"line":80,"column":0},"end":{"line":80,"column":23}}},"branchMap":{"1":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":21},"end":{"line":24,"column":42}},{"start":{"line":24,"column":46},"end":{"line":24,"column":69}}]},"2":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":27,"column":4},"skip":true},{"start":{"line":27,"column":4},"end":{"line":27,"column":4},"skip":true}]},"3":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":4},"end":{"line":54,"column":4}},{"start":{"line":54,"column":4},"end":{"line":54,"column":4}}]}},"code":["'use strict';","/* @flow */","","/**"," * **Mixin** simple_statistics to a single Array instance if provided"," * or the Array native object if not. This is an optional"," * feature that lets you treat simple_statistics as a native feature"," * of Javascript."," *"," * @param {Object} ss simple statistics"," * @param {Array} [array=] a single array instance which will be augmented"," * with the extra methods. If omitted, mixin will apply to all arrays"," * by changing the global `Array.prototype`."," * @throws {Error} if the JavaScript environment doesn't support Object.defineProperty"," * @returns {*} the extended Array, or Array.prototype if no object"," * is given."," *"," * @example"," * var myNumbers = [1, 2, 3];"," * mixin(ss, myNumbers);"," * console.log(myNumbers.sum()); // 6"," */","function mixin(ss /*: Object */, array /*: ?Array<any> */)/*: any */ {","    var support = !!(Object.defineProperty && Object.defineProperties);","    // Coverage testing will never test this error.","    /* istanbul ignore next */","    if (!support) {","        throw new Error('without defineProperty, simple-statistics cannot be mixed in');","    }","","    // only methods which work on basic arrays in a single step","    // are supported","    var arrayMethods = ['median', 'standardDeviation', 'sum', 'product',","        'sampleSkewness',","        'mean', 'min', 'max', 'quantile', 'geometricMean',","        'harmonicMean', 'root_mean_square'];","","    // create a closure with a method name so that a reference","    // like `arrayMethods[i]` doesn't follow the loop increment","    function wrap(method) {","        return function() {","            // cast any arguments into an array, since they're","            // natively objects","            var args = Array.prototype.slice.apply(arguments);","            // make the first argument the array itself","            args.unshift(this);","            // return the result of the ss method","            return ss[method].apply(ss, args);","        };","    }","","    // select object to extend","    var extending;","    if (array) {","        // create a shallow copy of the array so that our internal","        // operations do not change it by reference","        extending = array.slice();","    } else {","        extending = Array.prototype;","    }","","    // for each array function, define a function that gets","    // the array as the first argument.","    // We use [defineProperty](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperty)","    // because it allows these properties to be non-enumerable:","    // `for (var in x)` loops will not run into problems with this","    // implementation.","    for (var i = 0; i < arrayMethods.length; i++) {","        Object.defineProperty(extending, arrayMethods[i], {","            value: wrap(arrayMethods[i]),","            configurable: true,","            enumerable: false,","            writable: true","        });","    }","","    return extending;","}","","module.exports = mixin;",""],"l":{"23":1,"24":0,"27":1,"28":1,"33":0,"40":1,"41":0,"44":0,"46":0,"48":0,"53":0,"54":0,"57":0,"59":0,"68":0,"69":0,"77":0,"80":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/bisect.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/bisect.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"bisect","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":27,"column":44}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":29}},"2":{"start":{"line":22,"column":0},"end":{"line":46,"column":1}},"3":{"start":{"line":29,"column":4},"end":{"line":29,"column":83}},"4":{"start":{"line":29,"column":36},"end":{"line":29,"column":83}},"5":{"start":{"line":31,"column":4},"end":{"line":43,"column":5}},"6":{"start":{"line":32,"column":8},"end":{"line":32,"column":39}},"7":{"start":{"line":34,"column":8},"end":{"line":36,"column":9}},"8":{"start":{"line":35,"column":12},"end":{"line":35,"column":26}},"9":{"start":{"line":38,"column":8},"end":{"line":42,"column":9}},"10":{"start":{"line":39,"column":12},"end":{"line":39,"column":27}},"11":{"start":{"line":41,"column":12},"end":{"line":41,"column":25}},"12":{"start":{"line":45,"column":4},"end":{"line":45,"column":61}},"13":{"start":{"line":48,"column":0},"end":{"line":48,"column":24}}},"branchMap":{"1":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":29,"column":4}},{"start":{"line":29,"column":4},"end":{"line":29,"column":4}}]},"2":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":8},"end":{"line":34,"column":8}},{"start":{"line":34,"column":8},"end":{"line":34,"column":8}}]},"3":{"line":34,"type":"binary-expr","locations":[{"start":{"line":34,"column":12},"end":{"line":34,"column":30}},{"start":{"line":34,"column":34},"end":{"line":34,"column":78}}]},"4":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":8},"end":{"line":38,"column":8}},{"start":{"line":38,"column":8},"end":{"line":38,"column":8}}]}},"code":["'use strict';","/* @flow */","","var sign = require('./sign');","/**"," * [Bisection method](https://en.wikipedia.org/wiki/Bisection_method) is a root-finding "," * method that repeatedly bisects an interval to find the root."," * "," * This function returns a numerical approximation to the exact value."," * "," * @param {Function} func input function"," * @param {Number} start - start of interval"," * @param {Number} end - end of interval"," * @param {Number} maxIterations - the maximum number of iterations"," * @param {Number} errorTolerance - the error tolerance"," * @returns {Number} estimated root value"," * @throws {TypeError} Argument func must be a function"," * "," * @example"," * bisect(Math.cos,0,4,100,0.003); // => 1.572265625"," */","function bisect(","    func/*: (x: any) => number */,","    start/*: number */,","    end/*: number */,","    maxIterations/*: number */,","    errorTolerance/*: number */)/*:number*/ {","","    if (typeof func !== 'function') throw new TypeError('func must be a function');","    ","    for (var i = 0; i < maxIterations; i++) {","        var output = (start + end) / 2;","","        if (func(output) === 0 || Math.abs((end - start) / 2) < errorTolerance) {","            return output;","        }","","        if (sign(func(output)) === sign(func(start))) {","            start = output;","        } else {","            end = output;","        }","    }","    ","    throw new Error('maximum number of iterations exceeded');","}","","module.exports = bisect;",""],"l":{"4":1,"22":1,"29":0,"31":0,"32":0,"34":0,"35":0,"38":0,"39":0,"41":0,"45":0,"48":1}},"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/sign.js":{"path":"/home/travis/build/npmtest/node-npmtest-simple-statistics/node_modules/simple-statistics/src/sign.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"sign","line":16,"loc":{"start":{"line":16,"column":0},"end":{"line":16,"column":43}}}},"statementMap":{"1":{"start":{"line":16,"column":0},"end":{"line":28,"column":1}},"2":{"start":{"line":17,"column":4},"end":{"line":27,"column":5}},"3":{"start":{"line":18,"column":8},"end":{"line":24,"column":9}},"4":{"start":{"line":19,"column":12},"end":{"line":19,"column":22}},"5":{"start":{"line":20,"column":15},"end":{"line":24,"column":9}},"6":{"start":{"line":21,"column":12},"end":{"line":21,"column":20}},"7":{"start":{"line":23,"column":12},"end":{"line":23,"column":21}},"8":{"start":{"line":26,"column":8},"end":{"line":26,"column":44}},"9":{"start":{"line":30,"column":0},"end":{"line":30,"column":22}}},"branchMap":{"1":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":4},"end":{"line":17,"column":4}},{"start":{"line":17,"column":4},"end":{"line":17,"column":4}}]},"2":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":8},"end":{"line":18,"column":8}},{"start":{"line":18,"column":8},"end":{"line":18,"column":8}}]},"3":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":15},"end":{"line":20,"column":15}},{"start":{"line":20,"column":15},"end":{"line":20,"column":15}}]}},"code":["'use strict';","/* @flow */","","/**"," * [Sign](https://en.wikipedia.org/wiki/Sign_function) is a function "," * that extracts the sign of a real number"," * "," * @param {Number} x input value"," * @returns {Number} sign value either 1, 0 or -1"," * @throws {TypeError} if the input argument x is not a number"," * @private"," * "," * @example"," * sign(2); // => 1"," */","function sign(x/*: number */)/*: number */ {","    if (typeof x === 'number') {","        if (x < 0) {","            return -1;","        } else if (x === 0) {","            return 0","        } else {","            return 1;","        }","    } else {","        throw new TypeError('not a number');","    }","}","","module.exports = sign;",""],"l":{"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"23":0,"26":0,"30":1}}}